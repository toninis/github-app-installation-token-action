"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/@actions/core/lib/utils.js
var require_utils = __commonJS({
  "node_modules/@actions/core/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toCommandProperties = exports.toCommandValue = void 0;
    function toCommandValue(input) {
      if (input === null || input === void 0) {
        return "";
      } else if (typeof input === "string" || input instanceof String) {
        return input;
      }
      return JSON.stringify(input);
    }
    exports.toCommandValue = toCommandValue;
    function toCommandProperties(annotationProperties) {
      if (!Object.keys(annotationProperties).length) {
        return {};
      }
      return {
        title: annotationProperties.title,
        file: annotationProperties.file,
        line: annotationProperties.startLine,
        endLine: annotationProperties.endLine,
        col: annotationProperties.startColumn,
        endColumn: annotationProperties.endColumn
      };
    }
    exports.toCommandProperties = toCommandProperties;
  }
});

// node_modules/@actions/core/lib/command.js
var require_command = __commonJS({
  "node_modules/@actions/core/lib/command.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.issue = exports.issueCommand = void 0;
    var os = __importStar(require("os"));
    var utils_1 = require_utils();
    function issueCommand(command, properties, message) {
      const cmd = new Command(command, properties, message);
      process.stdout.write(cmd.toString() + os.EOL);
    }
    exports.issueCommand = issueCommand;
    function issue(name, message = "") {
      issueCommand(name, {}, message);
    }
    exports.issue = issue;
    var CMD_STRING = "::";
    var Command = class {
      constructor(command, properties, message) {
        if (!command) {
          command = "missing.command";
        }
        this.command = command;
        this.properties = properties;
        this.message = message;
      }
      toString() {
        let cmdStr = CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
          cmdStr += " ";
          let first = true;
          for (const key in this.properties) {
            if (this.properties.hasOwnProperty(key)) {
              const val = this.properties[key];
              if (val) {
                if (first) {
                  first = false;
                } else {
                  cmdStr += ",";
                }
                cmdStr += `${key}=${escapeProperty(val)}`;
              }
            }
          }
        }
        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
        return cmdStr;
      }
    };
    function escapeData(s) {
      return utils_1.toCommandValue(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A");
    }
    function escapeProperty(s) {
      return utils_1.toCommandValue(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A").replace(/:/g, "%3A").replace(/,/g, "%2C");
    }
  }
});

// node_modules/uuid/dist/esm-node/rng.js
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    import_crypto.default.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
var import_crypto, rnds8Pool, poolPtr;
var init_rng = __esm({
  "node_modules/uuid/dist/esm-node/rng.js"() {
    import_crypto = __toESM(require("crypto"));
    rnds8Pool = new Uint8Array(256);
    poolPtr = rnds8Pool.length;
  }
});

// node_modules/uuid/dist/esm-node/regex.js
var regex_default;
var init_regex = __esm({
  "node_modules/uuid/dist/esm-node/regex.js"() {
    regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

// node_modules/uuid/dist/esm-node/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default;
var init_validate = __esm({
  "node_modules/uuid/dist/esm-node/validate.js"() {
    init_regex();
    validate_default = validate;
  }
});

// node_modules/uuid/dist/esm-node/stringify.js
function stringify(arr, offset = 0) {
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var byteToHex, stringify_default;
var init_stringify = __esm({
  "node_modules/uuid/dist/esm-node/stringify.js"() {
    init_validate();
    byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    stringify_default = stringify;
  }
});

// node_modules/uuid/dist/esm-node/v1.js
function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || rng)();
    if (node == null) {
      node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = tl >>> 24 & 255;
  b[i++] = tl >>> 16 & 255;
  b[i++] = tl >>> 8 & 255;
  b[i++] = tl & 255;
  const tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i++] = tmh >>> 8 & 255;
  b[i++] = tmh & 255;
  b[i++] = tmh >>> 24 & 15 | 16;
  b[i++] = tmh >>> 16 & 255;
  b[i++] = clockseq >>> 8 | 128;
  b[i++] = clockseq & 255;
  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || stringify_default(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  "node_modules/uuid/dist/esm-node/v1.js"() {
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1_default = v1;
  }
});

// node_modules/uuid/dist/esm-node/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  "node_modules/uuid/dist/esm-node/parse.js"() {
    init_validate();
    parse_default = parse;
  }
});

// node_modules/uuid/dist/esm-node/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
function v35_default(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}
var DNS, URL2;
var init_v35 = __esm({
  "node_modules/uuid/dist/esm-node/v35.js"() {
    init_stringify();
    init_parse();
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  }
});

// node_modules/uuid/dist/esm-node/md5.js
function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto2.default.createHash("md5").update(bytes).digest();
}
var import_crypto2, md5_default;
var init_md5 = __esm({
  "node_modules/uuid/dist/esm-node/md5.js"() {
    import_crypto2 = __toESM(require("crypto"));
    md5_default = md5;
  }
});

// node_modules/uuid/dist/esm-node/v3.js
var v3, v3_default;
var init_v3 = __esm({
  "node_modules/uuid/dist/esm-node/v3.js"() {
    init_v35();
    init_md5();
    v3 = v35_default("v3", 48, md5_default);
    v3_default = v3;
  }
});

// node_modules/uuid/dist/esm-node/v4.js
function v4(options, buf, offset) {
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default;
var init_v4 = __esm({
  "node_modules/uuid/dist/esm-node/v4.js"() {
    init_rng();
    init_stringify();
    v4_default = v4;
  }
});

// node_modules/uuid/dist/esm-node/sha1.js
function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto3.default.createHash("sha1").update(bytes).digest();
}
var import_crypto3, sha1_default;
var init_sha1 = __esm({
  "node_modules/uuid/dist/esm-node/sha1.js"() {
    import_crypto3 = __toESM(require("crypto"));
    sha1_default = sha1;
  }
});

// node_modules/uuid/dist/esm-node/v5.js
var v5, v5_default;
var init_v5 = __esm({
  "node_modules/uuid/dist/esm-node/v5.js"() {
    init_v35();
    init_sha1();
    v5 = v35_default("v5", 80, sha1_default);
    v5_default = v5;
  }
});

// node_modules/uuid/dist/esm-node/nil.js
var nil_default;
var init_nil = __esm({
  "node_modules/uuid/dist/esm-node/nil.js"() {
    nil_default = "00000000-0000-0000-0000-000000000000";
  }
});

// node_modules/uuid/dist/esm-node/version.js
function version(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.substr(14, 1), 16);
}
var version_default;
var init_version = __esm({
  "node_modules/uuid/dist/esm-node/version.js"() {
    init_validate();
    version_default = version;
  }
});

// node_modules/uuid/dist/esm-node/index.js
var esm_node_exports = {};
__export(esm_node_exports, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default,
  validate: () => validate_default,
  version: () => version_default
});
var init_esm_node = __esm({
  "node_modules/uuid/dist/esm-node/index.js"() {
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

// node_modules/@actions/core/lib/file-command.js
var require_file_command = __commonJS({
  "node_modules/@actions/core/lib/file-command.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.prepareKeyValueMessage = exports.issueFileCommand = void 0;
    var fs = __importStar(require("fs"));
    var os = __importStar(require("os"));
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var utils_1 = require_utils();
    function issueFileCommand(command, message) {
      const filePath = process.env[`GITHUB_${command}`];
      if (!filePath) {
        throw new Error(`Unable to find environment variable for file command ${command}`);
      }
      if (!fs.existsSync(filePath)) {
        throw new Error(`Missing file at path: ${filePath}`);
      }
      fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {
        encoding: "utf8"
      });
    }
    exports.issueFileCommand = issueFileCommand;
    function prepareKeyValueMessage(key, value) {
      const delimiter = `ghadelimiter_${uuid_1.v4()}`;
      const convertedValue = utils_1.toCommandValue(value);
      if (key.includes(delimiter)) {
        throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
      }
      if (convertedValue.includes(delimiter)) {
        throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
      }
      return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;
    }
    exports.prepareKeyValueMessage = prepareKeyValueMessage;
  }
});

// node_modules/@actions/http-client/lib/proxy.js
var require_proxy = __commonJS({
  "node_modules/@actions/http-client/lib/proxy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkBypass = exports.getProxyUrl = void 0;
    function getProxyUrl(reqUrl) {
      const usingSsl = reqUrl.protocol === "https:";
      if (checkBypass(reqUrl)) {
        return void 0;
      }
      const proxyVar = (() => {
        if (usingSsl) {
          return process.env["https_proxy"] || process.env["HTTPS_PROXY"];
        } else {
          return process.env["http_proxy"] || process.env["HTTP_PROXY"];
        }
      })();
      if (proxyVar) {
        return new URL(proxyVar);
      } else {
        return void 0;
      }
    }
    exports.getProxyUrl = getProxyUrl;
    function checkBypass(reqUrl) {
      if (!reqUrl.hostname) {
        return false;
      }
      const reqHost = reqUrl.hostname;
      if (isLoopbackAddress(reqHost)) {
        return true;
      }
      const noProxy = process.env["no_proxy"] || process.env["NO_PROXY"] || "";
      if (!noProxy) {
        return false;
      }
      let reqPort;
      if (reqUrl.port) {
        reqPort = Number(reqUrl.port);
      } else if (reqUrl.protocol === "http:") {
        reqPort = 80;
      } else if (reqUrl.protocol === "https:") {
        reqPort = 443;
      }
      const upperReqHosts = [reqUrl.hostname.toUpperCase()];
      if (typeof reqPort === "number") {
        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
      }
      for (const upperNoProxyItem of noProxy.split(",").map((x) => x.trim().toUpperCase()).filter((x) => x)) {
        if (upperNoProxyItem === "*" || upperReqHosts.some((x) => x === upperNoProxyItem || x.endsWith(`.${upperNoProxyItem}`) || upperNoProxyItem.startsWith(".") && x.endsWith(`${upperNoProxyItem}`))) {
          return true;
        }
      }
      return false;
    }
    exports.checkBypass = checkBypass;
    function isLoopbackAddress(host) {
      const hostLower = host.toLowerCase();
      return hostLower === "localhost" || hostLower.startsWith("127.") || hostLower.startsWith("[::1]") || hostLower.startsWith("[0:0:0:0:0:0:0:1]");
    }
  }
});

// node_modules/tunnel/lib/tunnel.js
var require_tunnel = __commonJS({
  "node_modules/tunnel/lib/tunnel.js"(exports) {
    "use strict";
    var net = require("net");
    var tls = require("tls");
    var http = require("http");
    var https = require("https");
    var events = require("events");
    var assert = require("assert");
    var util = require("util");
    exports.httpOverHttp = httpOverHttp;
    exports.httpsOverHttp = httpsOverHttp;
    exports.httpOverHttps = httpOverHttps;
    exports.httpsOverHttps = httpsOverHttps;
    function httpOverHttp(options) {
      var agent = new TunnelingAgent(options);
      agent.request = http.request;
      return agent;
    }
    function httpsOverHttp(options) {
      var agent = new TunnelingAgent(options);
      agent.request = http.request;
      agent.createSocket = createSecureSocket;
      agent.defaultPort = 443;
      return agent;
    }
    function httpOverHttps(options) {
      var agent = new TunnelingAgent(options);
      agent.request = https.request;
      return agent;
    }
    function httpsOverHttps(options) {
      var agent = new TunnelingAgent(options);
      agent.request = https.request;
      agent.createSocket = createSecureSocket;
      agent.defaultPort = 443;
      return agent;
    }
    function TunnelingAgent(options) {
      var self = this;
      self.options = options || {};
      self.proxyOptions = self.options.proxy || {};
      self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;
      self.requests = [];
      self.sockets = [];
      self.on("free", function onFree(socket, host, port, localAddress) {
        var options2 = toOptions(host, port, localAddress);
        for (var i = 0, len = self.requests.length; i < len; ++i) {
          var pending = self.requests[i];
          if (pending.host === options2.host && pending.port === options2.port) {
            self.requests.splice(i, 1);
            pending.request.onSocket(socket);
            return;
          }
        }
        socket.destroy();
        self.removeSocket(socket);
      });
    }
    util.inherits(TunnelingAgent, events.EventEmitter);
    TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
      var self = this;
      var options = mergeOptions({ request: req }, self.options, toOptions(host, port, localAddress));
      if (self.sockets.length >= this.maxSockets) {
        self.requests.push(options);
        return;
      }
      self.createSocket(options, function(socket) {
        socket.on("free", onFree);
        socket.on("close", onCloseOrRemove);
        socket.on("agentRemove", onCloseOrRemove);
        req.onSocket(socket);
        function onFree() {
          self.emit("free", socket, options);
        }
        function onCloseOrRemove(err) {
          self.removeSocket(socket);
          socket.removeListener("free", onFree);
          socket.removeListener("close", onCloseOrRemove);
          socket.removeListener("agentRemove", onCloseOrRemove);
        }
      });
    };
    TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
      var self = this;
      var placeholder = {};
      self.sockets.push(placeholder);
      var connectOptions = mergeOptions({}, self.proxyOptions, {
        method: "CONNECT",
        path: options.host + ":" + options.port,
        agent: false,
        headers: {
          host: options.host + ":" + options.port
        }
      });
      if (options.localAddress) {
        connectOptions.localAddress = options.localAddress;
      }
      if (connectOptions.proxyAuth) {
        connectOptions.headers = connectOptions.headers || {};
        connectOptions.headers["Proxy-Authorization"] = "Basic " + new Buffer(connectOptions.proxyAuth).toString("base64");
      }
      debug("making CONNECT request");
      var connectReq = self.request(connectOptions);
      connectReq.useChunkedEncodingByDefault = false;
      connectReq.once("response", onResponse);
      connectReq.once("upgrade", onUpgrade);
      connectReq.once("connect", onConnect);
      connectReq.once("error", onError);
      connectReq.end();
      function onResponse(res) {
        res.upgrade = true;
      }
      function onUpgrade(res, socket, head) {
        process.nextTick(function() {
          onConnect(res, socket, head);
        });
      }
      function onConnect(res, socket, head) {
        connectReq.removeAllListeners();
        socket.removeAllListeners();
        if (res.statusCode !== 200) {
          debug(
            "tunneling socket could not be established, statusCode=%d",
            res.statusCode
          );
          socket.destroy();
          var error = new Error("tunneling socket could not be established, statusCode=" + res.statusCode);
          error.code = "ECONNRESET";
          options.request.emit("error", error);
          self.removeSocket(placeholder);
          return;
        }
        if (head.length > 0) {
          debug("got illegal response body from proxy");
          socket.destroy();
          var error = new Error("got illegal response body from proxy");
          error.code = "ECONNRESET";
          options.request.emit("error", error);
          self.removeSocket(placeholder);
          return;
        }
        debug("tunneling connection has established");
        self.sockets[self.sockets.indexOf(placeholder)] = socket;
        return cb(socket);
      }
      function onError(cause) {
        connectReq.removeAllListeners();
        debug(
          "tunneling socket could not be established, cause=%s\n",
          cause.message,
          cause.stack
        );
        var error = new Error("tunneling socket could not be established, cause=" + cause.message);
        error.code = "ECONNRESET";
        options.request.emit("error", error);
        self.removeSocket(placeholder);
      }
    };
    TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
      var pos = this.sockets.indexOf(socket);
      if (pos === -1) {
        return;
      }
      this.sockets.splice(pos, 1);
      var pending = this.requests.shift();
      if (pending) {
        this.createSocket(pending, function(socket2) {
          pending.request.onSocket(socket2);
        });
      }
    };
    function createSecureSocket(options, cb) {
      var self = this;
      TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
        var hostHeader = options.request.getHeader("host");
        var tlsOptions = mergeOptions({}, self.options, {
          socket,
          servername: hostHeader ? hostHeader.replace(/:.*$/, "") : options.host
        });
        var secureSocket = tls.connect(0, tlsOptions);
        self.sockets[self.sockets.indexOf(socket)] = secureSocket;
        cb(secureSocket);
      });
    }
    function toOptions(host, port, localAddress) {
      if (typeof host === "string") {
        return {
          host,
          port,
          localAddress
        };
      }
      return host;
    }
    function mergeOptions(target) {
      for (var i = 1, len = arguments.length; i < len; ++i) {
        var overrides = arguments[i];
        if (typeof overrides === "object") {
          var keys = Object.keys(overrides);
          for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
            var k = keys[j];
            if (overrides[k] !== void 0) {
              target[k] = overrides[k];
            }
          }
        }
      }
      return target;
    }
    var debug;
    if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
      debug = function() {
        var args = Array.prototype.slice.call(arguments);
        if (typeof args[0] === "string") {
          args[0] = "TUNNEL: " + args[0];
        } else {
          args.unshift("TUNNEL:");
        }
        console.error.apply(console, args);
      };
    } else {
      debug = function() {
      };
    }
    exports.debug = debug;
  }
});

// node_modules/tunnel/index.js
var require_tunnel2 = __commonJS({
  "node_modules/tunnel/index.js"(exports, module2) {
    module2.exports = require_tunnel();
  }
});

// node_modules/@actions/http-client/lib/index.js
var require_lib = __commonJS({
  "node_modules/@actions/http-client/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;
    var http = __importStar(require("http"));
    var https = __importStar(require("https"));
    var pm = __importStar(require_proxy());
    var tunnel = __importStar(require_tunnel2());
    var HttpCodes;
    (function(HttpCodes2) {
      HttpCodes2[HttpCodes2["OK"] = 200] = "OK";
      HttpCodes2[HttpCodes2["MultipleChoices"] = 300] = "MultipleChoices";
      HttpCodes2[HttpCodes2["MovedPermanently"] = 301] = "MovedPermanently";
      HttpCodes2[HttpCodes2["ResourceMoved"] = 302] = "ResourceMoved";
      HttpCodes2[HttpCodes2["SeeOther"] = 303] = "SeeOther";
      HttpCodes2[HttpCodes2["NotModified"] = 304] = "NotModified";
      HttpCodes2[HttpCodes2["UseProxy"] = 305] = "UseProxy";
      HttpCodes2[HttpCodes2["SwitchProxy"] = 306] = "SwitchProxy";
      HttpCodes2[HttpCodes2["TemporaryRedirect"] = 307] = "TemporaryRedirect";
      HttpCodes2[HttpCodes2["PermanentRedirect"] = 308] = "PermanentRedirect";
      HttpCodes2[HttpCodes2["BadRequest"] = 400] = "BadRequest";
      HttpCodes2[HttpCodes2["Unauthorized"] = 401] = "Unauthorized";
      HttpCodes2[HttpCodes2["PaymentRequired"] = 402] = "PaymentRequired";
      HttpCodes2[HttpCodes2["Forbidden"] = 403] = "Forbidden";
      HttpCodes2[HttpCodes2["NotFound"] = 404] = "NotFound";
      HttpCodes2[HttpCodes2["MethodNotAllowed"] = 405] = "MethodNotAllowed";
      HttpCodes2[HttpCodes2["NotAcceptable"] = 406] = "NotAcceptable";
      HttpCodes2[HttpCodes2["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
      HttpCodes2[HttpCodes2["RequestTimeout"] = 408] = "RequestTimeout";
      HttpCodes2[HttpCodes2["Conflict"] = 409] = "Conflict";
      HttpCodes2[HttpCodes2["Gone"] = 410] = "Gone";
      HttpCodes2[HttpCodes2["TooManyRequests"] = 429] = "TooManyRequests";
      HttpCodes2[HttpCodes2["InternalServerError"] = 500] = "InternalServerError";
      HttpCodes2[HttpCodes2["NotImplemented"] = 501] = "NotImplemented";
      HttpCodes2[HttpCodes2["BadGateway"] = 502] = "BadGateway";
      HttpCodes2[HttpCodes2["ServiceUnavailable"] = 503] = "ServiceUnavailable";
      HttpCodes2[HttpCodes2["GatewayTimeout"] = 504] = "GatewayTimeout";
    })(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));
    var Headers;
    (function(Headers2) {
      Headers2["Accept"] = "accept";
      Headers2["ContentType"] = "content-type";
    })(Headers = exports.Headers || (exports.Headers = {}));
    var MediaTypes;
    (function(MediaTypes2) {
      MediaTypes2["ApplicationJson"] = "application/json";
    })(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));
    function getProxyUrl(serverUrl) {
      const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
      return proxyUrl ? proxyUrl.href : "";
    }
    exports.getProxyUrl = getProxyUrl;
    var HttpRedirectCodes = [
      HttpCodes.MovedPermanently,
      HttpCodes.ResourceMoved,
      HttpCodes.SeeOther,
      HttpCodes.TemporaryRedirect,
      HttpCodes.PermanentRedirect
    ];
    var HttpResponseRetryCodes = [
      HttpCodes.BadGateway,
      HttpCodes.ServiceUnavailable,
      HttpCodes.GatewayTimeout
    ];
    var RetryableHttpVerbs = ["OPTIONS", "GET", "DELETE", "HEAD"];
    var ExponentialBackoffCeiling = 10;
    var ExponentialBackoffTimeSlice = 5;
    var HttpClientError = class extends Error {
      constructor(message, statusCode) {
        super(message);
        this.name = "HttpClientError";
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, HttpClientError.prototype);
      }
    };
    exports.HttpClientError = HttpClientError;
    var HttpClientResponse = class {
      constructor(message) {
        this.message = message;
      }
      readBody() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            let output = Buffer.alloc(0);
            this.message.on("data", (chunk) => {
              output = Buffer.concat([output, chunk]);
            });
            this.message.on("end", () => {
              resolve(output.toString());
            });
          }));
        });
      }
    };
    exports.HttpClientResponse = HttpClientResponse;
    function isHttps(requestUrl) {
      const parsedUrl = new URL(requestUrl);
      return parsedUrl.protocol === "https:";
    }
    exports.isHttps = isHttps;
    var HttpClient = class {
      constructor(userAgent, handlers, requestOptions) {
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent;
        this.handlers = handlers || [];
        this.requestOptions = requestOptions;
        if (requestOptions) {
          if (requestOptions.ignoreSslError != null) {
            this._ignoreSslError = requestOptions.ignoreSslError;
          }
          this._socketTimeout = requestOptions.socketTimeout;
          if (requestOptions.allowRedirects != null) {
            this._allowRedirects = requestOptions.allowRedirects;
          }
          if (requestOptions.allowRedirectDowngrade != null) {
            this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
          }
          if (requestOptions.maxRedirects != null) {
            this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
          }
          if (requestOptions.keepAlive != null) {
            this._keepAlive = requestOptions.keepAlive;
          }
          if (requestOptions.allowRetries != null) {
            this._allowRetries = requestOptions.allowRetries;
          }
          if (requestOptions.maxRetries != null) {
            this._maxRetries = requestOptions.maxRetries;
          }
        }
      }
      options(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("OPTIONS", requestUrl, null, additionalHeaders || {});
        });
      }
      get(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("GET", requestUrl, null, additionalHeaders || {});
        });
      }
      del(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("DELETE", requestUrl, null, additionalHeaders || {});
        });
      }
      post(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("POST", requestUrl, data, additionalHeaders || {});
        });
      }
      patch(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("PATCH", requestUrl, data, additionalHeaders || {});
        });
      }
      put(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("PUT", requestUrl, data, additionalHeaders || {});
        });
      }
      head(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("HEAD", requestUrl, null, additionalHeaders || {});
        });
      }
      sendStream(verb, requestUrl, stream, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request(verb, requestUrl, stream, additionalHeaders);
        });
      }
      getJson(requestUrl, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
          const res = yield this.get(requestUrl, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      postJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2);
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
          additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
          const res = yield this.post(requestUrl, data, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      putJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2);
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
          additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
          const res = yield this.put(requestUrl, data, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      patchJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2);
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
          additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
          const res = yield this.patch(requestUrl, data, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      request(verb, requestUrl, data, headers) {
        return __awaiter(this, void 0, void 0, function* () {
          if (this._disposed) {
            throw new Error("Client has already been disposed.");
          }
          const parsedUrl = new URL(requestUrl);
          let info = this._prepareRequest(verb, parsedUrl, headers);
          const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb) ? this._maxRetries + 1 : 1;
          let numTries = 0;
          let response;
          do {
            response = yield this.requestRaw(info, data);
            if (response && response.message && response.message.statusCode === HttpCodes.Unauthorized) {
              let authenticationHandler;
              for (const handler of this.handlers) {
                if (handler.canHandleAuthentication(response)) {
                  authenticationHandler = handler;
                  break;
                }
              }
              if (authenticationHandler) {
                return authenticationHandler.handleAuthentication(this, info, data);
              } else {
                return response;
              }
            }
            let redirectsRemaining = this._maxRedirects;
            while (response.message.statusCode && HttpRedirectCodes.includes(response.message.statusCode) && this._allowRedirects && redirectsRemaining > 0) {
              const redirectUrl = response.message.headers["location"];
              if (!redirectUrl) {
                break;
              }
              const parsedRedirectUrl = new URL(redirectUrl);
              if (parsedUrl.protocol === "https:" && parsedUrl.protocol !== parsedRedirectUrl.protocol && !this._allowRedirectDowngrade) {
                throw new Error("Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.");
              }
              yield response.readBody();
              if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                for (const header in headers) {
                  if (header.toLowerCase() === "authorization") {
                    delete headers[header];
                  }
                }
              }
              info = this._prepareRequest(verb, parsedRedirectUrl, headers);
              response = yield this.requestRaw(info, data);
              redirectsRemaining--;
            }
            if (!response.message.statusCode || !HttpResponseRetryCodes.includes(response.message.statusCode)) {
              return response;
            }
            numTries += 1;
            if (numTries < maxTries) {
              yield response.readBody();
              yield this._performExponentialBackoff(numTries);
            }
          } while (numTries < maxTries);
          return response;
        });
      }
      dispose() {
        if (this._agent) {
          this._agent.destroy();
        }
        this._disposed = true;
      }
      requestRaw(info, data) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            function callbackForResult(err, res) {
              if (err) {
                reject(err);
              } else if (!res) {
                reject(new Error("Unknown error"));
              } else {
                resolve(res);
              }
            }
            this.requestRawWithCallback(info, data, callbackForResult);
          });
        });
      }
      requestRawWithCallback(info, data, onResult) {
        if (typeof data === "string") {
          if (!info.options.headers) {
            info.options.headers = {};
          }
          info.options.headers["Content-Length"] = Buffer.byteLength(data, "utf8");
        }
        let callbackCalled = false;
        function handleResult(err, res) {
          if (!callbackCalled) {
            callbackCalled = true;
            onResult(err, res);
          }
        }
        const req = info.httpModule.request(info.options, (msg) => {
          const res = new HttpClientResponse(msg);
          handleResult(void 0, res);
        });
        let socket;
        req.on("socket", (sock) => {
          socket = sock;
        });
        req.setTimeout(this._socketTimeout || 3 * 6e4, () => {
          if (socket) {
            socket.end();
          }
          handleResult(new Error(`Request timeout: ${info.options.path}`));
        });
        req.on("error", function(err) {
          handleResult(err);
        });
        if (data && typeof data === "string") {
          req.write(data, "utf8");
        }
        if (data && typeof data !== "string") {
          data.on("close", function() {
            req.end();
          });
          data.pipe(req);
        } else {
          req.end();
        }
      }
      getAgent(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        return this._getAgent(parsedUrl);
      }
      _prepareRequest(method, requestUrl, headers) {
        const info = {};
        info.parsedUrl = requestUrl;
        const usingSsl = info.parsedUrl.protocol === "https:";
        info.httpModule = usingSsl ? https : http;
        const defaultPort = usingSsl ? 443 : 80;
        info.options = {};
        info.options.host = info.parsedUrl.hostname;
        info.options.port = info.parsedUrl.port ? parseInt(info.parsedUrl.port) : defaultPort;
        info.options.path = (info.parsedUrl.pathname || "") + (info.parsedUrl.search || "");
        info.options.method = method;
        info.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) {
          info.options.headers["user-agent"] = this.userAgent;
        }
        info.options.agent = this._getAgent(info.parsedUrl);
        if (this.handlers) {
          for (const handler of this.handlers) {
            handler.prepareRequest(info.options);
          }
        }
        return info;
      }
      _mergeHeaders(headers) {
        if (this.requestOptions && this.requestOptions.headers) {
          return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));
        }
        return lowercaseKeys(headers || {});
      }
      _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        let clientHeader;
        if (this.requestOptions && this.requestOptions.headers) {
          clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
        }
        return additionalHeaders[header] || clientHeader || _default;
      }
      _getAgent(parsedUrl) {
        let agent;
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (this._keepAlive && useProxy) {
          agent = this._proxyAgent;
        }
        if (this._keepAlive && !useProxy) {
          agent = this._agent;
        }
        if (agent) {
          return agent;
        }
        const usingSsl = parsedUrl.protocol === "https:";
        let maxSockets = 100;
        if (this.requestOptions) {
          maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
        }
        if (proxyUrl && proxyUrl.hostname) {
          const agentOptions = {
            maxSockets,
            keepAlive: this._keepAlive,
            proxy: Object.assign(Object.assign({}, (proxyUrl.username || proxyUrl.password) && {
              proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
            }), { host: proxyUrl.hostname, port: proxyUrl.port })
          };
          let tunnelAgent;
          const overHttps = proxyUrl.protocol === "https:";
          if (usingSsl) {
            tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
          } else {
            tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
          }
          agent = tunnelAgent(agentOptions);
          this._proxyAgent = agent;
        }
        if (this._keepAlive && !agent) {
          const options = { keepAlive: this._keepAlive, maxSockets };
          agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
          this._agent = agent;
        }
        if (!agent) {
          agent = usingSsl ? https.globalAgent : http.globalAgent;
        }
        if (usingSsl && this._ignoreSslError) {
          agent.options = Object.assign(agent.options || {}, {
            rejectUnauthorized: false
          });
        }
        return agent;
      }
      _performExponentialBackoff(retryNumber) {
        return __awaiter(this, void 0, void 0, function* () {
          retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
          const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
          return new Promise((resolve) => setTimeout(() => resolve(), ms));
        });
      }
      _processResponse(res, options) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            const statusCode = res.message.statusCode || 0;
            const response = {
              statusCode,
              result: null,
              headers: {}
            };
            if (statusCode === HttpCodes.NotFound) {
              resolve(response);
            }
            function dateTimeDeserializer(key, value) {
              if (typeof value === "string") {
                const a = new Date(value);
                if (!isNaN(a.valueOf())) {
                  return a;
                }
              }
              return value;
            }
            let obj;
            let contents;
            try {
              contents = yield res.readBody();
              if (contents && contents.length > 0) {
                if (options && options.deserializeDates) {
                  obj = JSON.parse(contents, dateTimeDeserializer);
                } else {
                  obj = JSON.parse(contents);
                }
                response.result = obj;
              }
              response.headers = res.message.headers;
            } catch (err) {
            }
            if (statusCode > 299) {
              let msg;
              if (obj && obj.message) {
                msg = obj.message;
              } else if (contents && contents.length > 0) {
                msg = contents;
              } else {
                msg = `Failed request: (${statusCode})`;
              }
              const err = new HttpClientError(msg, statusCode);
              err.result = response.result;
              reject(err);
            } else {
              resolve(response);
            }
          }));
        });
      }
    };
    exports.HttpClient = HttpClient;
    var lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => (c[k.toLowerCase()] = obj[k], c), {});
  }
});

// node_modules/@actions/http-client/lib/auth.js
var require_auth = __commonJS({
  "node_modules/@actions/http-client/lib/auth.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;
    var BasicCredentialHandler = class {
      constructor(username, password) {
        this.username = username;
        this.password = password;
      }
      prepareRequest(options) {
        if (!options.headers) {
          throw Error("The request has no headers");
        }
        options.headers["Authorization"] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString("base64")}`;
      }
      canHandleAuthentication() {
        return false;
      }
      handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
          throw new Error("not implemented");
        });
      }
    };
    exports.BasicCredentialHandler = BasicCredentialHandler;
    var BearerCredentialHandler = class {
      constructor(token) {
        this.token = token;
      }
      prepareRequest(options) {
        if (!options.headers) {
          throw Error("The request has no headers");
        }
        options.headers["Authorization"] = `Bearer ${this.token}`;
      }
      canHandleAuthentication() {
        return false;
      }
      handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
          throw new Error("not implemented");
        });
      }
    };
    exports.BearerCredentialHandler = BearerCredentialHandler;
    var PersonalAccessTokenCredentialHandler = class {
      constructor(token) {
        this.token = token;
      }
      prepareRequest(options) {
        if (!options.headers) {
          throw Error("The request has no headers");
        }
        options.headers["Authorization"] = `Basic ${Buffer.from(`PAT:${this.token}`).toString("base64")}`;
      }
      canHandleAuthentication() {
        return false;
      }
      handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
          throw new Error("not implemented");
        });
      }
    };
    exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
  }
});

// node_modules/@actions/core/lib/oidc-utils.js
var require_oidc_utils = __commonJS({
  "node_modules/@actions/core/lib/oidc-utils.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OidcClient = void 0;
    var http_client_1 = require_lib();
    var auth_1 = require_auth();
    var core_1 = require_core();
    var OidcClient = class {
      static createHttpClient(allowRetry = true, maxRetry = 10) {
        const requestOptions = {
          allowRetries: allowRetry,
          maxRetries: maxRetry
        };
        return new http_client_1.HttpClient("actions/oidc-client", [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);
      }
      static getRequestToken() {
        const token = process.env["ACTIONS_ID_TOKEN_REQUEST_TOKEN"];
        if (!token) {
          throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable");
        }
        return token;
      }
      static getIDTokenUrl() {
        const runtimeUrl = process.env["ACTIONS_ID_TOKEN_REQUEST_URL"];
        if (!runtimeUrl) {
          throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable");
        }
        return runtimeUrl;
      }
      static getCall(id_token_url) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
          const httpclient = OidcClient.createHttpClient();
          const res = yield httpclient.getJson(id_token_url).catch((error) => {
            throw new Error(`Failed to get ID Token. 
 
        Error Code : ${error.statusCode}
 
        Error Message: ${error.result.message}`);
          });
          const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
          if (!id_token) {
            throw new Error("Response json body do not have ID Token field");
          }
          return id_token;
        });
      }
      static getIDToken(audience) {
        return __awaiter(this, void 0, void 0, function* () {
          try {
            let id_token_url = OidcClient.getIDTokenUrl();
            if (audience) {
              const encodedAudience = encodeURIComponent(audience);
              id_token_url = `${id_token_url}&audience=${encodedAudience}`;
            }
            core_1.debug(`ID token url is ${id_token_url}`);
            const id_token = yield OidcClient.getCall(id_token_url);
            core_1.setSecret(id_token);
            return id_token;
          } catch (error) {
            throw new Error(`Error message: ${error.message}`);
          }
        });
      }
    };
    exports.OidcClient = OidcClient;
  }
});

// node_modules/@actions/core/lib/summary.js
var require_summary = __commonJS({
  "node_modules/@actions/core/lib/summary.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;
    var os_1 = require("os");
    var fs_1 = require("fs");
    var { access, appendFile, writeFile } = fs_1.promises;
    exports.SUMMARY_ENV_VAR = "GITHUB_STEP_SUMMARY";
    exports.SUMMARY_DOCS_URL = "https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary";
    var Summary = class {
      constructor() {
        this._buffer = "";
      }
      filePath() {
        return __awaiter(this, void 0, void 0, function* () {
          if (this._filePath) {
            return this._filePath;
          }
          const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
          if (!pathFromEnv) {
            throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
          }
          try {
            yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);
          } catch (_a) {
            throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
          }
          this._filePath = pathFromEnv;
          return this._filePath;
        });
      }
      wrap(tag, content, attrs = {}) {
        const htmlAttrs = Object.entries(attrs).map(([key, value]) => ` ${key}="${value}"`).join("");
        if (!content) {
          return `<${tag}${htmlAttrs}>`;
        }
        return `<${tag}${htmlAttrs}>${content}</${tag}>`;
      }
      write(options) {
        return __awaiter(this, void 0, void 0, function* () {
          const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
          const filePath = yield this.filePath();
          const writeFunc = overwrite ? writeFile : appendFile;
          yield writeFunc(filePath, this._buffer, { encoding: "utf8" });
          return this.emptyBuffer();
        });
      }
      clear() {
        return __awaiter(this, void 0, void 0, function* () {
          return this.emptyBuffer().write({ overwrite: true });
        });
      }
      stringify() {
        return this._buffer;
      }
      isEmptyBuffer() {
        return this._buffer.length === 0;
      }
      emptyBuffer() {
        this._buffer = "";
        return this;
      }
      addRaw(text, addEOL = false) {
        this._buffer += text;
        return addEOL ? this.addEOL() : this;
      }
      addEOL() {
        return this.addRaw(os_1.EOL);
      }
      addCodeBlock(code, lang) {
        const attrs = Object.assign({}, lang && { lang });
        const element = this.wrap("pre", this.wrap("code", code), attrs);
        return this.addRaw(element).addEOL();
      }
      addList(items, ordered = false) {
        const tag = ordered ? "ol" : "ul";
        const listItems = items.map((item) => this.wrap("li", item)).join("");
        const element = this.wrap(tag, listItems);
        return this.addRaw(element).addEOL();
      }
      addTable(rows) {
        const tableBody = rows.map((row) => {
          const cells = row.map((cell) => {
            if (typeof cell === "string") {
              return this.wrap("td", cell);
            }
            const { header, data, colspan, rowspan } = cell;
            const tag = header ? "th" : "td";
            const attrs = Object.assign(Object.assign({}, colspan && { colspan }), rowspan && { rowspan });
            return this.wrap(tag, data, attrs);
          }).join("");
          return this.wrap("tr", cells);
        }).join("");
        const element = this.wrap("table", tableBody);
        return this.addRaw(element).addEOL();
      }
      addDetails(label, content) {
        const element = this.wrap("details", this.wrap("summary", label) + content);
        return this.addRaw(element).addEOL();
      }
      addImage(src, alt, options) {
        const { width, height } = options || {};
        const attrs = Object.assign(Object.assign({}, width && { width }), height && { height });
        const element = this.wrap("img", null, Object.assign({ src, alt }, attrs));
        return this.addRaw(element).addEOL();
      }
      addHeading(text, level) {
        const tag = `h${level}`;
        const allowedTag = ["h1", "h2", "h3", "h4", "h5", "h6"].includes(tag) ? tag : "h1";
        const element = this.wrap(allowedTag, text);
        return this.addRaw(element).addEOL();
      }
      addSeparator() {
        const element = this.wrap("hr", null);
        return this.addRaw(element).addEOL();
      }
      addBreak() {
        const element = this.wrap("br", null);
        return this.addRaw(element).addEOL();
      }
      addQuote(text, cite) {
        const attrs = Object.assign({}, cite && { cite });
        const element = this.wrap("blockquote", text, attrs);
        return this.addRaw(element).addEOL();
      }
      addLink(text, href) {
        const element = this.wrap("a", text, { href });
        return this.addRaw(element).addEOL();
      }
    };
    var _summary = new Summary();
    exports.markdownSummary = _summary;
    exports.summary = _summary;
  }
});

// node_modules/@actions/core/lib/path-utils.js
var require_path_utils = __commonJS({
  "node_modules/@actions/core/lib/path-utils.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;
    var path = __importStar(require("path"));
    function toPosixPath(pth) {
      return pth.replace(/[\\]/g, "/");
    }
    exports.toPosixPath = toPosixPath;
    function toWin32Path(pth) {
      return pth.replace(/[/]/g, "\\");
    }
    exports.toWin32Path = toWin32Path;
    function toPlatformPath(pth) {
      return pth.replace(/[/\\]/g, path.sep);
    }
    exports.toPlatformPath = toPlatformPath;
  }
});

// node_modules/@actions/core/lib/core.js
var require_core = __commonJS({
  "node_modules/@actions/core/lib/core.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;
    var command_1 = require_command();
    var file_command_1 = require_file_command();
    var utils_1 = require_utils();
    var os = __importStar(require("os"));
    var path = __importStar(require("path"));
    var oidc_utils_1 = require_oidc_utils();
    var ExitCode;
    (function(ExitCode2) {
      ExitCode2[ExitCode2["Success"] = 0] = "Success";
      ExitCode2[ExitCode2["Failure"] = 1] = "Failure";
    })(ExitCode = exports.ExitCode || (exports.ExitCode = {}));
    function exportVariable(name, val) {
      const convertedVal = utils_1.toCommandValue(val);
      process.env[name] = convertedVal;
      const filePath = process.env["GITHUB_ENV"] || "";
      if (filePath) {
        return file_command_1.issueFileCommand("ENV", file_command_1.prepareKeyValueMessage(name, val));
      }
      command_1.issueCommand("set-env", { name }, convertedVal);
    }
    exports.exportVariable = exportVariable;
    function setSecret(secret) {
      command_1.issueCommand("add-mask", {}, secret);
    }
    exports.setSecret = setSecret;
    function addPath(inputPath) {
      const filePath = process.env["GITHUB_PATH"] || "";
      if (filePath) {
        file_command_1.issueFileCommand("PATH", inputPath);
      } else {
        command_1.issueCommand("add-path", {}, inputPath);
      }
      process.env["PATH"] = `${inputPath}${path.delimiter}${process.env["PATH"]}`;
    }
    exports.addPath = addPath;
    function getInput2(name, options) {
      const val = process.env[`INPUT_${name.replace(/ /g, "_").toUpperCase()}`] || "";
      if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`);
      }
      if (options && options.trimWhitespace === false) {
        return val;
      }
      return val.trim();
    }
    exports.getInput = getInput2;
    function getMultilineInput(name, options) {
      const inputs = getInput2(name, options).split("\n").filter((x) => x !== "");
      if (options && options.trimWhitespace === false) {
        return inputs;
      }
      return inputs.map((input) => input.trim());
    }
    exports.getMultilineInput = getMultilineInput;
    function getBooleanInput(name, options) {
      const trueValue = ["true", "True", "TRUE"];
      const falseValue = ["false", "False", "FALSE"];
      const val = getInput2(name, options);
      if (trueValue.includes(val))
        return true;
      if (falseValue.includes(val))
        return false;
      throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}
Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
    }
    exports.getBooleanInput = getBooleanInput;
    function setOutput2(name, value) {
      const filePath = process.env["GITHUB_OUTPUT"] || "";
      if (filePath) {
        return file_command_1.issueFileCommand("OUTPUT", file_command_1.prepareKeyValueMessage(name, value));
      }
      process.stdout.write(os.EOL);
      command_1.issueCommand("set-output", { name }, utils_1.toCommandValue(value));
    }
    exports.setOutput = setOutput2;
    function setCommandEcho(enabled) {
      command_1.issue("echo", enabled ? "on" : "off");
    }
    exports.setCommandEcho = setCommandEcho;
    function setFailed2(message) {
      process.exitCode = ExitCode.Failure;
      error(message);
    }
    exports.setFailed = setFailed2;
    function isDebug() {
      return process.env["RUNNER_DEBUG"] === "1";
    }
    exports.isDebug = isDebug;
    function debug(message) {
      command_1.issueCommand("debug", {}, message);
    }
    exports.debug = debug;
    function error(message, properties = {}) {
      command_1.issueCommand("error", utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
    }
    exports.error = error;
    function warning(message, properties = {}) {
      command_1.issueCommand("warning", utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
    }
    exports.warning = warning;
    function notice(message, properties = {}) {
      command_1.issueCommand("notice", utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
    }
    exports.notice = notice;
    function info(message) {
      process.stdout.write(message + os.EOL);
    }
    exports.info = info;
    function startGroup(name) {
      command_1.issue("group", name);
    }
    exports.startGroup = startGroup;
    function endGroup() {
      command_1.issue("endgroup");
    }
    exports.endGroup = endGroup;
    function group(name, fn) {
      return __awaiter(this, void 0, void 0, function* () {
        startGroup(name);
        let result;
        try {
          result = yield fn();
        } finally {
          endGroup();
        }
        return result;
      });
    }
    exports.group = group;
    function saveState(name, value) {
      const filePath = process.env["GITHUB_STATE"] || "";
      if (filePath) {
        return file_command_1.issueFileCommand("STATE", file_command_1.prepareKeyValueMessage(name, value));
      }
      command_1.issueCommand("save-state", { name }, utils_1.toCommandValue(value));
    }
    exports.saveState = saveState;
    function getState(name) {
      return process.env[`STATE_${name}`] || "";
    }
    exports.getState = getState;
    function getIDToken(aud) {
      return __awaiter(this, void 0, void 0, function* () {
        return yield oidc_utils_1.OidcClient.getIDToken(aud);
      });
    }
    exports.getIDToken = getIDToken;
    var summary_1 = require_summary();
    Object.defineProperty(exports, "summary", { enumerable: true, get: function() {
      return summary_1.summary;
    } });
    var summary_2 = require_summary();
    Object.defineProperty(exports, "markdownSummary", { enumerable: true, get: function() {
      return summary_2.markdownSummary;
    } });
    var path_utils_1 = require_path_utils();
    Object.defineProperty(exports, "toPosixPath", { enumerable: true, get: function() {
      return path_utils_1.toPosixPath;
    } });
    Object.defineProperty(exports, "toWin32Path", { enumerable: true, get: function() {
      return path_utils_1.toWin32Path;
    } });
    Object.defineProperty(exports, "toPlatformPath", { enumerable: true, get: function() {
      return path_utils_1.toPlatformPath;
    } });
  }
});

// node_modules/github-app-installation-token/dist/index.js
var require_dist = __commonJS({
  "node_modules/github-app-installation-token/dist/index.js"(exports, module2) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __defProps = Object.defineProperties;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __objRest = (source, exclude) => {
      var target = {};
      for (var prop in source)
        if (__hasOwnProp2.call(source, prop) && exclude.indexOf(prop) < 0)
          target[prop] = source[prop];
      if (source != null && __getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(source)) {
          if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
            target[prop] = source[prop];
        }
      return target;
    };
    var __commonJS2 = (cb, mod) => function __require() {
      return mod || (0, cb[__getOwnPropNames2(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
    };
    var __export2 = (target, all) => {
      for (var name2 in all)
        __defProp2(target, name2, { get: all[name2], enumerable: true });
    };
    var __reExport = (target, module22, copyDefault, desc) => {
      if (module22 && typeof module22 === "object" || typeof module22 === "function") {
        for (let key of __getOwnPropNames2(module22))
          if (!__hasOwnProp2.call(target, key) && (copyDefault || key !== "default"))
            __defProp2(target, key, { get: () => module22[key], enumerable: !(desc = __getOwnPropDesc2(module22, key)) || desc.enumerable });
      }
      return target;
    };
    var __toESM2 = (module22, isNodeMode) => {
      return __reExport(__markAsModule(__defProp2(module22 != null ? __create2(__getProtoOf2(module22)) : {}, "default", !isNodeMode && module22 && module22.__esModule ? { get: () => module22.default, enumerable: true } : { value: module22, enumerable: true })), module22);
    };
    var __toCommonJS2 = /* @__PURE__ */ ((cache) => {
      return (module22, temp) => {
        return cache && cache.get(module22) || (temp = __reExport(__markAsModule({}), module22, 1), cache && cache.set(module22, temp), temp);
      };
    })(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
    var require_color_name = __commonJS2({
      "node_modules/ora/node_modules/color-name/index.js"(exports2, module22) {
        "use strict";
        module22.exports = {
          "aliceblue": [240, 248, 255],
          "antiquewhite": [250, 235, 215],
          "aqua": [0, 255, 255],
          "aquamarine": [127, 255, 212],
          "azure": [240, 255, 255],
          "beige": [245, 245, 220],
          "bisque": [255, 228, 196],
          "black": [0, 0, 0],
          "blanchedalmond": [255, 235, 205],
          "blue": [0, 0, 255],
          "blueviolet": [138, 43, 226],
          "brown": [165, 42, 42],
          "burlywood": [222, 184, 135],
          "cadetblue": [95, 158, 160],
          "chartreuse": [127, 255, 0],
          "chocolate": [210, 105, 30],
          "coral": [255, 127, 80],
          "cornflowerblue": [100, 149, 237],
          "cornsilk": [255, 248, 220],
          "crimson": [220, 20, 60],
          "cyan": [0, 255, 255],
          "darkblue": [0, 0, 139],
          "darkcyan": [0, 139, 139],
          "darkgoldenrod": [184, 134, 11],
          "darkgray": [169, 169, 169],
          "darkgreen": [0, 100, 0],
          "darkgrey": [169, 169, 169],
          "darkkhaki": [189, 183, 107],
          "darkmagenta": [139, 0, 139],
          "darkolivegreen": [85, 107, 47],
          "darkorange": [255, 140, 0],
          "darkorchid": [153, 50, 204],
          "darkred": [139, 0, 0],
          "darksalmon": [233, 150, 122],
          "darkseagreen": [143, 188, 143],
          "darkslateblue": [72, 61, 139],
          "darkslategray": [47, 79, 79],
          "darkslategrey": [47, 79, 79],
          "darkturquoise": [0, 206, 209],
          "darkviolet": [148, 0, 211],
          "deeppink": [255, 20, 147],
          "deepskyblue": [0, 191, 255],
          "dimgray": [105, 105, 105],
          "dimgrey": [105, 105, 105],
          "dodgerblue": [30, 144, 255],
          "firebrick": [178, 34, 34],
          "floralwhite": [255, 250, 240],
          "forestgreen": [34, 139, 34],
          "fuchsia": [255, 0, 255],
          "gainsboro": [220, 220, 220],
          "ghostwhite": [248, 248, 255],
          "gold": [255, 215, 0],
          "goldenrod": [218, 165, 32],
          "gray": [128, 128, 128],
          "green": [0, 128, 0],
          "greenyellow": [173, 255, 47],
          "grey": [128, 128, 128],
          "honeydew": [240, 255, 240],
          "hotpink": [255, 105, 180],
          "indianred": [205, 92, 92],
          "indigo": [75, 0, 130],
          "ivory": [255, 255, 240],
          "khaki": [240, 230, 140],
          "lavender": [230, 230, 250],
          "lavenderblush": [255, 240, 245],
          "lawngreen": [124, 252, 0],
          "lemonchiffon": [255, 250, 205],
          "lightblue": [173, 216, 230],
          "lightcoral": [240, 128, 128],
          "lightcyan": [224, 255, 255],
          "lightgoldenrodyellow": [250, 250, 210],
          "lightgray": [211, 211, 211],
          "lightgreen": [144, 238, 144],
          "lightgrey": [211, 211, 211],
          "lightpink": [255, 182, 193],
          "lightsalmon": [255, 160, 122],
          "lightseagreen": [32, 178, 170],
          "lightskyblue": [135, 206, 250],
          "lightslategray": [119, 136, 153],
          "lightslategrey": [119, 136, 153],
          "lightsteelblue": [176, 196, 222],
          "lightyellow": [255, 255, 224],
          "lime": [0, 255, 0],
          "limegreen": [50, 205, 50],
          "linen": [250, 240, 230],
          "magenta": [255, 0, 255],
          "maroon": [128, 0, 0],
          "mediumaquamarine": [102, 205, 170],
          "mediumblue": [0, 0, 205],
          "mediumorchid": [186, 85, 211],
          "mediumpurple": [147, 112, 219],
          "mediumseagreen": [60, 179, 113],
          "mediumslateblue": [123, 104, 238],
          "mediumspringgreen": [0, 250, 154],
          "mediumturquoise": [72, 209, 204],
          "mediumvioletred": [199, 21, 133],
          "midnightblue": [25, 25, 112],
          "mintcream": [245, 255, 250],
          "mistyrose": [255, 228, 225],
          "moccasin": [255, 228, 181],
          "navajowhite": [255, 222, 173],
          "navy": [0, 0, 128],
          "oldlace": [253, 245, 230],
          "olive": [128, 128, 0],
          "olivedrab": [107, 142, 35],
          "orange": [255, 165, 0],
          "orangered": [255, 69, 0],
          "orchid": [218, 112, 214],
          "palegoldenrod": [238, 232, 170],
          "palegreen": [152, 251, 152],
          "paleturquoise": [175, 238, 238],
          "palevioletred": [219, 112, 147],
          "papayawhip": [255, 239, 213],
          "peachpuff": [255, 218, 185],
          "peru": [205, 133, 63],
          "pink": [255, 192, 203],
          "plum": [221, 160, 221],
          "powderblue": [176, 224, 230],
          "purple": [128, 0, 128],
          "rebeccapurple": [102, 51, 153],
          "red": [255, 0, 0],
          "rosybrown": [188, 143, 143],
          "royalblue": [65, 105, 225],
          "saddlebrown": [139, 69, 19],
          "salmon": [250, 128, 114],
          "sandybrown": [244, 164, 96],
          "seagreen": [46, 139, 87],
          "seashell": [255, 245, 238],
          "sienna": [160, 82, 45],
          "silver": [192, 192, 192],
          "skyblue": [135, 206, 235],
          "slateblue": [106, 90, 205],
          "slategray": [112, 128, 144],
          "slategrey": [112, 128, 144],
          "snow": [255, 250, 250],
          "springgreen": [0, 255, 127],
          "steelblue": [70, 130, 180],
          "tan": [210, 180, 140],
          "teal": [0, 128, 128],
          "thistle": [216, 191, 216],
          "tomato": [255, 99, 71],
          "turquoise": [64, 224, 208],
          "violet": [238, 130, 238],
          "wheat": [245, 222, 179],
          "white": [255, 255, 255],
          "whitesmoke": [245, 245, 245],
          "yellow": [255, 255, 0],
          "yellowgreen": [154, 205, 50]
        };
      }
    });
    var require_conversions = __commonJS2({
      "node_modules/ora/node_modules/color-convert/conversions.js"(exports2, module22) {
        var cssKeywords = require_color_name();
        var reverseKeywords = {};
        for (const key of Object.keys(cssKeywords)) {
          reverseKeywords[cssKeywords[key]] = key;
        }
        var convert = {
          rgb: { channels: 3, labels: "rgb" },
          hsl: { channels: 3, labels: "hsl" },
          hsv: { channels: 3, labels: "hsv" },
          hwb: { channels: 3, labels: "hwb" },
          cmyk: { channels: 4, labels: "cmyk" },
          xyz: { channels: 3, labels: "xyz" },
          lab: { channels: 3, labels: "lab" },
          lch: { channels: 3, labels: "lch" },
          hex: { channels: 1, labels: ["hex"] },
          keyword: { channels: 1, labels: ["keyword"] },
          ansi16: { channels: 1, labels: ["ansi16"] },
          ansi256: { channels: 1, labels: ["ansi256"] },
          hcg: { channels: 3, labels: ["h", "c", "g"] },
          apple: { channels: 3, labels: ["r16", "g16", "b16"] },
          gray: { channels: 1, labels: ["gray"] }
        };
        module22.exports = convert;
        for (const model of Object.keys(convert)) {
          if (!("channels" in convert[model])) {
            throw new Error("missing channels property: " + model);
          }
          if (!("labels" in convert[model])) {
            throw new Error("missing channel labels property: " + model);
          }
          if (convert[model].labels.length !== convert[model].channels) {
            throw new Error("channel and label counts mismatch: " + model);
          }
          const { channels, labels } = convert[model];
          delete convert[model].channels;
          delete convert[model].labels;
          Object.defineProperty(convert[model], "channels", { value: channels });
          Object.defineProperty(convert[model], "labels", { value: labels });
        }
        convert.rgb.hsl = function(rgb) {
          const r = rgb[0] / 255;
          const g = rgb[1] / 255;
          const b = rgb[2] / 255;
          const min = Math.min(r, g, b);
          const max = Math.max(r, g, b);
          const delta = max - min;
          let h;
          let s;
          if (max === min) {
            h = 0;
          } else if (r === max) {
            h = (g - b) / delta;
          } else if (g === max) {
            h = 2 + (b - r) / delta;
          } else if (b === max) {
            h = 4 + (r - g) / delta;
          }
          h = Math.min(h * 60, 360);
          if (h < 0) {
            h += 360;
          }
          const l = (min + max) / 2;
          if (max === min) {
            s = 0;
          } else if (l <= 0.5) {
            s = delta / (max + min);
          } else {
            s = delta / (2 - max - min);
          }
          return [h, s * 100, l * 100];
        };
        convert.rgb.hsv = function(rgb) {
          let rdif;
          let gdif;
          let bdif;
          let h;
          let s;
          const r = rgb[0] / 255;
          const g = rgb[1] / 255;
          const b = rgb[2] / 255;
          const v = Math.max(r, g, b);
          const diff = v - Math.min(r, g, b);
          const diffc = function(c) {
            return (v - c) / 6 / diff + 1 / 2;
          };
          if (diff === 0) {
            h = 0;
            s = 0;
          } else {
            s = diff / v;
            rdif = diffc(r);
            gdif = diffc(g);
            bdif = diffc(b);
            if (r === v) {
              h = bdif - gdif;
            } else if (g === v) {
              h = 1 / 3 + rdif - bdif;
            } else if (b === v) {
              h = 2 / 3 + gdif - rdif;
            }
            if (h < 0) {
              h += 1;
            } else if (h > 1) {
              h -= 1;
            }
          }
          return [
            h * 360,
            s * 100,
            v * 100
          ];
        };
        convert.rgb.hwb = function(rgb) {
          const r = rgb[0];
          const g = rgb[1];
          let b = rgb[2];
          const h = convert.rgb.hsl(rgb)[0];
          const w = 1 / 255 * Math.min(r, Math.min(g, b));
          b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
          return [h, w * 100, b * 100];
        };
        convert.rgb.cmyk = function(rgb) {
          const r = rgb[0] / 255;
          const g = rgb[1] / 255;
          const b = rgb[2] / 255;
          const k = Math.min(1 - r, 1 - g, 1 - b);
          const c = (1 - r - k) / (1 - k) || 0;
          const m = (1 - g - k) / (1 - k) || 0;
          const y = (1 - b - k) / (1 - k) || 0;
          return [c * 100, m * 100, y * 100, k * 100];
        };
        function comparativeDistance(x, y) {
          return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2;
        }
        convert.rgb.keyword = function(rgb) {
          const reversed = reverseKeywords[rgb];
          if (reversed) {
            return reversed;
          }
          let currentClosestDistance = Infinity;
          let currentClosestKeyword;
          for (const keyword of Object.keys(cssKeywords)) {
            const value = cssKeywords[keyword];
            const distance = comparativeDistance(rgb, value);
            if (distance < currentClosestDistance) {
              currentClosestDistance = distance;
              currentClosestKeyword = keyword;
            }
          }
          return currentClosestKeyword;
        };
        convert.keyword.rgb = function(keyword) {
          return cssKeywords[keyword];
        };
        convert.rgb.xyz = function(rgb) {
          let r = rgb[0] / 255;
          let g = rgb[1] / 255;
          let b = rgb[2] / 255;
          r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
          g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
          b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
          const x = r * 0.4124 + g * 0.3576 + b * 0.1805;
          const y = r * 0.2126 + g * 0.7152 + b * 0.0722;
          const z = r * 0.0193 + g * 0.1192 + b * 0.9505;
          return [x * 100, y * 100, z * 100];
        };
        convert.rgb.lab = function(rgb) {
          const xyz = convert.rgb.xyz(rgb);
          let x = xyz[0];
          let y = xyz[1];
          let z = xyz[2];
          x /= 95.047;
          y /= 100;
          z /= 108.883;
          x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
          y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
          z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
          const l = 116 * y - 16;
          const a = 500 * (x - y);
          const b = 200 * (y - z);
          return [l, a, b];
        };
        convert.hsl.rgb = function(hsl) {
          const h = hsl[0] / 360;
          const s = hsl[1] / 100;
          const l = hsl[2] / 100;
          let t2;
          let t3;
          let val;
          if (s === 0) {
            val = l * 255;
            return [val, val, val];
          }
          if (l < 0.5) {
            t2 = l * (1 + s);
          } else {
            t2 = l + s - l * s;
          }
          const t1 = 2 * l - t2;
          const rgb = [0, 0, 0];
          for (let i = 0; i < 3; i++) {
            t3 = h + 1 / 3 * -(i - 1);
            if (t3 < 0) {
              t3++;
            }
            if (t3 > 1) {
              t3--;
            }
            if (6 * t3 < 1) {
              val = t1 + (t2 - t1) * 6 * t3;
            } else if (2 * t3 < 1) {
              val = t2;
            } else if (3 * t3 < 2) {
              val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
            } else {
              val = t1;
            }
            rgb[i] = val * 255;
          }
          return rgb;
        };
        convert.hsl.hsv = function(hsl) {
          const h = hsl[0];
          let s = hsl[1] / 100;
          let l = hsl[2] / 100;
          let smin = s;
          const lmin = Math.max(l, 0.01);
          l *= 2;
          s *= l <= 1 ? l : 2 - l;
          smin *= lmin <= 1 ? lmin : 2 - lmin;
          const v = (l + s) / 2;
          const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
          return [h, sv * 100, v * 100];
        };
        convert.hsv.rgb = function(hsv) {
          const h = hsv[0] / 60;
          const s = hsv[1] / 100;
          let v = hsv[2] / 100;
          const hi = Math.floor(h) % 6;
          const f = h - Math.floor(h);
          const p = 255 * v * (1 - s);
          const q = 255 * v * (1 - s * f);
          const t = 255 * v * (1 - s * (1 - f));
          v *= 255;
          switch (hi) {
            case 0:
              return [v, t, p];
            case 1:
              return [q, v, p];
            case 2:
              return [p, v, t];
            case 3:
              return [p, q, v];
            case 4:
              return [t, p, v];
            case 5:
              return [v, p, q];
          }
        };
        convert.hsv.hsl = function(hsv) {
          const h = hsv[0];
          const s = hsv[1] / 100;
          const v = hsv[2] / 100;
          const vmin = Math.max(v, 0.01);
          let sl;
          let l;
          l = (2 - s) * v;
          const lmin = (2 - s) * vmin;
          sl = s * vmin;
          sl /= lmin <= 1 ? lmin : 2 - lmin;
          sl = sl || 0;
          l /= 2;
          return [h, sl * 100, l * 100];
        };
        convert.hwb.rgb = function(hwb) {
          const h = hwb[0] / 360;
          let wh = hwb[1] / 100;
          let bl = hwb[2] / 100;
          const ratio = wh + bl;
          let f;
          if (ratio > 1) {
            wh /= ratio;
            bl /= ratio;
          }
          const i = Math.floor(6 * h);
          const v = 1 - bl;
          f = 6 * h - i;
          if ((i & 1) !== 0) {
            f = 1 - f;
          }
          const n = wh + f * (v - wh);
          let r;
          let g;
          let b;
          switch (i) {
            default:
            case 6:
            case 0:
              r = v;
              g = n;
              b = wh;
              break;
            case 1:
              r = n;
              g = v;
              b = wh;
              break;
            case 2:
              r = wh;
              g = v;
              b = n;
              break;
            case 3:
              r = wh;
              g = n;
              b = v;
              break;
            case 4:
              r = n;
              g = wh;
              b = v;
              break;
            case 5:
              r = v;
              g = wh;
              b = n;
              break;
          }
          return [r * 255, g * 255, b * 255];
        };
        convert.cmyk.rgb = function(cmyk) {
          const c = cmyk[0] / 100;
          const m = cmyk[1] / 100;
          const y = cmyk[2] / 100;
          const k = cmyk[3] / 100;
          const r = 1 - Math.min(1, c * (1 - k) + k);
          const g = 1 - Math.min(1, m * (1 - k) + k);
          const b = 1 - Math.min(1, y * (1 - k) + k);
          return [r * 255, g * 255, b * 255];
        };
        convert.xyz.rgb = function(xyz) {
          const x = xyz[0] / 100;
          const y = xyz[1] / 100;
          const z = xyz[2] / 100;
          let r;
          let g;
          let b;
          r = x * 3.2406 + y * -1.5372 + z * -0.4986;
          g = x * -0.9689 + y * 1.8758 + z * 0.0415;
          b = x * 0.0557 + y * -0.204 + z * 1.057;
          r = r > 31308e-7 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92;
          g = g > 31308e-7 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92;
          b = b > 31308e-7 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
          r = Math.min(Math.max(0, r), 1);
          g = Math.min(Math.max(0, g), 1);
          b = Math.min(Math.max(0, b), 1);
          return [r * 255, g * 255, b * 255];
        };
        convert.xyz.lab = function(xyz) {
          let x = xyz[0];
          let y = xyz[1];
          let z = xyz[2];
          x /= 95.047;
          y /= 100;
          z /= 108.883;
          x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
          y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
          z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
          const l = 116 * y - 16;
          const a = 500 * (x - y);
          const b = 200 * (y - z);
          return [l, a, b];
        };
        convert.lab.xyz = function(lab) {
          const l = lab[0];
          const a = lab[1];
          const b = lab[2];
          let x;
          let y;
          let z;
          y = (l + 16) / 116;
          x = a / 500 + y;
          z = y - b / 200;
          const y2 = y ** 3;
          const x2 = x ** 3;
          const z2 = z ** 3;
          y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
          x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
          z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
          x *= 95.047;
          y *= 100;
          z *= 108.883;
          return [x, y, z];
        };
        convert.lab.lch = function(lab) {
          const l = lab[0];
          const a = lab[1];
          const b = lab[2];
          let h;
          const hr = Math.atan2(b, a);
          h = hr * 360 / 2 / Math.PI;
          if (h < 0) {
            h += 360;
          }
          const c = Math.sqrt(a * a + b * b);
          return [l, c, h];
        };
        convert.lch.lab = function(lch) {
          const l = lch[0];
          const c = lch[1];
          const h = lch[2];
          const hr = h / 360 * 2 * Math.PI;
          const a = c * Math.cos(hr);
          const b = c * Math.sin(hr);
          return [l, a, b];
        };
        convert.rgb.ansi16 = function(args, saturation = null) {
          const [r, g, b] = args;
          let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation;
          value = Math.round(value / 50);
          if (value === 0) {
            return 30;
          }
          let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
          if (value === 2) {
            ansi += 60;
          }
          return ansi;
        };
        convert.hsv.ansi16 = function(args) {
          return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
        };
        convert.rgb.ansi256 = function(args) {
          const r = args[0];
          const g = args[1];
          const b = args[2];
          if (r === g && g === b) {
            if (r < 8) {
              return 16;
            }
            if (r > 248) {
              return 231;
            }
            return Math.round((r - 8) / 247 * 24) + 232;
          }
          const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
          return ansi;
        };
        convert.ansi16.rgb = function(args) {
          let color = args % 10;
          if (color === 0 || color === 7) {
            if (args > 50) {
              color += 3.5;
            }
            color = color / 10.5 * 255;
            return [color, color, color];
          }
          const mult = (~~(args > 50) + 1) * 0.5;
          const r = (color & 1) * mult * 255;
          const g = (color >> 1 & 1) * mult * 255;
          const b = (color >> 2 & 1) * mult * 255;
          return [r, g, b];
        };
        convert.ansi256.rgb = function(args) {
          if (args >= 232) {
            const c = (args - 232) * 10 + 8;
            return [c, c, c];
          }
          args -= 16;
          let rem;
          const r = Math.floor(args / 36) / 5 * 255;
          const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
          const b = rem % 6 / 5 * 255;
          return [r, g, b];
        };
        convert.rgb.hex = function(args) {
          const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
          const string = integer.toString(16).toUpperCase();
          return "000000".substring(string.length) + string;
        };
        convert.hex.rgb = function(args) {
          const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
          if (!match) {
            return [0, 0, 0];
          }
          let colorString = match[0];
          if (match[0].length === 3) {
            colorString = colorString.split("").map((char) => {
              return char + char;
            }).join("");
          }
          const integer = parseInt(colorString, 16);
          const r = integer >> 16 & 255;
          const g = integer >> 8 & 255;
          const b = integer & 255;
          return [r, g, b];
        };
        convert.rgb.hcg = function(rgb) {
          const r = rgb[0] / 255;
          const g = rgb[1] / 255;
          const b = rgb[2] / 255;
          const max = Math.max(Math.max(r, g), b);
          const min = Math.min(Math.min(r, g), b);
          const chroma = max - min;
          let grayscale;
          let hue;
          if (chroma < 1) {
            grayscale = min / (1 - chroma);
          } else {
            grayscale = 0;
          }
          if (chroma <= 0) {
            hue = 0;
          } else if (max === r) {
            hue = (g - b) / chroma % 6;
          } else if (max === g) {
            hue = 2 + (b - r) / chroma;
          } else {
            hue = 4 + (r - g) / chroma;
          }
          hue /= 6;
          hue %= 1;
          return [hue * 360, chroma * 100, grayscale * 100];
        };
        convert.hsl.hcg = function(hsl) {
          const s = hsl[1] / 100;
          const l = hsl[2] / 100;
          const c = l < 0.5 ? 2 * s * l : 2 * s * (1 - l);
          let f = 0;
          if (c < 1) {
            f = (l - 0.5 * c) / (1 - c);
          }
          return [hsl[0], c * 100, f * 100];
        };
        convert.hsv.hcg = function(hsv) {
          const s = hsv[1] / 100;
          const v = hsv[2] / 100;
          const c = s * v;
          let f = 0;
          if (c < 1) {
            f = (v - c) / (1 - c);
          }
          return [hsv[0], c * 100, f * 100];
        };
        convert.hcg.rgb = function(hcg) {
          const h = hcg[0] / 360;
          const c = hcg[1] / 100;
          const g = hcg[2] / 100;
          if (c === 0) {
            return [g * 255, g * 255, g * 255];
          }
          const pure = [0, 0, 0];
          const hi = h % 1 * 6;
          const v = hi % 1;
          const w = 1 - v;
          let mg = 0;
          switch (Math.floor(hi)) {
            case 0:
              pure[0] = 1;
              pure[1] = v;
              pure[2] = 0;
              break;
            case 1:
              pure[0] = w;
              pure[1] = 1;
              pure[2] = 0;
              break;
            case 2:
              pure[0] = 0;
              pure[1] = 1;
              pure[2] = v;
              break;
            case 3:
              pure[0] = 0;
              pure[1] = w;
              pure[2] = 1;
              break;
            case 4:
              pure[0] = v;
              pure[1] = 0;
              pure[2] = 1;
              break;
            default:
              pure[0] = 1;
              pure[1] = 0;
              pure[2] = w;
          }
          mg = (1 - c) * g;
          return [
            (c * pure[0] + mg) * 255,
            (c * pure[1] + mg) * 255,
            (c * pure[2] + mg) * 255
          ];
        };
        convert.hcg.hsv = function(hcg) {
          const c = hcg[1] / 100;
          const g = hcg[2] / 100;
          const v = c + g * (1 - c);
          let f = 0;
          if (v > 0) {
            f = c / v;
          }
          return [hcg[0], f * 100, v * 100];
        };
        convert.hcg.hsl = function(hcg) {
          const c = hcg[1] / 100;
          const g = hcg[2] / 100;
          const l = g * (1 - c) + 0.5 * c;
          let s = 0;
          if (l > 0 && l < 0.5) {
            s = c / (2 * l);
          } else if (l >= 0.5 && l < 1) {
            s = c / (2 * (1 - l));
          }
          return [hcg[0], s * 100, l * 100];
        };
        convert.hcg.hwb = function(hcg) {
          const c = hcg[1] / 100;
          const g = hcg[2] / 100;
          const v = c + g * (1 - c);
          return [hcg[0], (v - c) * 100, (1 - v) * 100];
        };
        convert.hwb.hcg = function(hwb) {
          const w = hwb[1] / 100;
          const b = hwb[2] / 100;
          const v = 1 - b;
          const c = v - w;
          let g = 0;
          if (c < 1) {
            g = (v - c) / (1 - c);
          }
          return [hwb[0], c * 100, g * 100];
        };
        convert.apple.rgb = function(apple) {
          return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
        };
        convert.rgb.apple = function(rgb) {
          return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
        };
        convert.gray.rgb = function(args) {
          return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
        };
        convert.gray.hsl = function(args) {
          return [0, 0, args[0]];
        };
        convert.gray.hsv = convert.gray.hsl;
        convert.gray.hwb = function(gray) {
          return [0, 100, gray[0]];
        };
        convert.gray.cmyk = function(gray) {
          return [0, 0, 0, gray[0]];
        };
        convert.gray.lab = function(gray) {
          return [gray[0], 0, 0];
        };
        convert.gray.hex = function(gray) {
          const val = Math.round(gray[0] / 100 * 255) & 255;
          const integer = (val << 16) + (val << 8) + val;
          const string = integer.toString(16).toUpperCase();
          return "000000".substring(string.length) + string;
        };
        convert.rgb.gray = function(rgb) {
          const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
          return [val / 255 * 100];
        };
      }
    });
    var require_route = __commonJS2({
      "node_modules/ora/node_modules/color-convert/route.js"(exports2, module22) {
        var conversions = require_conversions();
        function buildGraph() {
          const graph = {};
          const models = Object.keys(conversions);
          for (let len = models.length, i = 0; i < len; i++) {
            graph[models[i]] = {
              distance: -1,
              parent: null
            };
          }
          return graph;
        }
        function deriveBFS(fromModel) {
          const graph = buildGraph();
          const queue = [fromModel];
          graph[fromModel].distance = 0;
          while (queue.length) {
            const current = queue.pop();
            const adjacents = Object.keys(conversions[current]);
            for (let len = adjacents.length, i = 0; i < len; i++) {
              const adjacent = adjacents[i];
              const node = graph[adjacent];
              if (node.distance === -1) {
                node.distance = graph[current].distance + 1;
                node.parent = current;
                queue.unshift(adjacent);
              }
            }
          }
          return graph;
        }
        function link(from, to) {
          return function(args) {
            return to(from(args));
          };
        }
        function wrapConversion(toModel, graph) {
          const path = [graph[toModel].parent, toModel];
          let fn = conversions[graph[toModel].parent][toModel];
          let cur = graph[toModel].parent;
          while (graph[cur].parent) {
            path.unshift(graph[cur].parent);
            fn = link(conversions[graph[cur].parent][cur], fn);
            cur = graph[cur].parent;
          }
          fn.conversion = path;
          return fn;
        }
        module22.exports = function(fromModel) {
          const graph = deriveBFS(fromModel);
          const conversion = {};
          const models = Object.keys(graph);
          for (let len = models.length, i = 0; i < len; i++) {
            const toModel = models[i];
            const node = graph[toModel];
            if (node.parent === null) {
              continue;
            }
            conversion[toModel] = wrapConversion(toModel, graph);
          }
          return conversion;
        };
      }
    });
    var require_color_convert = __commonJS2({
      "node_modules/ora/node_modules/color-convert/index.js"(exports2, module22) {
        var conversions = require_conversions();
        var route = require_route();
        var convert = {};
        var models = Object.keys(conversions);
        function wrapRaw(fn) {
          const wrappedFn = function(...args) {
            const arg0 = args[0];
            if (arg0 === void 0 || arg0 === null) {
              return arg0;
            }
            if (arg0.length > 1) {
              args = arg0;
            }
            return fn(args);
          };
          if ("conversion" in fn) {
            wrappedFn.conversion = fn.conversion;
          }
          return wrappedFn;
        }
        function wrapRounded(fn) {
          const wrappedFn = function(...args) {
            const arg0 = args[0];
            if (arg0 === void 0 || arg0 === null) {
              return arg0;
            }
            if (arg0.length > 1) {
              args = arg0;
            }
            const result = fn(args);
            if (typeof result === "object") {
              for (let len = result.length, i = 0; i < len; i++) {
                result[i] = Math.round(result[i]);
              }
            }
            return result;
          };
          if ("conversion" in fn) {
            wrappedFn.conversion = fn.conversion;
          }
          return wrappedFn;
        }
        models.forEach((fromModel) => {
          convert[fromModel] = {};
          Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
          Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
          const routes = route(fromModel);
          const routeModels = Object.keys(routes);
          routeModels.forEach((toModel) => {
            const fn = routes[toModel];
            convert[fromModel][toModel] = wrapRounded(fn);
            convert[fromModel][toModel].raw = wrapRaw(fn);
          });
        });
        module22.exports = convert;
      }
    });
    var require_ansi_styles = __commonJS2({
      "node_modules/ora/node_modules/ansi-styles/index.js"(exports2, module22) {
        "use strict";
        var wrapAnsi16 = (fn, offset) => (...args) => {
          const code = fn(...args);
          return `\x1B[${code + offset}m`;
        };
        var wrapAnsi256 = (fn, offset) => (...args) => {
          const code = fn(...args);
          return `\x1B[${38 + offset};5;${code}m`;
        };
        var wrapAnsi16m = (fn, offset) => (...args) => {
          const rgb = fn(...args);
          return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
        };
        var ansi2ansi = (n) => n;
        var rgb2rgb = (r, g, b) => [r, g, b];
        var setLazyProperty = (object, property, get) => {
          Object.defineProperty(object, property, {
            get: () => {
              const value = get();
              Object.defineProperty(object, property, {
                value,
                enumerable: true,
                configurable: true
              });
              return value;
            },
            enumerable: true,
            configurable: true
          });
        };
        var colorConvert;
        var makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
          if (colorConvert === void 0) {
            colorConvert = require_color_convert();
          }
          const offset = isBackground ? 10 : 0;
          const styles = {};
          for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
            const name2 = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
            if (sourceSpace === targetSpace) {
              styles[name2] = wrap(identity, offset);
            } else if (typeof suite === "object") {
              styles[name2] = wrap(suite[targetSpace], offset);
            }
          }
          return styles;
        };
        function assembleStyles() {
          const codes = /* @__PURE__ */ new Map();
          const styles = {
            modifier: {
              reset: [0, 0],
              bold: [1, 22],
              dim: [2, 22],
              italic: [3, 23],
              underline: [4, 24],
              inverse: [7, 27],
              hidden: [8, 28],
              strikethrough: [9, 29]
            },
            color: {
              black: [30, 39],
              red: [31, 39],
              green: [32, 39],
              yellow: [33, 39],
              blue: [34, 39],
              magenta: [35, 39],
              cyan: [36, 39],
              white: [37, 39],
              blackBright: [90, 39],
              redBright: [91, 39],
              greenBright: [92, 39],
              yellowBright: [93, 39],
              blueBright: [94, 39],
              magentaBright: [95, 39],
              cyanBright: [96, 39],
              whiteBright: [97, 39]
            },
            bgColor: {
              bgBlack: [40, 49],
              bgRed: [41, 49],
              bgGreen: [42, 49],
              bgYellow: [43, 49],
              bgBlue: [44, 49],
              bgMagenta: [45, 49],
              bgCyan: [46, 49],
              bgWhite: [47, 49],
              bgBlackBright: [100, 49],
              bgRedBright: [101, 49],
              bgGreenBright: [102, 49],
              bgYellowBright: [103, 49],
              bgBlueBright: [104, 49],
              bgMagentaBright: [105, 49],
              bgCyanBright: [106, 49],
              bgWhiteBright: [107, 49]
            }
          };
          styles.color.gray = styles.color.blackBright;
          styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
          styles.color.grey = styles.color.blackBright;
          styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
          for (const [groupName, group] of Object.entries(styles)) {
            for (const [styleName, style] of Object.entries(group)) {
              styles[styleName] = {
                open: `\x1B[${style[0]}m`,
                close: `\x1B[${style[1]}m`
              };
              group[styleName] = styles[styleName];
              codes.set(style[0], style[1]);
            }
            Object.defineProperty(styles, groupName, {
              value: group,
              enumerable: false
            });
          }
          Object.defineProperty(styles, "codes", {
            value: codes,
            enumerable: false
          });
          styles.color.close = "\x1B[39m";
          styles.bgColor.close = "\x1B[49m";
          setLazyProperty(styles.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
          setLazyProperty(styles.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
          setLazyProperty(styles.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
          setLazyProperty(styles.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
          setLazyProperty(styles.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
          setLazyProperty(styles.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
          return styles;
        }
        Object.defineProperty(module22, "exports", {
          enumerable: true,
          get: assembleStyles
        });
      }
    });
    var require_has_flag = __commonJS2({
      "node_modules/ora/node_modules/has-flag/index.js"(exports2, module22) {
        "use strict";
        module22.exports = (flag, argv = process.argv) => {
          const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
          const position = argv.indexOf(prefix + flag);
          const terminatorPosition = argv.indexOf("--");
          return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
        };
      }
    });
    var require_supports_color = __commonJS2({
      "node_modules/ora/node_modules/supports-color/index.js"(exports2, module22) {
        "use strict";
        var os = require("os");
        var tty = require("tty");
        var hasFlag = require_has_flag();
        var { env } = process;
        var forceColor;
        if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
          forceColor = 0;
        } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
          forceColor = 1;
        }
        if ("FORCE_COLOR" in env) {
          if (env.FORCE_COLOR === "true") {
            forceColor = 1;
          } else if (env.FORCE_COLOR === "false") {
            forceColor = 0;
          } else {
            forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
          }
        }
        function translateLevel(level) {
          if (level === 0) {
            return false;
          }
          return {
            level,
            hasBasic: true,
            has256: level >= 2,
            has16m: level >= 3
          };
        }
        function supportsColor(haveStream, streamIsTTY) {
          if (forceColor === 0) {
            return 0;
          }
          if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
            return 3;
          }
          if (hasFlag("color=256")) {
            return 2;
          }
          if (haveStream && !streamIsTTY && forceColor === void 0) {
            return 0;
          }
          const min = forceColor || 0;
          if (env.TERM === "dumb") {
            return min;
          }
          if (process.platform === "win32") {
            const osRelease = os.release().split(".");
            if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
              return Number(osRelease[2]) >= 14931 ? 3 : 2;
            }
            return 1;
          }
          if ("CI" in env) {
            if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
              return 1;
            }
            return min;
          }
          if ("TEAMCITY_VERSION" in env) {
            return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
          }
          if (env.COLORTERM === "truecolor") {
            return 3;
          }
          if ("TERM_PROGRAM" in env) {
            const version2 = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
            switch (env.TERM_PROGRAM) {
              case "iTerm.app":
                return version2 >= 3 ? 3 : 2;
              case "Apple_Terminal":
                return 2;
            }
          }
          if (/-256(color)?$/i.test(env.TERM)) {
            return 2;
          }
          if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
            return 1;
          }
          if ("COLORTERM" in env) {
            return 1;
          }
          return min;
        }
        function getSupportLevel(stream) {
          const level = supportsColor(stream, stream && stream.isTTY);
          return translateLevel(level);
        }
        module22.exports = {
          supportsColor: getSupportLevel,
          stdout: translateLevel(supportsColor(true, tty.isatty(1))),
          stderr: translateLevel(supportsColor(true, tty.isatty(2)))
        };
      }
    });
    var require_util = __commonJS2({
      "node_modules/ora/node_modules/chalk/source/util.js"(exports2, module22) {
        "use strict";
        var stringReplaceAll = (string, substring, replacer) => {
          let index = string.indexOf(substring);
          if (index === -1) {
            return string;
          }
          const substringLength = substring.length;
          let endIndex = 0;
          let returnValue = "";
          do {
            returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
            endIndex = index + substringLength;
            index = string.indexOf(substring, endIndex);
          } while (index !== -1);
          returnValue += string.substr(endIndex);
          return returnValue;
        };
        var stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index) => {
          let endIndex = 0;
          let returnValue = "";
          do {
            const gotCR = string[index - 1] === "\r";
            returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? "\r\n" : "\n") + postfix;
            endIndex = index + 1;
            index = string.indexOf("\n", endIndex);
          } while (index !== -1);
          returnValue += string.substr(endIndex);
          return returnValue;
        };
        module22.exports = {
          stringReplaceAll,
          stringEncaseCRLFWithFirstIndex
        };
      }
    });
    var require_templates = __commonJS2({
      "node_modules/ora/node_modules/chalk/source/templates.js"(exports2, module22) {
        "use strict";
        var TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
        var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
        var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
        var ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;
        var ESCAPES = /* @__PURE__ */ new Map([
          ["n", "\n"],
          ["r", "\r"],
          ["t", "	"],
          ["b", "\b"],
          ["f", "\f"],
          ["v", "\v"],
          ["0", "\0"],
          ["\\", "\\"],
          ["e", "\x1B"],
          ["a", "\x07"]
        ]);
        function unescape2(c) {
          const u = c[0] === "u";
          const bracket = c[1] === "{";
          if (u && !bracket && c.length === 5 || c[0] === "x" && c.length === 3) {
            return String.fromCharCode(parseInt(c.slice(1), 16));
          }
          if (u && bracket) {
            return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
          }
          return ESCAPES.get(c) || c;
        }
        function parseArguments(name2, arguments_) {
          const results = [];
          const chunks = arguments_.trim().split(/\s*,\s*/g);
          let matches;
          for (const chunk of chunks) {
            const number = Number(chunk);
            if (!Number.isNaN(number)) {
              results.push(number);
            } else if (matches = chunk.match(STRING_REGEX)) {
              results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape2(escape) : character));
            } else {
              throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name2}')`);
            }
          }
          return results;
        }
        function parseStyle(style) {
          STYLE_REGEX.lastIndex = 0;
          const results = [];
          let matches;
          while ((matches = STYLE_REGEX.exec(style)) !== null) {
            const name2 = matches[1];
            if (matches[2]) {
              const args = parseArguments(name2, matches[2]);
              results.push([name2].concat(args));
            } else {
              results.push([name2]);
            }
          }
          return results;
        }
        function buildStyle(chalk, styles) {
          const enabled = {};
          for (const layer of styles) {
            for (const style of layer.styles) {
              enabled[style[0]] = layer.inverse ? null : style.slice(1);
            }
          }
          let current = chalk;
          for (const [styleName, styles2] of Object.entries(enabled)) {
            if (!Array.isArray(styles2)) {
              continue;
            }
            if (!(styleName in current)) {
              throw new Error(`Unknown Chalk style: ${styleName}`);
            }
            current = styles2.length > 0 ? current[styleName](...styles2) : current[styleName];
          }
          return current;
        }
        module22.exports = (chalk, temporary) => {
          const styles = [];
          const chunks = [];
          let chunk = [];
          temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {
            if (escapeCharacter) {
              chunk.push(unescape2(escapeCharacter));
            } else if (style) {
              const string = chunk.join("");
              chunk = [];
              chunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));
              styles.push({ inverse, styles: parseStyle(style) });
            } else if (close) {
              if (styles.length === 0) {
                throw new Error("Found extraneous } in Chalk template literal");
              }
              chunks.push(buildStyle(chalk, styles)(chunk.join("")));
              chunk = [];
              styles.pop();
            } else {
              chunk.push(character);
            }
          });
          chunks.push(chunk.join(""));
          if (styles.length > 0) {
            const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
            throw new Error(errMessage);
          }
          return chunks.join("");
        };
      }
    });
    var require_source = __commonJS2({
      "node_modules/ora/node_modules/chalk/source/index.js"(exports2, module22) {
        "use strict";
        var ansiStyles = require_ansi_styles();
        var { stdout: stdoutColor, stderr: stderrColor } = require_supports_color();
        var {
          stringReplaceAll,
          stringEncaseCRLFWithFirstIndex
        } = require_util();
        var { isArray } = Array;
        var levelMapping = [
          "ansi",
          "ansi",
          "ansi256",
          "ansi16m"
        ];
        var styles = /* @__PURE__ */ Object.create(null);
        var applyOptions = (object, options = {}) => {
          if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
            throw new Error("The `level` option should be an integer from 0 to 3");
          }
          const colorLevel = stdoutColor ? stdoutColor.level : 0;
          object.level = options.level === void 0 ? colorLevel : options.level;
        };
        var ChalkClass = class {
          constructor(options) {
            return chalkFactory(options);
          }
        };
        var chalkFactory = (options) => {
          const chalk2 = {};
          applyOptions(chalk2, options);
          chalk2.template = (...arguments_) => chalkTag(chalk2.template, ...arguments_);
          Object.setPrototypeOf(chalk2, Chalk.prototype);
          Object.setPrototypeOf(chalk2.template, chalk2);
          chalk2.template.constructor = () => {
            throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
          };
          chalk2.template.Instance = ChalkClass;
          return chalk2.template;
        };
        function Chalk(options) {
          return chalkFactory(options);
        }
        for (const [styleName, style] of Object.entries(ansiStyles)) {
          styles[styleName] = {
            get() {
              const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
              Object.defineProperty(this, styleName, { value: builder });
              return builder;
            }
          };
        }
        styles.visible = {
          get() {
            const builder = createBuilder(this, this._styler, true);
            Object.defineProperty(this, "visible", { value: builder });
            return builder;
          }
        };
        var usedModels = ["rgb", "hex", "keyword", "hsl", "hsv", "hwb", "ansi", "ansi256"];
        for (const model of usedModels) {
          styles[model] = {
            get() {
              const { level } = this;
              return function(...arguments_) {
                const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
                return createBuilder(this, styler, this._isEmpty);
              };
            }
          };
        }
        for (const model of usedModels) {
          const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
          styles[bgModel] = {
            get() {
              const { level } = this;
              return function(...arguments_) {
                const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
                return createBuilder(this, styler, this._isEmpty);
              };
            }
          };
        }
        var proto = Object.defineProperties(() => {
        }, __spreadProps(__spreadValues({}, styles), {
          level: {
            enumerable: true,
            get() {
              return this._generator.level;
            },
            set(level) {
              this._generator.level = level;
            }
          }
        }));
        var createStyler = (open, close, parent) => {
          let openAll;
          let closeAll;
          if (parent === void 0) {
            openAll = open;
            closeAll = close;
          } else {
            openAll = parent.openAll + open;
            closeAll = close + parent.closeAll;
          }
          return {
            open,
            close,
            openAll,
            closeAll,
            parent
          };
        };
        var createBuilder = (self, _styler, _isEmpty) => {
          const builder = (...arguments_) => {
            if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {
              return applyStyle(builder, chalkTag(builder, ...arguments_));
            }
            return applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
          };
          Object.setPrototypeOf(builder, proto);
          builder._generator = self;
          builder._styler = _styler;
          builder._isEmpty = _isEmpty;
          return builder;
        };
        var applyStyle = (self, string) => {
          if (self.level <= 0 || !string) {
            return self._isEmpty ? "" : string;
          }
          let styler = self._styler;
          if (styler === void 0) {
            return string;
          }
          const { openAll, closeAll } = styler;
          if (string.indexOf("\x1B") !== -1) {
            while (styler !== void 0) {
              string = stringReplaceAll(string, styler.close, styler.open);
              styler = styler.parent;
            }
          }
          const lfIndex = string.indexOf("\n");
          if (lfIndex !== -1) {
            string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
          }
          return openAll + string + closeAll;
        };
        var template;
        var chalkTag = (chalk2, ...strings) => {
          const [firstString] = strings;
          if (!isArray(firstString) || !isArray(firstString.raw)) {
            return strings.join(" ");
          }
          const arguments_ = strings.slice(1);
          const parts = [firstString.raw[0]];
          for (let i = 1; i < firstString.length; i++) {
            parts.push(String(arguments_[i - 1]).replace(/[{}\\]/g, "\\$&"), String(firstString.raw[i]));
          }
          if (template === void 0) {
            template = require_templates();
          }
          return template(chalk2, parts.join(""));
        };
        Object.defineProperties(Chalk.prototype, styles);
        var chalk = Chalk();
        chalk.supportsColor = stdoutColor;
        chalk.stderr = Chalk({ level: stderrColor ? stderrColor.level : 0 });
        chalk.stderr.supportsColor = stderrColor;
        module22.exports = chalk;
      }
    });
    var require_mimic_fn = __commonJS2({
      "node_modules/mimic-fn/index.js"(exports2, module22) {
        "use strict";
        var mimicFn = (to, from) => {
          for (const prop of Reflect.ownKeys(from)) {
            Object.defineProperty(to, prop, Object.getOwnPropertyDescriptor(from, prop));
          }
          return to;
        };
        module22.exports = mimicFn;
        module22.exports.default = mimicFn;
      }
    });
    var require_onetime = __commonJS2({
      "node_modules/onetime/index.js"(exports2, module22) {
        "use strict";
        var mimicFn = require_mimic_fn();
        var calledFunctions = /* @__PURE__ */ new WeakMap();
        var oneTime = (fn, options = {}) => {
          if (typeof fn !== "function") {
            throw new TypeError("Expected a function");
          }
          let ret;
          let isCalled = false;
          let callCount = 0;
          const functionName = fn.displayName || fn.name || "<anonymous>";
          const onetime = function(...args) {
            calledFunctions.set(onetime, ++callCount);
            if (isCalled) {
              if (options.throw === true) {
                throw new Error(`Function \`${functionName}\` can only be called once`);
              }
              return ret;
            }
            isCalled = true;
            ret = fn.apply(this, args);
            fn = null;
            return ret;
          };
          mimicFn(onetime, fn);
          calledFunctions.set(onetime, callCount);
          return onetime;
        };
        module22.exports = oneTime;
        module22.exports.default = oneTime;
        module22.exports.callCount = (fn) => {
          if (!calledFunctions.has(fn)) {
            throw new Error(`The given function \`${fn.name}\` is not wrapped by the \`onetime\` package`);
          }
          return calledFunctions.get(fn);
        };
      }
    });
    var require_signals = __commonJS2({
      "node_modules/signal-exit/signals.js"(exports2, module22) {
        module22.exports = [
          "SIGABRT",
          "SIGALRM",
          "SIGHUP",
          "SIGINT",
          "SIGTERM"
        ];
        if (process.platform !== "win32") {
          module22.exports.push("SIGVTALRM", "SIGXCPU", "SIGXFSZ", "SIGUSR2", "SIGTRAP", "SIGSYS", "SIGQUIT", "SIGIOT");
        }
        if (process.platform === "linux") {
          module22.exports.push("SIGIO", "SIGPOLL", "SIGPWR", "SIGSTKFLT", "SIGUNUSED");
        }
      }
    });
    var require_signal_exit = __commonJS2({
      "node_modules/signal-exit/index.js"(exports2, module22) {
        var assert = require("assert");
        var signals = require_signals();
        var isWin = /^win/i.test(process.platform);
        var EE = require("events");
        if (typeof EE !== "function") {
          EE = EE.EventEmitter;
        }
        var emitter;
        if (process.__signal_exit_emitter__) {
          emitter = process.__signal_exit_emitter__;
        } else {
          emitter = process.__signal_exit_emitter__ = new EE();
          emitter.count = 0;
          emitter.emitted = {};
        }
        if (!emitter.infinite) {
          emitter.setMaxListeners(Infinity);
          emitter.infinite = true;
        }
        module22.exports = function(cb, opts) {
          assert.equal(typeof cb, "function", "a callback must be provided for exit handler");
          if (loaded === false) {
            load();
          }
          var ev = "exit";
          if (opts && opts.alwaysLast) {
            ev = "afterexit";
          }
          var remove = function() {
            emitter.removeListener(ev, cb);
            if (emitter.listeners("exit").length === 0 && emitter.listeners("afterexit").length === 0) {
              unload();
            }
          };
          emitter.on(ev, cb);
          return remove;
        };
        module22.exports.unload = unload;
        function unload() {
          if (!loaded) {
            return;
          }
          loaded = false;
          signals.forEach(function(sig) {
            try {
              process.removeListener(sig, sigListeners[sig]);
            } catch (er) {
            }
          });
          process.emit = originalProcessEmit;
          process.reallyExit = originalProcessReallyExit;
          emitter.count -= 1;
        }
        function emit(event, code, signal) {
          if (emitter.emitted[event]) {
            return;
          }
          emitter.emitted[event] = true;
          emitter.emit(event, code, signal);
        }
        var sigListeners = {};
        signals.forEach(function(sig) {
          sigListeners[sig] = function listener() {
            var listeners = process.listeners(sig);
            if (listeners.length === emitter.count) {
              unload();
              emit("exit", null, sig);
              emit("afterexit", null, sig);
              if (isWin && sig === "SIGHUP") {
                sig = "SIGINT";
              }
              process.kill(process.pid, sig);
            }
          };
        });
        module22.exports.signals = function() {
          return signals;
        };
        module22.exports.load = load;
        var loaded = false;
        function load() {
          if (loaded) {
            return;
          }
          loaded = true;
          emitter.count += 1;
          signals = signals.filter(function(sig) {
            try {
              process.on(sig, sigListeners[sig]);
              return true;
            } catch (er) {
              return false;
            }
          });
          process.emit = processEmit;
          process.reallyExit = processReallyExit;
        }
        var originalProcessReallyExit = process.reallyExit;
        function processReallyExit(code) {
          process.exitCode = code || 0;
          emit("exit", process.exitCode, null);
          emit("afterexit", process.exitCode, null);
          originalProcessReallyExit.call(process, process.exitCode);
        }
        var originalProcessEmit = process.emit;
        function processEmit(ev, arg) {
          if (ev === "exit") {
            if (arg !== void 0) {
              process.exitCode = arg;
            }
            var ret = originalProcessEmit.apply(this, arguments);
            emit("exit", process.exitCode, null);
            emit("afterexit", process.exitCode, null);
            return ret;
          } else {
            return originalProcessEmit.apply(this, arguments);
          }
        }
      }
    });
    var require_restore_cursor = __commonJS2({
      "node_modules/restore-cursor/index.js"(exports2, module22) {
        "use strict";
        var onetime = require_onetime();
        var signalExit = require_signal_exit();
        module22.exports = onetime(() => {
          signalExit(() => {
            process.stderr.write("\x1B[?25h");
          }, { alwaysLast: true });
        });
      }
    });
    var require_cli_cursor = __commonJS2({
      "node_modules/cli-cursor/index.js"(exports2) {
        "use strict";
        var restoreCursor = require_restore_cursor();
        var isHidden = false;
        exports2.show = (writableStream = process.stderr) => {
          if (!writableStream.isTTY) {
            return;
          }
          isHidden = false;
          writableStream.write("\x1B[?25h");
        };
        exports2.hide = (writableStream = process.stderr) => {
          if (!writableStream.isTTY) {
            return;
          }
          restoreCursor();
          isHidden = true;
          writableStream.write("\x1B[?25l");
        };
        exports2.toggle = (force, writableStream) => {
          if (force !== void 0) {
            isHidden = force;
          }
          if (isHidden) {
            exports2.show(writableStream);
          } else {
            exports2.hide(writableStream);
          }
        };
      }
    });
    var require_spinners = __commonJS2({
      "node_modules/cli-spinners/spinners.json"(exports2, module22) {
        module22.exports = {
          dots: {
            interval: 80,
            frames: [
              "\u280B",
              "\u2819",
              "\u2839",
              "\u2838",
              "\u283C",
              "\u2834",
              "\u2826",
              "\u2827",
              "\u2807",
              "\u280F"
            ]
          },
          dots2: {
            interval: 80,
            frames: [
              "\u28FE",
              "\u28FD",
              "\u28FB",
              "\u28BF",
              "\u287F",
              "\u28DF",
              "\u28EF",
              "\u28F7"
            ]
          },
          dots3: {
            interval: 80,
            frames: [
              "\u280B",
              "\u2819",
              "\u281A",
              "\u281E",
              "\u2816",
              "\u2826",
              "\u2834",
              "\u2832",
              "\u2833",
              "\u2813"
            ]
          },
          dots4: {
            interval: 80,
            frames: [
              "\u2804",
              "\u2806",
              "\u2807",
              "\u280B",
              "\u2819",
              "\u2838",
              "\u2830",
              "\u2820",
              "\u2830",
              "\u2838",
              "\u2819",
              "\u280B",
              "\u2807",
              "\u2806"
            ]
          },
          dots5: {
            interval: 80,
            frames: [
              "\u280B",
              "\u2819",
              "\u281A",
              "\u2812",
              "\u2802",
              "\u2802",
              "\u2812",
              "\u2832",
              "\u2834",
              "\u2826",
              "\u2816",
              "\u2812",
              "\u2810",
              "\u2810",
              "\u2812",
              "\u2813",
              "\u280B"
            ]
          },
          dots6: {
            interval: 80,
            frames: [
              "\u2801",
              "\u2809",
              "\u2819",
              "\u281A",
              "\u2812",
              "\u2802",
              "\u2802",
              "\u2812",
              "\u2832",
              "\u2834",
              "\u2824",
              "\u2804",
              "\u2804",
              "\u2824",
              "\u2834",
              "\u2832",
              "\u2812",
              "\u2802",
              "\u2802",
              "\u2812",
              "\u281A",
              "\u2819",
              "\u2809",
              "\u2801"
            ]
          },
          dots7: {
            interval: 80,
            frames: [
              "\u2808",
              "\u2809",
              "\u280B",
              "\u2813",
              "\u2812",
              "\u2810",
              "\u2810",
              "\u2812",
              "\u2816",
              "\u2826",
              "\u2824",
              "\u2820",
              "\u2820",
              "\u2824",
              "\u2826",
              "\u2816",
              "\u2812",
              "\u2810",
              "\u2810",
              "\u2812",
              "\u2813",
              "\u280B",
              "\u2809",
              "\u2808"
            ]
          },
          dots8: {
            interval: 80,
            frames: [
              "\u2801",
              "\u2801",
              "\u2809",
              "\u2819",
              "\u281A",
              "\u2812",
              "\u2802",
              "\u2802",
              "\u2812",
              "\u2832",
              "\u2834",
              "\u2824",
              "\u2804",
              "\u2804",
              "\u2824",
              "\u2820",
              "\u2820",
              "\u2824",
              "\u2826",
              "\u2816",
              "\u2812",
              "\u2810",
              "\u2810",
              "\u2812",
              "\u2813",
              "\u280B",
              "\u2809",
              "\u2808",
              "\u2808"
            ]
          },
          dots9: {
            interval: 80,
            frames: [
              "\u28B9",
              "\u28BA",
              "\u28BC",
              "\u28F8",
              "\u28C7",
              "\u2867",
              "\u2857",
              "\u284F"
            ]
          },
          dots10: {
            interval: 80,
            frames: [
              "\u2884",
              "\u2882",
              "\u2881",
              "\u2841",
              "\u2848",
              "\u2850",
              "\u2860"
            ]
          },
          dots11: {
            interval: 100,
            frames: [
              "\u2801",
              "\u2802",
              "\u2804",
              "\u2840",
              "\u2880",
              "\u2820",
              "\u2810",
              "\u2808"
            ]
          },
          dots12: {
            interval: 80,
            frames: [
              "\u2880\u2800",
              "\u2840\u2800",
              "\u2804\u2800",
              "\u2882\u2800",
              "\u2842\u2800",
              "\u2805\u2800",
              "\u2883\u2800",
              "\u2843\u2800",
              "\u280D\u2800",
              "\u288B\u2800",
              "\u284B\u2800",
              "\u280D\u2801",
              "\u288B\u2801",
              "\u284B\u2801",
              "\u280D\u2809",
              "\u280B\u2809",
              "\u280B\u2809",
              "\u2809\u2819",
              "\u2809\u2819",
              "\u2809\u2829",
              "\u2808\u2899",
              "\u2808\u2859",
              "\u2888\u2829",
              "\u2840\u2899",
              "\u2804\u2859",
              "\u2882\u2829",
              "\u2842\u2898",
              "\u2805\u2858",
              "\u2883\u2828",
              "\u2843\u2890",
              "\u280D\u2850",
              "\u288B\u2820",
              "\u284B\u2880",
              "\u280D\u2841",
              "\u288B\u2801",
              "\u284B\u2801",
              "\u280D\u2809",
              "\u280B\u2809",
              "\u280B\u2809",
              "\u2809\u2819",
              "\u2809\u2819",
              "\u2809\u2829",
              "\u2808\u2899",
              "\u2808\u2859",
              "\u2808\u2829",
              "\u2800\u2899",
              "\u2800\u2859",
              "\u2800\u2829",
              "\u2800\u2898",
              "\u2800\u2858",
              "\u2800\u2828",
              "\u2800\u2890",
              "\u2800\u2850",
              "\u2800\u2820",
              "\u2800\u2880",
              "\u2800\u2840"
            ]
          },
          dots8Bit: {
            interval: 80,
            frames: [
              "\u2800",
              "\u2801",
              "\u2802",
              "\u2803",
              "\u2804",
              "\u2805",
              "\u2806",
              "\u2807",
              "\u2840",
              "\u2841",
              "\u2842",
              "\u2843",
              "\u2844",
              "\u2845",
              "\u2846",
              "\u2847",
              "\u2808",
              "\u2809",
              "\u280A",
              "\u280B",
              "\u280C",
              "\u280D",
              "\u280E",
              "\u280F",
              "\u2848",
              "\u2849",
              "\u284A",
              "\u284B",
              "\u284C",
              "\u284D",
              "\u284E",
              "\u284F",
              "\u2810",
              "\u2811",
              "\u2812",
              "\u2813",
              "\u2814",
              "\u2815",
              "\u2816",
              "\u2817",
              "\u2850",
              "\u2851",
              "\u2852",
              "\u2853",
              "\u2854",
              "\u2855",
              "\u2856",
              "\u2857",
              "\u2818",
              "\u2819",
              "\u281A",
              "\u281B",
              "\u281C",
              "\u281D",
              "\u281E",
              "\u281F",
              "\u2858",
              "\u2859",
              "\u285A",
              "\u285B",
              "\u285C",
              "\u285D",
              "\u285E",
              "\u285F",
              "\u2820",
              "\u2821",
              "\u2822",
              "\u2823",
              "\u2824",
              "\u2825",
              "\u2826",
              "\u2827",
              "\u2860",
              "\u2861",
              "\u2862",
              "\u2863",
              "\u2864",
              "\u2865",
              "\u2866",
              "\u2867",
              "\u2828",
              "\u2829",
              "\u282A",
              "\u282B",
              "\u282C",
              "\u282D",
              "\u282E",
              "\u282F",
              "\u2868",
              "\u2869",
              "\u286A",
              "\u286B",
              "\u286C",
              "\u286D",
              "\u286E",
              "\u286F",
              "\u2830",
              "\u2831",
              "\u2832",
              "\u2833",
              "\u2834",
              "\u2835",
              "\u2836",
              "\u2837",
              "\u2870",
              "\u2871",
              "\u2872",
              "\u2873",
              "\u2874",
              "\u2875",
              "\u2876",
              "\u2877",
              "\u2838",
              "\u2839",
              "\u283A",
              "\u283B",
              "\u283C",
              "\u283D",
              "\u283E",
              "\u283F",
              "\u2878",
              "\u2879",
              "\u287A",
              "\u287B",
              "\u287C",
              "\u287D",
              "\u287E",
              "\u287F",
              "\u2880",
              "\u2881",
              "\u2882",
              "\u2883",
              "\u2884",
              "\u2885",
              "\u2886",
              "\u2887",
              "\u28C0",
              "\u28C1",
              "\u28C2",
              "\u28C3",
              "\u28C4",
              "\u28C5",
              "\u28C6",
              "\u28C7",
              "\u2888",
              "\u2889",
              "\u288A",
              "\u288B",
              "\u288C",
              "\u288D",
              "\u288E",
              "\u288F",
              "\u28C8",
              "\u28C9",
              "\u28CA",
              "\u28CB",
              "\u28CC",
              "\u28CD",
              "\u28CE",
              "\u28CF",
              "\u2890",
              "\u2891",
              "\u2892",
              "\u2893",
              "\u2894",
              "\u2895",
              "\u2896",
              "\u2897",
              "\u28D0",
              "\u28D1",
              "\u28D2",
              "\u28D3",
              "\u28D4",
              "\u28D5",
              "\u28D6",
              "\u28D7",
              "\u2898",
              "\u2899",
              "\u289A",
              "\u289B",
              "\u289C",
              "\u289D",
              "\u289E",
              "\u289F",
              "\u28D8",
              "\u28D9",
              "\u28DA",
              "\u28DB",
              "\u28DC",
              "\u28DD",
              "\u28DE",
              "\u28DF",
              "\u28A0",
              "\u28A1",
              "\u28A2",
              "\u28A3",
              "\u28A4",
              "\u28A5",
              "\u28A6",
              "\u28A7",
              "\u28E0",
              "\u28E1",
              "\u28E2",
              "\u28E3",
              "\u28E4",
              "\u28E5",
              "\u28E6",
              "\u28E7",
              "\u28A8",
              "\u28A9",
              "\u28AA",
              "\u28AB",
              "\u28AC",
              "\u28AD",
              "\u28AE",
              "\u28AF",
              "\u28E8",
              "\u28E9",
              "\u28EA",
              "\u28EB",
              "\u28EC",
              "\u28ED",
              "\u28EE",
              "\u28EF",
              "\u28B0",
              "\u28B1",
              "\u28B2",
              "\u28B3",
              "\u28B4",
              "\u28B5",
              "\u28B6",
              "\u28B7",
              "\u28F0",
              "\u28F1",
              "\u28F2",
              "\u28F3",
              "\u28F4",
              "\u28F5",
              "\u28F6",
              "\u28F7",
              "\u28B8",
              "\u28B9",
              "\u28BA",
              "\u28BB",
              "\u28BC",
              "\u28BD",
              "\u28BE",
              "\u28BF",
              "\u28F8",
              "\u28F9",
              "\u28FA",
              "\u28FB",
              "\u28FC",
              "\u28FD",
              "\u28FE",
              "\u28FF"
            ]
          },
          line: {
            interval: 130,
            frames: [
              "-",
              "\\",
              "|",
              "/"
            ]
          },
          line2: {
            interval: 100,
            frames: [
              "\u2802",
              "-",
              "\u2013",
              "\u2014",
              "\u2013",
              "-"
            ]
          },
          pipe: {
            interval: 100,
            frames: [
              "\u2524",
              "\u2518",
              "\u2534",
              "\u2514",
              "\u251C",
              "\u250C",
              "\u252C",
              "\u2510"
            ]
          },
          simpleDots: {
            interval: 400,
            frames: [
              ".  ",
              ".. ",
              "...",
              "   "
            ]
          },
          simpleDotsScrolling: {
            interval: 200,
            frames: [
              ".  ",
              ".. ",
              "...",
              " ..",
              "  .",
              "   "
            ]
          },
          star: {
            interval: 70,
            frames: [
              "\u2736",
              "\u2738",
              "\u2739",
              "\u273A",
              "\u2739",
              "\u2737"
            ]
          },
          star2: {
            interval: 80,
            frames: [
              "+",
              "x",
              "*"
            ]
          },
          flip: {
            interval: 70,
            frames: [
              "_",
              "_",
              "_",
              "-",
              "`",
              "`",
              "'",
              "\xB4",
              "-",
              "_",
              "_",
              "_"
            ]
          },
          hamburger: {
            interval: 100,
            frames: [
              "\u2631",
              "\u2632",
              "\u2634"
            ]
          },
          growVertical: {
            interval: 120,
            frames: [
              "\u2581",
              "\u2583",
              "\u2584",
              "\u2585",
              "\u2586",
              "\u2587",
              "\u2586",
              "\u2585",
              "\u2584",
              "\u2583"
            ]
          },
          growHorizontal: {
            interval: 120,
            frames: [
              "\u258F",
              "\u258E",
              "\u258D",
              "\u258C",
              "\u258B",
              "\u258A",
              "\u2589",
              "\u258A",
              "\u258B",
              "\u258C",
              "\u258D",
              "\u258E"
            ]
          },
          balloon: {
            interval: 140,
            frames: [
              " ",
              ".",
              "o",
              "O",
              "@",
              "*",
              " "
            ]
          },
          balloon2: {
            interval: 120,
            frames: [
              ".",
              "o",
              "O",
              "\xB0",
              "O",
              "o",
              "."
            ]
          },
          noise: {
            interval: 100,
            frames: [
              "\u2593",
              "\u2592",
              "\u2591"
            ]
          },
          bounce: {
            interval: 120,
            frames: [
              "\u2801",
              "\u2802",
              "\u2804",
              "\u2802"
            ]
          },
          boxBounce: {
            interval: 120,
            frames: [
              "\u2596",
              "\u2598",
              "\u259D",
              "\u2597"
            ]
          },
          boxBounce2: {
            interval: 100,
            frames: [
              "\u258C",
              "\u2580",
              "\u2590",
              "\u2584"
            ]
          },
          triangle: {
            interval: 50,
            frames: [
              "\u25E2",
              "\u25E3",
              "\u25E4",
              "\u25E5"
            ]
          },
          arc: {
            interval: 100,
            frames: [
              "\u25DC",
              "\u25E0",
              "\u25DD",
              "\u25DE",
              "\u25E1",
              "\u25DF"
            ]
          },
          circle: {
            interval: 120,
            frames: [
              "\u25E1",
              "\u2299",
              "\u25E0"
            ]
          },
          squareCorners: {
            interval: 180,
            frames: [
              "\u25F0",
              "\u25F3",
              "\u25F2",
              "\u25F1"
            ]
          },
          circleQuarters: {
            interval: 120,
            frames: [
              "\u25F4",
              "\u25F7",
              "\u25F6",
              "\u25F5"
            ]
          },
          circleHalves: {
            interval: 50,
            frames: [
              "\u25D0",
              "\u25D3",
              "\u25D1",
              "\u25D2"
            ]
          },
          squish: {
            interval: 100,
            frames: [
              "\u256B",
              "\u256A"
            ]
          },
          toggle: {
            interval: 250,
            frames: [
              "\u22B6",
              "\u22B7"
            ]
          },
          toggle2: {
            interval: 80,
            frames: [
              "\u25AB",
              "\u25AA"
            ]
          },
          toggle3: {
            interval: 120,
            frames: [
              "\u25A1",
              "\u25A0"
            ]
          },
          toggle4: {
            interval: 100,
            frames: [
              "\u25A0",
              "\u25A1",
              "\u25AA",
              "\u25AB"
            ]
          },
          toggle5: {
            interval: 100,
            frames: [
              "\u25AE",
              "\u25AF"
            ]
          },
          toggle6: {
            interval: 300,
            frames: [
              "\u101D",
              "\u1040"
            ]
          },
          toggle7: {
            interval: 80,
            frames: [
              "\u29BE",
              "\u29BF"
            ]
          },
          toggle8: {
            interval: 100,
            frames: [
              "\u25CD",
              "\u25CC"
            ]
          },
          toggle9: {
            interval: 100,
            frames: [
              "\u25C9",
              "\u25CE"
            ]
          },
          toggle10: {
            interval: 100,
            frames: [
              "\u3282",
              "\u3280",
              "\u3281"
            ]
          },
          toggle11: {
            interval: 50,
            frames: [
              "\u29C7",
              "\u29C6"
            ]
          },
          toggle12: {
            interval: 120,
            frames: [
              "\u2617",
              "\u2616"
            ]
          },
          toggle13: {
            interval: 80,
            frames: [
              "=",
              "*",
              "-"
            ]
          },
          arrow: {
            interval: 100,
            frames: [
              "\u2190",
              "\u2196",
              "\u2191",
              "\u2197",
              "\u2192",
              "\u2198",
              "\u2193",
              "\u2199"
            ]
          },
          arrow2: {
            interval: 80,
            frames: [
              "\u2B06\uFE0F ",
              "\u2197\uFE0F ",
              "\u27A1\uFE0F ",
              "\u2198\uFE0F ",
              "\u2B07\uFE0F ",
              "\u2199\uFE0F ",
              "\u2B05\uFE0F ",
              "\u2196\uFE0F "
            ]
          },
          arrow3: {
            interval: 120,
            frames: [
              "\u25B9\u25B9\u25B9\u25B9\u25B9",
              "\u25B8\u25B9\u25B9\u25B9\u25B9",
              "\u25B9\u25B8\u25B9\u25B9\u25B9",
              "\u25B9\u25B9\u25B8\u25B9\u25B9",
              "\u25B9\u25B9\u25B9\u25B8\u25B9",
              "\u25B9\u25B9\u25B9\u25B9\u25B8"
            ]
          },
          bouncingBar: {
            interval: 80,
            frames: [
              "[    ]",
              "[=   ]",
              "[==  ]",
              "[=== ]",
              "[ ===]",
              "[  ==]",
              "[   =]",
              "[    ]",
              "[   =]",
              "[  ==]",
              "[ ===]",
              "[====]",
              "[=== ]",
              "[==  ]",
              "[=   ]"
            ]
          },
          bouncingBall: {
            interval: 80,
            frames: [
              "( \u25CF    )",
              "(  \u25CF   )",
              "(   \u25CF  )",
              "(    \u25CF )",
              "(     \u25CF)",
              "(    \u25CF )",
              "(   \u25CF  )",
              "(  \u25CF   )",
              "( \u25CF    )",
              "(\u25CF     )"
            ]
          },
          smiley: {
            interval: 200,
            frames: [
              "\u{1F604} ",
              "\u{1F61D} "
            ]
          },
          monkey: {
            interval: 300,
            frames: [
              "\u{1F648} ",
              "\u{1F648} ",
              "\u{1F649} ",
              "\u{1F64A} "
            ]
          },
          hearts: {
            interval: 100,
            frames: [
              "\u{1F49B} ",
              "\u{1F499} ",
              "\u{1F49C} ",
              "\u{1F49A} ",
              "\u2764\uFE0F "
            ]
          },
          clock: {
            interval: 100,
            frames: [
              "\u{1F55B} ",
              "\u{1F550} ",
              "\u{1F551} ",
              "\u{1F552} ",
              "\u{1F553} ",
              "\u{1F554} ",
              "\u{1F555} ",
              "\u{1F556} ",
              "\u{1F557} ",
              "\u{1F558} ",
              "\u{1F559} ",
              "\u{1F55A} "
            ]
          },
          earth: {
            interval: 180,
            frames: [
              "\u{1F30D} ",
              "\u{1F30E} ",
              "\u{1F30F} "
            ]
          },
          material: {
            interval: 17,
            frames: [
              "\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581",
              "\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581",
              "\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581",
              "\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581",
              "\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581",
              "\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581",
              "\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581",
              "\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581",
              "\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581",
              "\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581",
              "\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588",
              "\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588",
              "\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588",
              "\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588",
              "\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588",
              "\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588",
              "\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588",
              "\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588",
              "\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588",
              "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581",
              "\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581",
              "\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581",
              "\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581",
              "\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
              "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581"
            ]
          },
          moon: {
            interval: 80,
            frames: [
              "\u{1F311} ",
              "\u{1F312} ",
              "\u{1F313} ",
              "\u{1F314} ",
              "\u{1F315} ",
              "\u{1F316} ",
              "\u{1F317} ",
              "\u{1F318} "
            ]
          },
          runner: {
            interval: 140,
            frames: [
              "\u{1F6B6} ",
              "\u{1F3C3} "
            ]
          },
          pong: {
            interval: 80,
            frames: [
              "\u2590\u2802       \u258C",
              "\u2590\u2808       \u258C",
              "\u2590 \u2802      \u258C",
              "\u2590 \u2820      \u258C",
              "\u2590  \u2840     \u258C",
              "\u2590  \u2820     \u258C",
              "\u2590   \u2802    \u258C",
              "\u2590   \u2808    \u258C",
              "\u2590    \u2802   \u258C",
              "\u2590    \u2820   \u258C",
              "\u2590     \u2840  \u258C",
              "\u2590     \u2820  \u258C",
              "\u2590      \u2802 \u258C",
              "\u2590      \u2808 \u258C",
              "\u2590       \u2802\u258C",
              "\u2590       \u2820\u258C",
              "\u2590       \u2840\u258C",
              "\u2590      \u2820 \u258C",
              "\u2590      \u2802 \u258C",
              "\u2590     \u2808  \u258C",
              "\u2590     \u2802  \u258C",
              "\u2590    \u2820   \u258C",
              "\u2590    \u2840   \u258C",
              "\u2590   \u2820    \u258C",
              "\u2590   \u2802    \u258C",
              "\u2590  \u2808     \u258C",
              "\u2590  \u2802     \u258C",
              "\u2590 \u2820      \u258C",
              "\u2590 \u2840      \u258C",
              "\u2590\u2820       \u258C"
            ]
          },
          shark: {
            interval: 120,
            frames: [
              "\u2590|\\____________\u258C",
              "\u2590_|\\___________\u258C",
              "\u2590__|\\__________\u258C",
              "\u2590___|\\_________\u258C",
              "\u2590____|\\________\u258C",
              "\u2590_____|\\_______\u258C",
              "\u2590______|\\______\u258C",
              "\u2590_______|\\_____\u258C",
              "\u2590________|\\____\u258C",
              "\u2590_________|\\___\u258C",
              "\u2590__________|\\__\u258C",
              "\u2590___________|\\_\u258C",
              "\u2590____________|\\\u258C",
              "\u2590____________/|\u258C",
              "\u2590___________/|_\u258C",
              "\u2590__________/|__\u258C",
              "\u2590_________/|___\u258C",
              "\u2590________/|____\u258C",
              "\u2590_______/|_____\u258C",
              "\u2590______/|______\u258C",
              "\u2590_____/|_______\u258C",
              "\u2590____/|________\u258C",
              "\u2590___/|_________\u258C",
              "\u2590__/|__________\u258C",
              "\u2590_/|___________\u258C",
              "\u2590/|____________\u258C"
            ]
          },
          dqpb: {
            interval: 100,
            frames: [
              "d",
              "q",
              "p",
              "b"
            ]
          },
          weather: {
            interval: 100,
            frames: [
              "\u2600\uFE0F ",
              "\u2600\uFE0F ",
              "\u2600\uFE0F ",
              "\u{1F324} ",
              "\u26C5\uFE0F ",
              "\u{1F325} ",
              "\u2601\uFE0F ",
              "\u{1F327} ",
              "\u{1F328} ",
              "\u{1F327} ",
              "\u{1F328} ",
              "\u{1F327} ",
              "\u{1F328} ",
              "\u26C8 ",
              "\u{1F328} ",
              "\u{1F327} ",
              "\u{1F328} ",
              "\u2601\uFE0F ",
              "\u{1F325} ",
              "\u26C5\uFE0F ",
              "\u{1F324} ",
              "\u2600\uFE0F ",
              "\u2600\uFE0F "
            ]
          },
          christmas: {
            interval: 400,
            frames: [
              "\u{1F332}",
              "\u{1F384}"
            ]
          },
          grenade: {
            interval: 80,
            frames: [
              "\u060C   ",
              "\u2032   ",
              " \xB4 ",
              " \u203E ",
              "  \u2E0C",
              "  \u2E0A",
              "  |",
              "  \u204E",
              "  \u2055",
              " \u0DF4 ",
              "  \u2053",
              "   ",
              "   ",
              "   "
            ]
          },
          point: {
            interval: 125,
            frames: [
              "\u2219\u2219\u2219",
              "\u25CF\u2219\u2219",
              "\u2219\u25CF\u2219",
              "\u2219\u2219\u25CF",
              "\u2219\u2219\u2219"
            ]
          },
          layer: {
            interval: 150,
            frames: [
              "-",
              "=",
              "\u2261"
            ]
          },
          betaWave: {
            interval: 80,
            frames: [
              "\u03C1\u03B2\u03B2\u03B2\u03B2\u03B2\u03B2",
              "\u03B2\u03C1\u03B2\u03B2\u03B2\u03B2\u03B2",
              "\u03B2\u03B2\u03C1\u03B2\u03B2\u03B2\u03B2",
              "\u03B2\u03B2\u03B2\u03C1\u03B2\u03B2\u03B2",
              "\u03B2\u03B2\u03B2\u03B2\u03C1\u03B2\u03B2",
              "\u03B2\u03B2\u03B2\u03B2\u03B2\u03C1\u03B2",
              "\u03B2\u03B2\u03B2\u03B2\u03B2\u03B2\u03C1"
            ]
          },
          aesthetic: {
            interval: 80,
            frames: [
              "\u25B0\u25B1\u25B1\u25B1\u25B1\u25B1\u25B1",
              "\u25B0\u25B0\u25B1\u25B1\u25B1\u25B1\u25B1",
              "\u25B0\u25B0\u25B0\u25B1\u25B1\u25B1\u25B1",
              "\u25B0\u25B0\u25B0\u25B0\u25B1\u25B1\u25B1",
              "\u25B0\u25B0\u25B0\u25B0\u25B0\u25B1\u25B1",
              "\u25B0\u25B0\u25B0\u25B0\u25B0\u25B0\u25B1",
              "\u25B0\u25B0\u25B0\u25B0\u25B0\u25B0\u25B0",
              "\u25B0\u25B1\u25B1\u25B1\u25B1\u25B1\u25B1"
            ]
          }
        };
      }
    });
    var require_cli_spinners = __commonJS2({
      "node_modules/cli-spinners/index.js"(exports2, module22) {
        "use strict";
        var spinners = Object.assign({}, require_spinners());
        var spinnersList = Object.keys(spinners);
        Object.defineProperty(spinners, "random", {
          get() {
            const randomIndex = Math.floor(Math.random() * spinnersList.length);
            const spinnerName = spinnersList[randomIndex];
            return spinners[spinnerName];
          }
        });
        module22.exports = spinners;
        module22.exports.default = spinners;
      }
    });
    var require_color_name2 = __commonJS2({
      "node_modules/log-symbols/node_modules/color-name/index.js"(exports2, module22) {
        "use strict";
        module22.exports = {
          "aliceblue": [240, 248, 255],
          "antiquewhite": [250, 235, 215],
          "aqua": [0, 255, 255],
          "aquamarine": [127, 255, 212],
          "azure": [240, 255, 255],
          "beige": [245, 245, 220],
          "bisque": [255, 228, 196],
          "black": [0, 0, 0],
          "blanchedalmond": [255, 235, 205],
          "blue": [0, 0, 255],
          "blueviolet": [138, 43, 226],
          "brown": [165, 42, 42],
          "burlywood": [222, 184, 135],
          "cadetblue": [95, 158, 160],
          "chartreuse": [127, 255, 0],
          "chocolate": [210, 105, 30],
          "coral": [255, 127, 80],
          "cornflowerblue": [100, 149, 237],
          "cornsilk": [255, 248, 220],
          "crimson": [220, 20, 60],
          "cyan": [0, 255, 255],
          "darkblue": [0, 0, 139],
          "darkcyan": [0, 139, 139],
          "darkgoldenrod": [184, 134, 11],
          "darkgray": [169, 169, 169],
          "darkgreen": [0, 100, 0],
          "darkgrey": [169, 169, 169],
          "darkkhaki": [189, 183, 107],
          "darkmagenta": [139, 0, 139],
          "darkolivegreen": [85, 107, 47],
          "darkorange": [255, 140, 0],
          "darkorchid": [153, 50, 204],
          "darkred": [139, 0, 0],
          "darksalmon": [233, 150, 122],
          "darkseagreen": [143, 188, 143],
          "darkslateblue": [72, 61, 139],
          "darkslategray": [47, 79, 79],
          "darkslategrey": [47, 79, 79],
          "darkturquoise": [0, 206, 209],
          "darkviolet": [148, 0, 211],
          "deeppink": [255, 20, 147],
          "deepskyblue": [0, 191, 255],
          "dimgray": [105, 105, 105],
          "dimgrey": [105, 105, 105],
          "dodgerblue": [30, 144, 255],
          "firebrick": [178, 34, 34],
          "floralwhite": [255, 250, 240],
          "forestgreen": [34, 139, 34],
          "fuchsia": [255, 0, 255],
          "gainsboro": [220, 220, 220],
          "ghostwhite": [248, 248, 255],
          "gold": [255, 215, 0],
          "goldenrod": [218, 165, 32],
          "gray": [128, 128, 128],
          "green": [0, 128, 0],
          "greenyellow": [173, 255, 47],
          "grey": [128, 128, 128],
          "honeydew": [240, 255, 240],
          "hotpink": [255, 105, 180],
          "indianred": [205, 92, 92],
          "indigo": [75, 0, 130],
          "ivory": [255, 255, 240],
          "khaki": [240, 230, 140],
          "lavender": [230, 230, 250],
          "lavenderblush": [255, 240, 245],
          "lawngreen": [124, 252, 0],
          "lemonchiffon": [255, 250, 205],
          "lightblue": [173, 216, 230],
          "lightcoral": [240, 128, 128],
          "lightcyan": [224, 255, 255],
          "lightgoldenrodyellow": [250, 250, 210],
          "lightgray": [211, 211, 211],
          "lightgreen": [144, 238, 144],
          "lightgrey": [211, 211, 211],
          "lightpink": [255, 182, 193],
          "lightsalmon": [255, 160, 122],
          "lightseagreen": [32, 178, 170],
          "lightskyblue": [135, 206, 250],
          "lightslategray": [119, 136, 153],
          "lightslategrey": [119, 136, 153],
          "lightsteelblue": [176, 196, 222],
          "lightyellow": [255, 255, 224],
          "lime": [0, 255, 0],
          "limegreen": [50, 205, 50],
          "linen": [250, 240, 230],
          "magenta": [255, 0, 255],
          "maroon": [128, 0, 0],
          "mediumaquamarine": [102, 205, 170],
          "mediumblue": [0, 0, 205],
          "mediumorchid": [186, 85, 211],
          "mediumpurple": [147, 112, 219],
          "mediumseagreen": [60, 179, 113],
          "mediumslateblue": [123, 104, 238],
          "mediumspringgreen": [0, 250, 154],
          "mediumturquoise": [72, 209, 204],
          "mediumvioletred": [199, 21, 133],
          "midnightblue": [25, 25, 112],
          "mintcream": [245, 255, 250],
          "mistyrose": [255, 228, 225],
          "moccasin": [255, 228, 181],
          "navajowhite": [255, 222, 173],
          "navy": [0, 0, 128],
          "oldlace": [253, 245, 230],
          "olive": [128, 128, 0],
          "olivedrab": [107, 142, 35],
          "orange": [255, 165, 0],
          "orangered": [255, 69, 0],
          "orchid": [218, 112, 214],
          "palegoldenrod": [238, 232, 170],
          "palegreen": [152, 251, 152],
          "paleturquoise": [175, 238, 238],
          "palevioletred": [219, 112, 147],
          "papayawhip": [255, 239, 213],
          "peachpuff": [255, 218, 185],
          "peru": [205, 133, 63],
          "pink": [255, 192, 203],
          "plum": [221, 160, 221],
          "powderblue": [176, 224, 230],
          "purple": [128, 0, 128],
          "rebeccapurple": [102, 51, 153],
          "red": [255, 0, 0],
          "rosybrown": [188, 143, 143],
          "royalblue": [65, 105, 225],
          "saddlebrown": [139, 69, 19],
          "salmon": [250, 128, 114],
          "sandybrown": [244, 164, 96],
          "seagreen": [46, 139, 87],
          "seashell": [255, 245, 238],
          "sienna": [160, 82, 45],
          "silver": [192, 192, 192],
          "skyblue": [135, 206, 235],
          "slateblue": [106, 90, 205],
          "slategray": [112, 128, 144],
          "slategrey": [112, 128, 144],
          "snow": [255, 250, 250],
          "springgreen": [0, 255, 127],
          "steelblue": [70, 130, 180],
          "tan": [210, 180, 140],
          "teal": [0, 128, 128],
          "thistle": [216, 191, 216],
          "tomato": [255, 99, 71],
          "turquoise": [64, 224, 208],
          "violet": [238, 130, 238],
          "wheat": [245, 222, 179],
          "white": [255, 255, 255],
          "whitesmoke": [245, 245, 245],
          "yellow": [255, 255, 0],
          "yellowgreen": [154, 205, 50]
        };
      }
    });
    var require_conversions2 = __commonJS2({
      "node_modules/log-symbols/node_modules/color-convert/conversions.js"(exports2, module22) {
        var cssKeywords = require_color_name2();
        var reverseKeywords = {};
        for (const key of Object.keys(cssKeywords)) {
          reverseKeywords[cssKeywords[key]] = key;
        }
        var convert = {
          rgb: { channels: 3, labels: "rgb" },
          hsl: { channels: 3, labels: "hsl" },
          hsv: { channels: 3, labels: "hsv" },
          hwb: { channels: 3, labels: "hwb" },
          cmyk: { channels: 4, labels: "cmyk" },
          xyz: { channels: 3, labels: "xyz" },
          lab: { channels: 3, labels: "lab" },
          lch: { channels: 3, labels: "lch" },
          hex: { channels: 1, labels: ["hex"] },
          keyword: { channels: 1, labels: ["keyword"] },
          ansi16: { channels: 1, labels: ["ansi16"] },
          ansi256: { channels: 1, labels: ["ansi256"] },
          hcg: { channels: 3, labels: ["h", "c", "g"] },
          apple: { channels: 3, labels: ["r16", "g16", "b16"] },
          gray: { channels: 1, labels: ["gray"] }
        };
        module22.exports = convert;
        for (const model of Object.keys(convert)) {
          if (!("channels" in convert[model])) {
            throw new Error("missing channels property: " + model);
          }
          if (!("labels" in convert[model])) {
            throw new Error("missing channel labels property: " + model);
          }
          if (convert[model].labels.length !== convert[model].channels) {
            throw new Error("channel and label counts mismatch: " + model);
          }
          const { channels, labels } = convert[model];
          delete convert[model].channels;
          delete convert[model].labels;
          Object.defineProperty(convert[model], "channels", { value: channels });
          Object.defineProperty(convert[model], "labels", { value: labels });
        }
        convert.rgb.hsl = function(rgb) {
          const r = rgb[0] / 255;
          const g = rgb[1] / 255;
          const b = rgb[2] / 255;
          const min = Math.min(r, g, b);
          const max = Math.max(r, g, b);
          const delta = max - min;
          let h;
          let s;
          if (max === min) {
            h = 0;
          } else if (r === max) {
            h = (g - b) / delta;
          } else if (g === max) {
            h = 2 + (b - r) / delta;
          } else if (b === max) {
            h = 4 + (r - g) / delta;
          }
          h = Math.min(h * 60, 360);
          if (h < 0) {
            h += 360;
          }
          const l = (min + max) / 2;
          if (max === min) {
            s = 0;
          } else if (l <= 0.5) {
            s = delta / (max + min);
          } else {
            s = delta / (2 - max - min);
          }
          return [h, s * 100, l * 100];
        };
        convert.rgb.hsv = function(rgb) {
          let rdif;
          let gdif;
          let bdif;
          let h;
          let s;
          const r = rgb[0] / 255;
          const g = rgb[1] / 255;
          const b = rgb[2] / 255;
          const v = Math.max(r, g, b);
          const diff = v - Math.min(r, g, b);
          const diffc = function(c) {
            return (v - c) / 6 / diff + 1 / 2;
          };
          if (diff === 0) {
            h = 0;
            s = 0;
          } else {
            s = diff / v;
            rdif = diffc(r);
            gdif = diffc(g);
            bdif = diffc(b);
            if (r === v) {
              h = bdif - gdif;
            } else if (g === v) {
              h = 1 / 3 + rdif - bdif;
            } else if (b === v) {
              h = 2 / 3 + gdif - rdif;
            }
            if (h < 0) {
              h += 1;
            } else if (h > 1) {
              h -= 1;
            }
          }
          return [
            h * 360,
            s * 100,
            v * 100
          ];
        };
        convert.rgb.hwb = function(rgb) {
          const r = rgb[0];
          const g = rgb[1];
          let b = rgb[2];
          const h = convert.rgb.hsl(rgb)[0];
          const w = 1 / 255 * Math.min(r, Math.min(g, b));
          b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
          return [h, w * 100, b * 100];
        };
        convert.rgb.cmyk = function(rgb) {
          const r = rgb[0] / 255;
          const g = rgb[1] / 255;
          const b = rgb[2] / 255;
          const k = Math.min(1 - r, 1 - g, 1 - b);
          const c = (1 - r - k) / (1 - k) || 0;
          const m = (1 - g - k) / (1 - k) || 0;
          const y = (1 - b - k) / (1 - k) || 0;
          return [c * 100, m * 100, y * 100, k * 100];
        };
        function comparativeDistance(x, y) {
          return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2;
        }
        convert.rgb.keyword = function(rgb) {
          const reversed = reverseKeywords[rgb];
          if (reversed) {
            return reversed;
          }
          let currentClosestDistance = Infinity;
          let currentClosestKeyword;
          for (const keyword of Object.keys(cssKeywords)) {
            const value = cssKeywords[keyword];
            const distance = comparativeDistance(rgb, value);
            if (distance < currentClosestDistance) {
              currentClosestDistance = distance;
              currentClosestKeyword = keyword;
            }
          }
          return currentClosestKeyword;
        };
        convert.keyword.rgb = function(keyword) {
          return cssKeywords[keyword];
        };
        convert.rgb.xyz = function(rgb) {
          let r = rgb[0] / 255;
          let g = rgb[1] / 255;
          let b = rgb[2] / 255;
          r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
          g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
          b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
          const x = r * 0.4124 + g * 0.3576 + b * 0.1805;
          const y = r * 0.2126 + g * 0.7152 + b * 0.0722;
          const z = r * 0.0193 + g * 0.1192 + b * 0.9505;
          return [x * 100, y * 100, z * 100];
        };
        convert.rgb.lab = function(rgb) {
          const xyz = convert.rgb.xyz(rgb);
          let x = xyz[0];
          let y = xyz[1];
          let z = xyz[2];
          x /= 95.047;
          y /= 100;
          z /= 108.883;
          x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
          y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
          z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
          const l = 116 * y - 16;
          const a = 500 * (x - y);
          const b = 200 * (y - z);
          return [l, a, b];
        };
        convert.hsl.rgb = function(hsl) {
          const h = hsl[0] / 360;
          const s = hsl[1] / 100;
          const l = hsl[2] / 100;
          let t2;
          let t3;
          let val;
          if (s === 0) {
            val = l * 255;
            return [val, val, val];
          }
          if (l < 0.5) {
            t2 = l * (1 + s);
          } else {
            t2 = l + s - l * s;
          }
          const t1 = 2 * l - t2;
          const rgb = [0, 0, 0];
          for (let i = 0; i < 3; i++) {
            t3 = h + 1 / 3 * -(i - 1);
            if (t3 < 0) {
              t3++;
            }
            if (t3 > 1) {
              t3--;
            }
            if (6 * t3 < 1) {
              val = t1 + (t2 - t1) * 6 * t3;
            } else if (2 * t3 < 1) {
              val = t2;
            } else if (3 * t3 < 2) {
              val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
            } else {
              val = t1;
            }
            rgb[i] = val * 255;
          }
          return rgb;
        };
        convert.hsl.hsv = function(hsl) {
          const h = hsl[0];
          let s = hsl[1] / 100;
          let l = hsl[2] / 100;
          let smin = s;
          const lmin = Math.max(l, 0.01);
          l *= 2;
          s *= l <= 1 ? l : 2 - l;
          smin *= lmin <= 1 ? lmin : 2 - lmin;
          const v = (l + s) / 2;
          const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
          return [h, sv * 100, v * 100];
        };
        convert.hsv.rgb = function(hsv) {
          const h = hsv[0] / 60;
          const s = hsv[1] / 100;
          let v = hsv[2] / 100;
          const hi = Math.floor(h) % 6;
          const f = h - Math.floor(h);
          const p = 255 * v * (1 - s);
          const q = 255 * v * (1 - s * f);
          const t = 255 * v * (1 - s * (1 - f));
          v *= 255;
          switch (hi) {
            case 0:
              return [v, t, p];
            case 1:
              return [q, v, p];
            case 2:
              return [p, v, t];
            case 3:
              return [p, q, v];
            case 4:
              return [t, p, v];
            case 5:
              return [v, p, q];
          }
        };
        convert.hsv.hsl = function(hsv) {
          const h = hsv[0];
          const s = hsv[1] / 100;
          const v = hsv[2] / 100;
          const vmin = Math.max(v, 0.01);
          let sl;
          let l;
          l = (2 - s) * v;
          const lmin = (2 - s) * vmin;
          sl = s * vmin;
          sl /= lmin <= 1 ? lmin : 2 - lmin;
          sl = sl || 0;
          l /= 2;
          return [h, sl * 100, l * 100];
        };
        convert.hwb.rgb = function(hwb) {
          const h = hwb[0] / 360;
          let wh = hwb[1] / 100;
          let bl = hwb[2] / 100;
          const ratio = wh + bl;
          let f;
          if (ratio > 1) {
            wh /= ratio;
            bl /= ratio;
          }
          const i = Math.floor(6 * h);
          const v = 1 - bl;
          f = 6 * h - i;
          if ((i & 1) !== 0) {
            f = 1 - f;
          }
          const n = wh + f * (v - wh);
          let r;
          let g;
          let b;
          switch (i) {
            default:
            case 6:
            case 0:
              r = v;
              g = n;
              b = wh;
              break;
            case 1:
              r = n;
              g = v;
              b = wh;
              break;
            case 2:
              r = wh;
              g = v;
              b = n;
              break;
            case 3:
              r = wh;
              g = n;
              b = v;
              break;
            case 4:
              r = n;
              g = wh;
              b = v;
              break;
            case 5:
              r = v;
              g = wh;
              b = n;
              break;
          }
          return [r * 255, g * 255, b * 255];
        };
        convert.cmyk.rgb = function(cmyk) {
          const c = cmyk[0] / 100;
          const m = cmyk[1] / 100;
          const y = cmyk[2] / 100;
          const k = cmyk[3] / 100;
          const r = 1 - Math.min(1, c * (1 - k) + k);
          const g = 1 - Math.min(1, m * (1 - k) + k);
          const b = 1 - Math.min(1, y * (1 - k) + k);
          return [r * 255, g * 255, b * 255];
        };
        convert.xyz.rgb = function(xyz) {
          const x = xyz[0] / 100;
          const y = xyz[1] / 100;
          const z = xyz[2] / 100;
          let r;
          let g;
          let b;
          r = x * 3.2406 + y * -1.5372 + z * -0.4986;
          g = x * -0.9689 + y * 1.8758 + z * 0.0415;
          b = x * 0.0557 + y * -0.204 + z * 1.057;
          r = r > 31308e-7 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92;
          g = g > 31308e-7 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92;
          b = b > 31308e-7 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
          r = Math.min(Math.max(0, r), 1);
          g = Math.min(Math.max(0, g), 1);
          b = Math.min(Math.max(0, b), 1);
          return [r * 255, g * 255, b * 255];
        };
        convert.xyz.lab = function(xyz) {
          let x = xyz[0];
          let y = xyz[1];
          let z = xyz[2];
          x /= 95.047;
          y /= 100;
          z /= 108.883;
          x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
          y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
          z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
          const l = 116 * y - 16;
          const a = 500 * (x - y);
          const b = 200 * (y - z);
          return [l, a, b];
        };
        convert.lab.xyz = function(lab) {
          const l = lab[0];
          const a = lab[1];
          const b = lab[2];
          let x;
          let y;
          let z;
          y = (l + 16) / 116;
          x = a / 500 + y;
          z = y - b / 200;
          const y2 = y ** 3;
          const x2 = x ** 3;
          const z2 = z ** 3;
          y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
          x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
          z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
          x *= 95.047;
          y *= 100;
          z *= 108.883;
          return [x, y, z];
        };
        convert.lab.lch = function(lab) {
          const l = lab[0];
          const a = lab[1];
          const b = lab[2];
          let h;
          const hr = Math.atan2(b, a);
          h = hr * 360 / 2 / Math.PI;
          if (h < 0) {
            h += 360;
          }
          const c = Math.sqrt(a * a + b * b);
          return [l, c, h];
        };
        convert.lch.lab = function(lch) {
          const l = lch[0];
          const c = lch[1];
          const h = lch[2];
          const hr = h / 360 * 2 * Math.PI;
          const a = c * Math.cos(hr);
          const b = c * Math.sin(hr);
          return [l, a, b];
        };
        convert.rgb.ansi16 = function(args, saturation = null) {
          const [r, g, b] = args;
          let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation;
          value = Math.round(value / 50);
          if (value === 0) {
            return 30;
          }
          let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
          if (value === 2) {
            ansi += 60;
          }
          return ansi;
        };
        convert.hsv.ansi16 = function(args) {
          return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
        };
        convert.rgb.ansi256 = function(args) {
          const r = args[0];
          const g = args[1];
          const b = args[2];
          if (r === g && g === b) {
            if (r < 8) {
              return 16;
            }
            if (r > 248) {
              return 231;
            }
            return Math.round((r - 8) / 247 * 24) + 232;
          }
          const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
          return ansi;
        };
        convert.ansi16.rgb = function(args) {
          let color = args % 10;
          if (color === 0 || color === 7) {
            if (args > 50) {
              color += 3.5;
            }
            color = color / 10.5 * 255;
            return [color, color, color];
          }
          const mult = (~~(args > 50) + 1) * 0.5;
          const r = (color & 1) * mult * 255;
          const g = (color >> 1 & 1) * mult * 255;
          const b = (color >> 2 & 1) * mult * 255;
          return [r, g, b];
        };
        convert.ansi256.rgb = function(args) {
          if (args >= 232) {
            const c = (args - 232) * 10 + 8;
            return [c, c, c];
          }
          args -= 16;
          let rem;
          const r = Math.floor(args / 36) / 5 * 255;
          const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
          const b = rem % 6 / 5 * 255;
          return [r, g, b];
        };
        convert.rgb.hex = function(args) {
          const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
          const string = integer.toString(16).toUpperCase();
          return "000000".substring(string.length) + string;
        };
        convert.hex.rgb = function(args) {
          const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
          if (!match) {
            return [0, 0, 0];
          }
          let colorString = match[0];
          if (match[0].length === 3) {
            colorString = colorString.split("").map((char) => {
              return char + char;
            }).join("");
          }
          const integer = parseInt(colorString, 16);
          const r = integer >> 16 & 255;
          const g = integer >> 8 & 255;
          const b = integer & 255;
          return [r, g, b];
        };
        convert.rgb.hcg = function(rgb) {
          const r = rgb[0] / 255;
          const g = rgb[1] / 255;
          const b = rgb[2] / 255;
          const max = Math.max(Math.max(r, g), b);
          const min = Math.min(Math.min(r, g), b);
          const chroma = max - min;
          let grayscale;
          let hue;
          if (chroma < 1) {
            grayscale = min / (1 - chroma);
          } else {
            grayscale = 0;
          }
          if (chroma <= 0) {
            hue = 0;
          } else if (max === r) {
            hue = (g - b) / chroma % 6;
          } else if (max === g) {
            hue = 2 + (b - r) / chroma;
          } else {
            hue = 4 + (r - g) / chroma;
          }
          hue /= 6;
          hue %= 1;
          return [hue * 360, chroma * 100, grayscale * 100];
        };
        convert.hsl.hcg = function(hsl) {
          const s = hsl[1] / 100;
          const l = hsl[2] / 100;
          const c = l < 0.5 ? 2 * s * l : 2 * s * (1 - l);
          let f = 0;
          if (c < 1) {
            f = (l - 0.5 * c) / (1 - c);
          }
          return [hsl[0], c * 100, f * 100];
        };
        convert.hsv.hcg = function(hsv) {
          const s = hsv[1] / 100;
          const v = hsv[2] / 100;
          const c = s * v;
          let f = 0;
          if (c < 1) {
            f = (v - c) / (1 - c);
          }
          return [hsv[0], c * 100, f * 100];
        };
        convert.hcg.rgb = function(hcg) {
          const h = hcg[0] / 360;
          const c = hcg[1] / 100;
          const g = hcg[2] / 100;
          if (c === 0) {
            return [g * 255, g * 255, g * 255];
          }
          const pure = [0, 0, 0];
          const hi = h % 1 * 6;
          const v = hi % 1;
          const w = 1 - v;
          let mg = 0;
          switch (Math.floor(hi)) {
            case 0:
              pure[0] = 1;
              pure[1] = v;
              pure[2] = 0;
              break;
            case 1:
              pure[0] = w;
              pure[1] = 1;
              pure[2] = 0;
              break;
            case 2:
              pure[0] = 0;
              pure[1] = 1;
              pure[2] = v;
              break;
            case 3:
              pure[0] = 0;
              pure[1] = w;
              pure[2] = 1;
              break;
            case 4:
              pure[0] = v;
              pure[1] = 0;
              pure[2] = 1;
              break;
            default:
              pure[0] = 1;
              pure[1] = 0;
              pure[2] = w;
          }
          mg = (1 - c) * g;
          return [
            (c * pure[0] + mg) * 255,
            (c * pure[1] + mg) * 255,
            (c * pure[2] + mg) * 255
          ];
        };
        convert.hcg.hsv = function(hcg) {
          const c = hcg[1] / 100;
          const g = hcg[2] / 100;
          const v = c + g * (1 - c);
          let f = 0;
          if (v > 0) {
            f = c / v;
          }
          return [hcg[0], f * 100, v * 100];
        };
        convert.hcg.hsl = function(hcg) {
          const c = hcg[1] / 100;
          const g = hcg[2] / 100;
          const l = g * (1 - c) + 0.5 * c;
          let s = 0;
          if (l > 0 && l < 0.5) {
            s = c / (2 * l);
          } else if (l >= 0.5 && l < 1) {
            s = c / (2 * (1 - l));
          }
          return [hcg[0], s * 100, l * 100];
        };
        convert.hcg.hwb = function(hcg) {
          const c = hcg[1] / 100;
          const g = hcg[2] / 100;
          const v = c + g * (1 - c);
          return [hcg[0], (v - c) * 100, (1 - v) * 100];
        };
        convert.hwb.hcg = function(hwb) {
          const w = hwb[1] / 100;
          const b = hwb[2] / 100;
          const v = 1 - b;
          const c = v - w;
          let g = 0;
          if (c < 1) {
            g = (v - c) / (1 - c);
          }
          return [hwb[0], c * 100, g * 100];
        };
        convert.apple.rgb = function(apple) {
          return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
        };
        convert.rgb.apple = function(rgb) {
          return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
        };
        convert.gray.rgb = function(args) {
          return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
        };
        convert.gray.hsl = function(args) {
          return [0, 0, args[0]];
        };
        convert.gray.hsv = convert.gray.hsl;
        convert.gray.hwb = function(gray) {
          return [0, 100, gray[0]];
        };
        convert.gray.cmyk = function(gray) {
          return [0, 0, 0, gray[0]];
        };
        convert.gray.lab = function(gray) {
          return [gray[0], 0, 0];
        };
        convert.gray.hex = function(gray) {
          const val = Math.round(gray[0] / 100 * 255) & 255;
          const integer = (val << 16) + (val << 8) + val;
          const string = integer.toString(16).toUpperCase();
          return "000000".substring(string.length) + string;
        };
        convert.rgb.gray = function(rgb) {
          const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
          return [val / 255 * 100];
        };
      }
    });
    var require_route2 = __commonJS2({
      "node_modules/log-symbols/node_modules/color-convert/route.js"(exports2, module22) {
        var conversions = require_conversions2();
        function buildGraph() {
          const graph = {};
          const models = Object.keys(conversions);
          for (let len = models.length, i = 0; i < len; i++) {
            graph[models[i]] = {
              distance: -1,
              parent: null
            };
          }
          return graph;
        }
        function deriveBFS(fromModel) {
          const graph = buildGraph();
          const queue = [fromModel];
          graph[fromModel].distance = 0;
          while (queue.length) {
            const current = queue.pop();
            const adjacents = Object.keys(conversions[current]);
            for (let len = adjacents.length, i = 0; i < len; i++) {
              const adjacent = adjacents[i];
              const node = graph[adjacent];
              if (node.distance === -1) {
                node.distance = graph[current].distance + 1;
                node.parent = current;
                queue.unshift(adjacent);
              }
            }
          }
          return graph;
        }
        function link(from, to) {
          return function(args) {
            return to(from(args));
          };
        }
        function wrapConversion(toModel, graph) {
          const path = [graph[toModel].parent, toModel];
          let fn = conversions[graph[toModel].parent][toModel];
          let cur = graph[toModel].parent;
          while (graph[cur].parent) {
            path.unshift(graph[cur].parent);
            fn = link(conversions[graph[cur].parent][cur], fn);
            cur = graph[cur].parent;
          }
          fn.conversion = path;
          return fn;
        }
        module22.exports = function(fromModel) {
          const graph = deriveBFS(fromModel);
          const conversion = {};
          const models = Object.keys(graph);
          for (let len = models.length, i = 0; i < len; i++) {
            const toModel = models[i];
            const node = graph[toModel];
            if (node.parent === null) {
              continue;
            }
            conversion[toModel] = wrapConversion(toModel, graph);
          }
          return conversion;
        };
      }
    });
    var require_color_convert2 = __commonJS2({
      "node_modules/log-symbols/node_modules/color-convert/index.js"(exports2, module22) {
        var conversions = require_conversions2();
        var route = require_route2();
        var convert = {};
        var models = Object.keys(conversions);
        function wrapRaw(fn) {
          const wrappedFn = function(...args) {
            const arg0 = args[0];
            if (arg0 === void 0 || arg0 === null) {
              return arg0;
            }
            if (arg0.length > 1) {
              args = arg0;
            }
            return fn(args);
          };
          if ("conversion" in fn) {
            wrappedFn.conversion = fn.conversion;
          }
          return wrappedFn;
        }
        function wrapRounded(fn) {
          const wrappedFn = function(...args) {
            const arg0 = args[0];
            if (arg0 === void 0 || arg0 === null) {
              return arg0;
            }
            if (arg0.length > 1) {
              args = arg0;
            }
            const result = fn(args);
            if (typeof result === "object") {
              for (let len = result.length, i = 0; i < len; i++) {
                result[i] = Math.round(result[i]);
              }
            }
            return result;
          };
          if ("conversion" in fn) {
            wrappedFn.conversion = fn.conversion;
          }
          return wrappedFn;
        }
        models.forEach((fromModel) => {
          convert[fromModel] = {};
          Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
          Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
          const routes = route(fromModel);
          const routeModels = Object.keys(routes);
          routeModels.forEach((toModel) => {
            const fn = routes[toModel];
            convert[fromModel][toModel] = wrapRounded(fn);
            convert[fromModel][toModel].raw = wrapRaw(fn);
          });
        });
        module22.exports = convert;
      }
    });
    var require_ansi_styles2 = __commonJS2({
      "node_modules/log-symbols/node_modules/ansi-styles/index.js"(exports2, module22) {
        "use strict";
        var wrapAnsi16 = (fn, offset) => (...args) => {
          const code = fn(...args);
          return `\x1B[${code + offset}m`;
        };
        var wrapAnsi256 = (fn, offset) => (...args) => {
          const code = fn(...args);
          return `\x1B[${38 + offset};5;${code}m`;
        };
        var wrapAnsi16m = (fn, offset) => (...args) => {
          const rgb = fn(...args);
          return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
        };
        var ansi2ansi = (n) => n;
        var rgb2rgb = (r, g, b) => [r, g, b];
        var setLazyProperty = (object, property, get) => {
          Object.defineProperty(object, property, {
            get: () => {
              const value = get();
              Object.defineProperty(object, property, {
                value,
                enumerable: true,
                configurable: true
              });
              return value;
            },
            enumerable: true,
            configurable: true
          });
        };
        var colorConvert;
        var makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
          if (colorConvert === void 0) {
            colorConvert = require_color_convert2();
          }
          const offset = isBackground ? 10 : 0;
          const styles = {};
          for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
            const name2 = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
            if (sourceSpace === targetSpace) {
              styles[name2] = wrap(identity, offset);
            } else if (typeof suite === "object") {
              styles[name2] = wrap(suite[targetSpace], offset);
            }
          }
          return styles;
        };
        function assembleStyles() {
          const codes = /* @__PURE__ */ new Map();
          const styles = {
            modifier: {
              reset: [0, 0],
              bold: [1, 22],
              dim: [2, 22],
              italic: [3, 23],
              underline: [4, 24],
              inverse: [7, 27],
              hidden: [8, 28],
              strikethrough: [9, 29]
            },
            color: {
              black: [30, 39],
              red: [31, 39],
              green: [32, 39],
              yellow: [33, 39],
              blue: [34, 39],
              magenta: [35, 39],
              cyan: [36, 39],
              white: [37, 39],
              blackBright: [90, 39],
              redBright: [91, 39],
              greenBright: [92, 39],
              yellowBright: [93, 39],
              blueBright: [94, 39],
              magentaBright: [95, 39],
              cyanBright: [96, 39],
              whiteBright: [97, 39]
            },
            bgColor: {
              bgBlack: [40, 49],
              bgRed: [41, 49],
              bgGreen: [42, 49],
              bgYellow: [43, 49],
              bgBlue: [44, 49],
              bgMagenta: [45, 49],
              bgCyan: [46, 49],
              bgWhite: [47, 49],
              bgBlackBright: [100, 49],
              bgRedBright: [101, 49],
              bgGreenBright: [102, 49],
              bgYellowBright: [103, 49],
              bgBlueBright: [104, 49],
              bgMagentaBright: [105, 49],
              bgCyanBright: [106, 49],
              bgWhiteBright: [107, 49]
            }
          };
          styles.color.gray = styles.color.blackBright;
          styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
          styles.color.grey = styles.color.blackBright;
          styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
          for (const [groupName, group] of Object.entries(styles)) {
            for (const [styleName, style] of Object.entries(group)) {
              styles[styleName] = {
                open: `\x1B[${style[0]}m`,
                close: `\x1B[${style[1]}m`
              };
              group[styleName] = styles[styleName];
              codes.set(style[0], style[1]);
            }
            Object.defineProperty(styles, groupName, {
              value: group,
              enumerable: false
            });
          }
          Object.defineProperty(styles, "codes", {
            value: codes,
            enumerable: false
          });
          styles.color.close = "\x1B[39m";
          styles.bgColor.close = "\x1B[49m";
          setLazyProperty(styles.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
          setLazyProperty(styles.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
          setLazyProperty(styles.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
          setLazyProperty(styles.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
          setLazyProperty(styles.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
          setLazyProperty(styles.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
          return styles;
        }
        Object.defineProperty(module22, "exports", {
          enumerable: true,
          get: assembleStyles
        });
      }
    });
    var require_has_flag2 = __commonJS2({
      "node_modules/log-symbols/node_modules/has-flag/index.js"(exports2, module22) {
        "use strict";
        module22.exports = (flag, argv = process.argv) => {
          const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
          const position = argv.indexOf(prefix + flag);
          const terminatorPosition = argv.indexOf("--");
          return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
        };
      }
    });
    var require_supports_color2 = __commonJS2({
      "node_modules/log-symbols/node_modules/supports-color/index.js"(exports2, module22) {
        "use strict";
        var os = require("os");
        var tty = require("tty");
        var hasFlag = require_has_flag2();
        var { env } = process;
        var forceColor;
        if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
          forceColor = 0;
        } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
          forceColor = 1;
        }
        if ("FORCE_COLOR" in env) {
          if (env.FORCE_COLOR === "true") {
            forceColor = 1;
          } else if (env.FORCE_COLOR === "false") {
            forceColor = 0;
          } else {
            forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
          }
        }
        function translateLevel(level) {
          if (level === 0) {
            return false;
          }
          return {
            level,
            hasBasic: true,
            has256: level >= 2,
            has16m: level >= 3
          };
        }
        function supportsColor(haveStream, streamIsTTY) {
          if (forceColor === 0) {
            return 0;
          }
          if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
            return 3;
          }
          if (hasFlag("color=256")) {
            return 2;
          }
          if (haveStream && !streamIsTTY && forceColor === void 0) {
            return 0;
          }
          const min = forceColor || 0;
          if (env.TERM === "dumb") {
            return min;
          }
          if (process.platform === "win32") {
            const osRelease = os.release().split(".");
            if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
              return Number(osRelease[2]) >= 14931 ? 3 : 2;
            }
            return 1;
          }
          if ("CI" in env) {
            if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
              return 1;
            }
            return min;
          }
          if ("TEAMCITY_VERSION" in env) {
            return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
          }
          if ("GITHUB_ACTIONS" in env) {
            return 1;
          }
          if (env.COLORTERM === "truecolor") {
            return 3;
          }
          if ("TERM_PROGRAM" in env) {
            const version2 = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
            switch (env.TERM_PROGRAM) {
              case "iTerm.app":
                return version2 >= 3 ? 3 : 2;
              case "Apple_Terminal":
                return 2;
            }
          }
          if (/-256(color)?$/i.test(env.TERM)) {
            return 2;
          }
          if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
            return 1;
          }
          if ("COLORTERM" in env) {
            return 1;
          }
          return min;
        }
        function getSupportLevel(stream) {
          const level = supportsColor(stream, stream && stream.isTTY);
          return translateLevel(level);
        }
        module22.exports = {
          supportsColor: getSupportLevel,
          stdout: translateLevel(supportsColor(true, tty.isatty(1))),
          stderr: translateLevel(supportsColor(true, tty.isatty(2)))
        };
      }
    });
    var require_util2 = __commonJS2({
      "node_modules/log-symbols/node_modules/chalk/source/util.js"(exports2, module22) {
        "use strict";
        var stringReplaceAll = (string, substring, replacer) => {
          let index = string.indexOf(substring);
          if (index === -1) {
            return string;
          }
          const substringLength = substring.length;
          let endIndex = 0;
          let returnValue = "";
          do {
            returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
            endIndex = index + substringLength;
            index = string.indexOf(substring, endIndex);
          } while (index !== -1);
          returnValue += string.substr(endIndex);
          return returnValue;
        };
        var stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index) => {
          let endIndex = 0;
          let returnValue = "";
          do {
            const gotCR = string[index - 1] === "\r";
            returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? "\r\n" : "\n") + postfix;
            endIndex = index + 1;
            index = string.indexOf("\n", endIndex);
          } while (index !== -1);
          returnValue += string.substr(endIndex);
          return returnValue;
        };
        module22.exports = {
          stringReplaceAll,
          stringEncaseCRLFWithFirstIndex
        };
      }
    });
    var require_templates2 = __commonJS2({
      "node_modules/log-symbols/node_modules/chalk/source/templates.js"(exports2, module22) {
        "use strict";
        var TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
        var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
        var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
        var ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;
        var ESCAPES = /* @__PURE__ */ new Map([
          ["n", "\n"],
          ["r", "\r"],
          ["t", "	"],
          ["b", "\b"],
          ["f", "\f"],
          ["v", "\v"],
          ["0", "\0"],
          ["\\", "\\"],
          ["e", "\x1B"],
          ["a", "\x07"]
        ]);
        function unescape2(c) {
          const u = c[0] === "u";
          const bracket = c[1] === "{";
          if (u && !bracket && c.length === 5 || c[0] === "x" && c.length === 3) {
            return String.fromCharCode(parseInt(c.slice(1), 16));
          }
          if (u && bracket) {
            return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
          }
          return ESCAPES.get(c) || c;
        }
        function parseArguments(name2, arguments_) {
          const results = [];
          const chunks = arguments_.trim().split(/\s*,\s*/g);
          let matches;
          for (const chunk of chunks) {
            const number = Number(chunk);
            if (!Number.isNaN(number)) {
              results.push(number);
            } else if (matches = chunk.match(STRING_REGEX)) {
              results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape2(escape) : character));
            } else {
              throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name2}')`);
            }
          }
          return results;
        }
        function parseStyle(style) {
          STYLE_REGEX.lastIndex = 0;
          const results = [];
          let matches;
          while ((matches = STYLE_REGEX.exec(style)) !== null) {
            const name2 = matches[1];
            if (matches[2]) {
              const args = parseArguments(name2, matches[2]);
              results.push([name2].concat(args));
            } else {
              results.push([name2]);
            }
          }
          return results;
        }
        function buildStyle(chalk, styles) {
          const enabled = {};
          for (const layer of styles) {
            for (const style of layer.styles) {
              enabled[style[0]] = layer.inverse ? null : style.slice(1);
            }
          }
          let current = chalk;
          for (const [styleName, styles2] of Object.entries(enabled)) {
            if (!Array.isArray(styles2)) {
              continue;
            }
            if (!(styleName in current)) {
              throw new Error(`Unknown Chalk style: ${styleName}`);
            }
            current = styles2.length > 0 ? current[styleName](...styles2) : current[styleName];
          }
          return current;
        }
        module22.exports = (chalk, temporary) => {
          const styles = [];
          const chunks = [];
          let chunk = [];
          temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {
            if (escapeCharacter) {
              chunk.push(unescape2(escapeCharacter));
            } else if (style) {
              const string = chunk.join("");
              chunk = [];
              chunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));
              styles.push({ inverse, styles: parseStyle(style) });
            } else if (close) {
              if (styles.length === 0) {
                throw new Error("Found extraneous } in Chalk template literal");
              }
              chunks.push(buildStyle(chalk, styles)(chunk.join("")));
              chunk = [];
              styles.pop();
            } else {
              chunk.push(character);
            }
          });
          chunks.push(chunk.join(""));
          if (styles.length > 0) {
            const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
            throw new Error(errMessage);
          }
          return chunks.join("");
        };
      }
    });
    var require_source2 = __commonJS2({
      "node_modules/log-symbols/node_modules/chalk/source/index.js"(exports2, module22) {
        "use strict";
        var ansiStyles = require_ansi_styles2();
        var { stdout: stdoutColor, stderr: stderrColor } = require_supports_color2();
        var {
          stringReplaceAll,
          stringEncaseCRLFWithFirstIndex
        } = require_util2();
        var { isArray } = Array;
        var levelMapping = [
          "ansi",
          "ansi",
          "ansi256",
          "ansi16m"
        ];
        var styles = /* @__PURE__ */ Object.create(null);
        var applyOptions = (object, options = {}) => {
          if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
            throw new Error("The `level` option should be an integer from 0 to 3");
          }
          const colorLevel = stdoutColor ? stdoutColor.level : 0;
          object.level = options.level === void 0 ? colorLevel : options.level;
        };
        var ChalkClass = class {
          constructor(options) {
            return chalkFactory(options);
          }
        };
        var chalkFactory = (options) => {
          const chalk2 = {};
          applyOptions(chalk2, options);
          chalk2.template = (...arguments_) => chalkTag(chalk2.template, ...arguments_);
          Object.setPrototypeOf(chalk2, Chalk.prototype);
          Object.setPrototypeOf(chalk2.template, chalk2);
          chalk2.template.constructor = () => {
            throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
          };
          chalk2.template.Instance = ChalkClass;
          return chalk2.template;
        };
        function Chalk(options) {
          return chalkFactory(options);
        }
        for (const [styleName, style] of Object.entries(ansiStyles)) {
          styles[styleName] = {
            get() {
              const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
              Object.defineProperty(this, styleName, { value: builder });
              return builder;
            }
          };
        }
        styles.visible = {
          get() {
            const builder = createBuilder(this, this._styler, true);
            Object.defineProperty(this, "visible", { value: builder });
            return builder;
          }
        };
        var usedModels = ["rgb", "hex", "keyword", "hsl", "hsv", "hwb", "ansi", "ansi256"];
        for (const model of usedModels) {
          styles[model] = {
            get() {
              const { level } = this;
              return function(...arguments_) {
                const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
                return createBuilder(this, styler, this._isEmpty);
              };
            }
          };
        }
        for (const model of usedModels) {
          const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
          styles[bgModel] = {
            get() {
              const { level } = this;
              return function(...arguments_) {
                const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
                return createBuilder(this, styler, this._isEmpty);
              };
            }
          };
        }
        var proto = Object.defineProperties(() => {
        }, __spreadProps(__spreadValues({}, styles), {
          level: {
            enumerable: true,
            get() {
              return this._generator.level;
            },
            set(level) {
              this._generator.level = level;
            }
          }
        }));
        var createStyler = (open, close, parent) => {
          let openAll;
          let closeAll;
          if (parent === void 0) {
            openAll = open;
            closeAll = close;
          } else {
            openAll = parent.openAll + open;
            closeAll = close + parent.closeAll;
          }
          return {
            open,
            close,
            openAll,
            closeAll,
            parent
          };
        };
        var createBuilder = (self, _styler, _isEmpty) => {
          const builder = (...arguments_) => {
            if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {
              return applyStyle(builder, chalkTag(builder, ...arguments_));
            }
            return applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
          };
          Object.setPrototypeOf(builder, proto);
          builder._generator = self;
          builder._styler = _styler;
          builder._isEmpty = _isEmpty;
          return builder;
        };
        var applyStyle = (self, string) => {
          if (self.level <= 0 || !string) {
            return self._isEmpty ? "" : string;
          }
          let styler = self._styler;
          if (styler === void 0) {
            return string;
          }
          const { openAll, closeAll } = styler;
          if (string.indexOf("\x1B") !== -1) {
            while (styler !== void 0) {
              string = stringReplaceAll(string, styler.close, styler.open);
              styler = styler.parent;
            }
          }
          const lfIndex = string.indexOf("\n");
          if (lfIndex !== -1) {
            string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
          }
          return openAll + string + closeAll;
        };
        var template;
        var chalkTag = (chalk2, ...strings) => {
          const [firstString] = strings;
          if (!isArray(firstString) || !isArray(firstString.raw)) {
            return strings.join(" ");
          }
          const arguments_ = strings.slice(1);
          const parts = [firstString.raw[0]];
          for (let i = 1; i < firstString.length; i++) {
            parts.push(String(arguments_[i - 1]).replace(/[{}\\]/g, "\\$&"), String(firstString.raw[i]));
          }
          if (template === void 0) {
            template = require_templates2();
          }
          return template(chalk2, parts.join(""));
        };
        Object.defineProperties(Chalk.prototype, styles);
        var chalk = Chalk();
        chalk.supportsColor = stdoutColor;
        chalk.stderr = Chalk({ level: stderrColor ? stderrColor.level : 0 });
        chalk.stderr.supportsColor = stderrColor;
        module22.exports = chalk;
      }
    });
    var require_is_unicode_supported = __commonJS2({
      "node_modules/is-unicode-supported/index.js"(exports2, module22) {
        "use strict";
        module22.exports = () => {
          if (process.platform !== "win32") {
            return true;
          }
          return Boolean(process.env.CI) || Boolean(process.env.WT_SESSION) || process.env.TERM_PROGRAM === "vscode" || process.env.TERM === "xterm-256color" || process.env.TERM === "alacritty";
        };
      }
    });
    var require_log_symbols = __commonJS2({
      "node_modules/log-symbols/index.js"(exports2, module22) {
        "use strict";
        var chalk = require_source2();
        var isUnicodeSupported = require_is_unicode_supported();
        var main = {
          info: chalk.blue("\u2139"),
          success: chalk.green("\u2714"),
          warning: chalk.yellow("\u26A0"),
          error: chalk.red("\u2716")
        };
        var fallback = {
          info: chalk.blue("i"),
          success: chalk.green("\u221A"),
          warning: chalk.yellow("\u203C"),
          error: chalk.red("\xD7")
        };
        module22.exports = isUnicodeSupported() ? main : fallback;
      }
    });
    var require_ansi_regex = __commonJS2({
      "node_modules/ansi-regex/index.js"(exports2, module22) {
        "use strict";
        module22.exports = ({ onlyFirst = false } = {}) => {
          const pattern = [
            "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
            "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
          ].join("|");
          return new RegExp(pattern, onlyFirst ? void 0 : "g");
        };
      }
    });
    var require_strip_ansi = __commonJS2({
      "node_modules/strip-ansi/index.js"(exports2, module22) {
        "use strict";
        var ansiRegex = require_ansi_regex();
        module22.exports = (string) => typeof string === "string" ? string.replace(ansiRegex(), "") : string;
      }
    });
    var require_clone = __commonJS2({
      "node_modules/clone/clone.js"(exports2, module22) {
        var clone = function() {
          "use strict";
          function clone2(parent, circular, depth, prototype) {
            var filter;
            if (typeof circular === "object") {
              depth = circular.depth;
              prototype = circular.prototype;
              filter = circular.filter;
              circular = circular.circular;
            }
            var allParents = [];
            var allChildren = [];
            var useBuffer = typeof Buffer != "undefined";
            if (typeof circular == "undefined")
              circular = true;
            if (typeof depth == "undefined")
              depth = Infinity;
            function _clone(parent2, depth2) {
              if (parent2 === null)
                return null;
              if (depth2 == 0)
                return parent2;
              var child;
              var proto;
              if (typeof parent2 != "object") {
                return parent2;
              }
              if (clone2.__isArray(parent2)) {
                child = [];
              } else if (clone2.__isRegExp(parent2)) {
                child = new RegExp(parent2.source, __getRegExpFlags(parent2));
                if (parent2.lastIndex)
                  child.lastIndex = parent2.lastIndex;
              } else if (clone2.__isDate(parent2)) {
                child = new Date(parent2.getTime());
              } else if (useBuffer && Buffer.isBuffer(parent2)) {
                if (Buffer.allocUnsafe) {
                  child = Buffer.allocUnsafe(parent2.length);
                } else {
                  child = new Buffer(parent2.length);
                }
                parent2.copy(child);
                return child;
              } else {
                if (typeof prototype == "undefined") {
                  proto = Object.getPrototypeOf(parent2);
                  child = Object.create(proto);
                } else {
                  child = Object.create(prototype);
                  proto = prototype;
                }
              }
              if (circular) {
                var index = allParents.indexOf(parent2);
                if (index != -1) {
                  return allChildren[index];
                }
                allParents.push(parent2);
                allChildren.push(child);
              }
              for (var i in parent2) {
                var attrs;
                if (proto) {
                  attrs = Object.getOwnPropertyDescriptor(proto, i);
                }
                if (attrs && attrs.set == null) {
                  continue;
                }
                child[i] = _clone(parent2[i], depth2 - 1);
              }
              return child;
            }
            return _clone(parent, depth);
          }
          clone2.clonePrototype = function clonePrototype(parent) {
            if (parent === null)
              return null;
            var c = function() {
            };
            c.prototype = parent;
            return new c();
          };
          function __objToStr(o) {
            return Object.prototype.toString.call(o);
          }
          ;
          clone2.__objToStr = __objToStr;
          function __isDate(o) {
            return typeof o === "object" && __objToStr(o) === "[object Date]";
          }
          ;
          clone2.__isDate = __isDate;
          function __isArray(o) {
            return typeof o === "object" && __objToStr(o) === "[object Array]";
          }
          ;
          clone2.__isArray = __isArray;
          function __isRegExp(o) {
            return typeof o === "object" && __objToStr(o) === "[object RegExp]";
          }
          ;
          clone2.__isRegExp = __isRegExp;
          function __getRegExpFlags(re) {
            var flags = "";
            if (re.global)
              flags += "g";
            if (re.ignoreCase)
              flags += "i";
            if (re.multiline)
              flags += "m";
            return flags;
          }
          ;
          clone2.__getRegExpFlags = __getRegExpFlags;
          return clone2;
        }();
        if (typeof module22 === "object" && module22.exports) {
          module22.exports = clone;
        }
      }
    });
    var require_defaults = __commonJS2({
      "node_modules/defaults/index.js"(exports2, module22) {
        var clone = require_clone();
        module22.exports = function(options, defaults) {
          options = options || {};
          Object.keys(defaults).forEach(function(key) {
            if (typeof options[key] === "undefined") {
              options[key] = clone(defaults[key]);
            }
          });
          return options;
        };
      }
    });
    var require_combining = __commonJS2({
      "node_modules/wcwidth/combining.js"(exports2, module22) {
        module22.exports = [
          [768, 879],
          [1155, 1158],
          [1160, 1161],
          [1425, 1469],
          [1471, 1471],
          [1473, 1474],
          [1476, 1477],
          [1479, 1479],
          [1536, 1539],
          [1552, 1557],
          [1611, 1630],
          [1648, 1648],
          [1750, 1764],
          [1767, 1768],
          [1770, 1773],
          [1807, 1807],
          [1809, 1809],
          [1840, 1866],
          [1958, 1968],
          [2027, 2035],
          [2305, 2306],
          [2364, 2364],
          [2369, 2376],
          [2381, 2381],
          [2385, 2388],
          [2402, 2403],
          [2433, 2433],
          [2492, 2492],
          [2497, 2500],
          [2509, 2509],
          [2530, 2531],
          [2561, 2562],
          [2620, 2620],
          [2625, 2626],
          [2631, 2632],
          [2635, 2637],
          [2672, 2673],
          [2689, 2690],
          [2748, 2748],
          [2753, 2757],
          [2759, 2760],
          [2765, 2765],
          [2786, 2787],
          [2817, 2817],
          [2876, 2876],
          [2879, 2879],
          [2881, 2883],
          [2893, 2893],
          [2902, 2902],
          [2946, 2946],
          [3008, 3008],
          [3021, 3021],
          [3134, 3136],
          [3142, 3144],
          [3146, 3149],
          [3157, 3158],
          [3260, 3260],
          [3263, 3263],
          [3270, 3270],
          [3276, 3277],
          [3298, 3299],
          [3393, 3395],
          [3405, 3405],
          [3530, 3530],
          [3538, 3540],
          [3542, 3542],
          [3633, 3633],
          [3636, 3642],
          [3655, 3662],
          [3761, 3761],
          [3764, 3769],
          [3771, 3772],
          [3784, 3789],
          [3864, 3865],
          [3893, 3893],
          [3895, 3895],
          [3897, 3897],
          [3953, 3966],
          [3968, 3972],
          [3974, 3975],
          [3984, 3991],
          [3993, 4028],
          [4038, 4038],
          [4141, 4144],
          [4146, 4146],
          [4150, 4151],
          [4153, 4153],
          [4184, 4185],
          [4448, 4607],
          [4959, 4959],
          [5906, 5908],
          [5938, 5940],
          [5970, 5971],
          [6002, 6003],
          [6068, 6069],
          [6071, 6077],
          [6086, 6086],
          [6089, 6099],
          [6109, 6109],
          [6155, 6157],
          [6313, 6313],
          [6432, 6434],
          [6439, 6440],
          [6450, 6450],
          [6457, 6459],
          [6679, 6680],
          [6912, 6915],
          [6964, 6964],
          [6966, 6970],
          [6972, 6972],
          [6978, 6978],
          [7019, 7027],
          [7616, 7626],
          [7678, 7679],
          [8203, 8207],
          [8234, 8238],
          [8288, 8291],
          [8298, 8303],
          [8400, 8431],
          [12330, 12335],
          [12441, 12442],
          [43014, 43014],
          [43019, 43019],
          [43045, 43046],
          [64286, 64286],
          [65024, 65039],
          [65056, 65059],
          [65279, 65279],
          [65529, 65531],
          [68097, 68099],
          [68101, 68102],
          [68108, 68111],
          [68152, 68154],
          [68159, 68159],
          [119143, 119145],
          [119155, 119170],
          [119173, 119179],
          [119210, 119213],
          [119362, 119364],
          [917505, 917505],
          [917536, 917631],
          [917760, 917999]
        ];
      }
    });
    var require_wcwidth = __commonJS2({
      "node_modules/wcwidth/index.js"(exports2, module22) {
        "use strict";
        var defaults = require_defaults();
        var combining = require_combining();
        var DEFAULTS = {
          nul: 0,
          control: 0
        };
        module22.exports = function wcwidth2(str) {
          return wcswidth(str, DEFAULTS);
        };
        module22.exports.config = function(opts) {
          opts = defaults(opts || {}, DEFAULTS);
          return function wcwidth2(str) {
            return wcswidth(str, opts);
          };
        };
        function wcswidth(str, opts) {
          if (typeof str !== "string")
            return wcwidth(str, opts);
          var s = 0;
          for (var i = 0; i < str.length; i++) {
            var n = wcwidth(str.charCodeAt(i), opts);
            if (n < 0)
              return -1;
            s += n;
          }
          return s;
        }
        function wcwidth(ucs, opts) {
          if (ucs === 0)
            return opts.nul;
          if (ucs < 32 || ucs >= 127 && ucs < 160)
            return opts.control;
          if (bisearch(ucs))
            return 0;
          return 1 + (ucs >= 4352 && (ucs <= 4447 || ucs == 9001 || ucs == 9002 || ucs >= 11904 && ucs <= 42191 && ucs != 12351 || ucs >= 44032 && ucs <= 55203 || ucs >= 63744 && ucs <= 64255 || ucs >= 65040 && ucs <= 65049 || ucs >= 65072 && ucs <= 65135 || ucs >= 65280 && ucs <= 65376 || ucs >= 65504 && ucs <= 65510 || ucs >= 131072 && ucs <= 196605 || ucs >= 196608 && ucs <= 262141));
        }
        function bisearch(ucs) {
          var min = 0;
          var max = combining.length - 1;
          var mid;
          if (ucs < combining[0][0] || ucs > combining[max][1])
            return false;
          while (max >= min) {
            mid = Math.floor((min + max) / 2);
            if (ucs > combining[mid][1])
              min = mid + 1;
            else if (ucs < combining[mid][0])
              max = mid - 1;
            else
              return true;
          }
          return false;
        }
      }
    });
    var require_is_interactive = __commonJS2({
      "node_modules/is-interactive/index.js"(exports2, module22) {
        "use strict";
        module22.exports = ({ stream = process.stdout } = {}) => {
          return Boolean(stream && stream.isTTY && process.env.TERM !== "dumb" && !("CI" in process.env));
        };
      }
    });
    var require_stream = __commonJS2({
      "node_modules/bl/node_modules/readable-stream/lib/internal/streams/stream.js"(exports2, module22) {
        module22.exports = require("stream");
      }
    });
    var require_buffer_list = __commonJS2({
      "node_modules/bl/node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports2, module22) {
        "use strict";
        function ownKeys(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly)
              symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            if (i % 2) {
              ownKeys(Object(source), true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps)
            _defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            _defineProperties(Constructor, staticProps);
          return Constructor;
        }
        var _require = require("buffer");
        var Buffer2 = _require.Buffer;
        var _require2 = require("util");
        var inspect = _require2.inspect;
        var custom = inspect && inspect.custom || "inspect";
        function copyBuffer(src, target, offset) {
          Buffer2.prototype.copy.call(src, target, offset);
        }
        module22.exports = /* @__PURE__ */ function() {
          function BufferList() {
            _classCallCheck(this, BufferList);
            this.head = null;
            this.tail = null;
            this.length = 0;
          }
          _createClass(BufferList, [{
            key: "push",
            value: function push(v) {
              var entry = {
                data: v,
                next: null
              };
              if (this.length > 0)
                this.tail.next = entry;
              else
                this.head = entry;
              this.tail = entry;
              ++this.length;
            }
          }, {
            key: "unshift",
            value: function unshift(v) {
              var entry = {
                data: v,
                next: this.head
              };
              if (this.length === 0)
                this.tail = entry;
              this.head = entry;
              ++this.length;
            }
          }, {
            key: "shift",
            value: function shift() {
              if (this.length === 0)
                return;
              var ret = this.head.data;
              if (this.length === 1)
                this.head = this.tail = null;
              else
                this.head = this.head.next;
              --this.length;
              return ret;
            }
          }, {
            key: "clear",
            value: function clear() {
              this.head = this.tail = null;
              this.length = 0;
            }
          }, {
            key: "join",
            value: function join(s) {
              if (this.length === 0)
                return "";
              var p = this.head;
              var ret = "" + p.data;
              while (p = p.next) {
                ret += s + p.data;
              }
              return ret;
            }
          }, {
            key: "concat",
            value: function concat(n) {
              if (this.length === 0)
                return Buffer2.alloc(0);
              var ret = Buffer2.allocUnsafe(n >>> 0);
              var p = this.head;
              var i = 0;
              while (p) {
                copyBuffer(p.data, ret, i);
                i += p.data.length;
                p = p.next;
              }
              return ret;
            }
          }, {
            key: "consume",
            value: function consume(n, hasStrings) {
              var ret;
              if (n < this.head.data.length) {
                ret = this.head.data.slice(0, n);
                this.head.data = this.head.data.slice(n);
              } else if (n === this.head.data.length) {
                ret = this.shift();
              } else {
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
              }
              return ret;
            }
          }, {
            key: "first",
            value: function first() {
              return this.head.data;
            }
          }, {
            key: "_getString",
            value: function _getString(n) {
              var p = this.head;
              var c = 1;
              var ret = p.data;
              n -= ret.length;
              while (p = p.next) {
                var str = p.data;
                var nb = n > str.length ? str.length : n;
                if (nb === str.length)
                  ret += str;
                else
                  ret += str.slice(0, n);
                n -= nb;
                if (n === 0) {
                  if (nb === str.length) {
                    ++c;
                    if (p.next)
                      this.head = p.next;
                    else
                      this.head = this.tail = null;
                  } else {
                    this.head = p;
                    p.data = str.slice(nb);
                  }
                  break;
                }
                ++c;
              }
              this.length -= c;
              return ret;
            }
          }, {
            key: "_getBuffer",
            value: function _getBuffer(n) {
              var ret = Buffer2.allocUnsafe(n);
              var p = this.head;
              var c = 1;
              p.data.copy(ret);
              n -= p.data.length;
              while (p = p.next) {
                var buf = p.data;
                var nb = n > buf.length ? buf.length : n;
                buf.copy(ret, ret.length - n, 0, nb);
                n -= nb;
                if (n === 0) {
                  if (nb === buf.length) {
                    ++c;
                    if (p.next)
                      this.head = p.next;
                    else
                      this.head = this.tail = null;
                  } else {
                    this.head = p;
                    p.data = buf.slice(nb);
                  }
                  break;
                }
                ++c;
              }
              this.length -= c;
              return ret;
            }
          }, {
            key: custom,
            value: function value(_, options) {
              return inspect(this, _objectSpread({}, options, {
                depth: 0,
                customInspect: false
              }));
            }
          }]);
          return BufferList;
        }();
      }
    });
    var require_destroy = __commonJS2({
      "node_modules/bl/node_modules/readable-stream/lib/internal/streams/destroy.js"(exports2, module22) {
        "use strict";
        function destroy(err, cb) {
          var _this = this;
          var readableDestroyed = this._readableState && this._readableState.destroyed;
          var writableDestroyed = this._writableState && this._writableState.destroyed;
          if (readableDestroyed || writableDestroyed) {
            if (cb) {
              cb(err);
            } else if (err) {
              if (!this._writableState) {
                process.nextTick(emitErrorNT, this, err);
              } else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                process.nextTick(emitErrorNT, this, err);
              }
            }
            return this;
          }
          if (this._readableState) {
            this._readableState.destroyed = true;
          }
          if (this._writableState) {
            this._writableState.destroyed = true;
          }
          this._destroy(err || null, function(err2) {
            if (!cb && err2) {
              if (!_this._writableState) {
                process.nextTick(emitErrorAndCloseNT, _this, err2);
              } else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                process.nextTick(emitErrorAndCloseNT, _this, err2);
              } else {
                process.nextTick(emitCloseNT, _this);
              }
            } else if (cb) {
              process.nextTick(emitCloseNT, _this);
              cb(err2);
            } else {
              process.nextTick(emitCloseNT, _this);
            }
          });
          return this;
        }
        function emitErrorAndCloseNT(self, err) {
          emitErrorNT(self, err);
          emitCloseNT(self);
        }
        function emitCloseNT(self) {
          if (self._writableState && !self._writableState.emitClose)
            return;
          if (self._readableState && !self._readableState.emitClose)
            return;
          self.emit("close");
        }
        function undestroy() {
          if (this._readableState) {
            this._readableState.destroyed = false;
            this._readableState.reading = false;
            this._readableState.ended = false;
            this._readableState.endEmitted = false;
          }
          if (this._writableState) {
            this._writableState.destroyed = false;
            this._writableState.ended = false;
            this._writableState.ending = false;
            this._writableState.finalCalled = false;
            this._writableState.prefinished = false;
            this._writableState.finished = false;
            this._writableState.errorEmitted = false;
          }
        }
        function emitErrorNT(self, err) {
          self.emit("error", err);
        }
        function errorOrDestroy(stream, err) {
          var rState = stream._readableState;
          var wState = stream._writableState;
          if (rState && rState.autoDestroy || wState && wState.autoDestroy)
            stream.destroy(err);
          else
            stream.emit("error", err);
        }
        module22.exports = {
          destroy,
          undestroy,
          errorOrDestroy
        };
      }
    });
    var require_errors = __commonJS2({
      "node_modules/bl/node_modules/readable-stream/errors.js"(exports2, module22) {
        "use strict";
        var codes = {};
        function createErrorType(code, message, Base) {
          if (!Base) {
            Base = Error;
          }
          function getMessage(arg1, arg2, arg3) {
            if (typeof message === "string") {
              return message;
            } else {
              return message(arg1, arg2, arg3);
            }
          }
          class NodeError extends Base {
            constructor(arg1, arg2, arg3) {
              super(getMessage(arg1, arg2, arg3));
            }
          }
          NodeError.prototype.name = Base.name;
          NodeError.prototype.code = code;
          codes[code] = NodeError;
        }
        function oneOf(expected, thing) {
          if (Array.isArray(expected)) {
            const len = expected.length;
            expected = expected.map((i) => String(i));
            if (len > 2) {
              return `one of ${thing} ${expected.slice(0, len - 1).join(", ")}, or ` + expected[len - 1];
            } else if (len === 2) {
              return `one of ${thing} ${expected[0]} or ${expected[1]}`;
            } else {
              return `of ${thing} ${expected[0]}`;
            }
          } else {
            return `of ${thing} ${String(expected)}`;
          }
        }
        function startsWith(str, search, pos) {
          return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
        }
        function endsWith(str, search, this_len) {
          if (this_len === void 0 || this_len > str.length) {
            this_len = str.length;
          }
          return str.substring(this_len - search.length, this_len) === search;
        }
        function includes(str, search, start) {
          if (typeof start !== "number") {
            start = 0;
          }
          if (start + search.length > str.length) {
            return false;
          } else {
            return str.indexOf(search, start) !== -1;
          }
        }
        createErrorType("ERR_INVALID_OPT_VALUE", function(name2, value) {
          return 'The value "' + value + '" is invalid for option "' + name2 + '"';
        }, TypeError);
        createErrorType("ERR_INVALID_ARG_TYPE", function(name2, expected, actual) {
          let determiner;
          if (typeof expected === "string" && startsWith(expected, "not ")) {
            determiner = "must not be";
            expected = expected.replace(/^not /, "");
          } else {
            determiner = "must be";
          }
          let msg;
          if (endsWith(name2, " argument")) {
            msg = `The ${name2} ${determiner} ${oneOf(expected, "type")}`;
          } else {
            const type = includes(name2, ".") ? "property" : "argument";
            msg = `The "${name2}" ${type} ${determiner} ${oneOf(expected, "type")}`;
          }
          msg += `. Received type ${typeof actual}`;
          return msg;
        }, TypeError);
        createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
        createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name2) {
          return "The " + name2 + " method is not implemented";
        });
        createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
        createErrorType("ERR_STREAM_DESTROYED", function(name2) {
          return "Cannot call " + name2 + " after a stream was destroyed";
        });
        createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
        createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
        createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
        createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
        createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
          return "Unknown encoding: " + arg;
        }, TypeError);
        createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
        module22.exports.codes = codes;
      }
    });
    var require_state = __commonJS2({
      "node_modules/bl/node_modules/readable-stream/lib/internal/streams/state.js"(exports2, module22) {
        "use strict";
        var ERR_INVALID_OPT_VALUE = require_errors().codes.ERR_INVALID_OPT_VALUE;
        function highWaterMarkFrom(options, isDuplex, duplexKey) {
          return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
        }
        function getHighWaterMark(state, options, duplexKey, isDuplex) {
          var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
          if (hwm != null) {
            if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
              var name2 = isDuplex ? duplexKey : "highWaterMark";
              throw new ERR_INVALID_OPT_VALUE(name2, hwm);
            }
            return Math.floor(hwm);
          }
          return state.objectMode ? 16 : 16 * 1024;
        }
        module22.exports = {
          getHighWaterMark
        };
      }
    });
    var require_inherits_browser = __commonJS2({
      "node_modules/inherits/inherits_browser.js"(exports2, module22) {
        if (typeof Object.create === "function") {
          module22.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
              ctor.super_ = superCtor;
              ctor.prototype = Object.create(superCtor.prototype, {
                constructor: {
                  value: ctor,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
            }
          };
        } else {
          module22.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
              ctor.super_ = superCtor;
              var TempCtor = function() {
              };
              TempCtor.prototype = superCtor.prototype;
              ctor.prototype = new TempCtor();
              ctor.prototype.constructor = ctor;
            }
          };
        }
      }
    });
    var require_inherits = __commonJS2({
      "node_modules/inherits/inherits.js"(exports2, module22) {
        try {
          util = require("util");
          if (typeof util.inherits !== "function")
            throw "";
          module22.exports = util.inherits;
        } catch (e) {
          module22.exports = require_inherits_browser();
        }
        var util;
      }
    });
    var require_node = __commonJS2({
      "node_modules/util-deprecate/node.js"(exports2, module22) {
        module22.exports = require("util").deprecate;
      }
    });
    var require_stream_writable = __commonJS2({
      "node_modules/bl/node_modules/readable-stream/lib/_stream_writable.js"(exports2, module22) {
        "use strict";
        module22.exports = Writable;
        function CorkedRequest(state) {
          var _this = this;
          this.next = null;
          this.entry = null;
          this.finish = function() {
            onCorkedFinish(_this, state);
          };
        }
        var Duplex;
        Writable.WritableState = WritableState;
        var internalUtil = {
          deprecate: require_node()
        };
        var Stream = require_stream();
        var Buffer2 = require("buffer").Buffer;
        var OurUint8Array = global.Uint8Array || function() {
        };
        function _uint8ArrayToBuffer(chunk) {
          return Buffer2.from(chunk);
        }
        function _isUint8Array(obj) {
          return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
        }
        var destroyImpl = require_destroy();
        var _require = require_state();
        var getHighWaterMark = _require.getHighWaterMark;
        var _require$codes = require_errors().codes;
        var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
        var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
        var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
        var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
        var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
        var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
        var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
        var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
        var errorOrDestroy = destroyImpl.errorOrDestroy;
        require_inherits()(Writable, Stream);
        function nop() {
        }
        function WritableState(options, stream, isDuplex) {
          Duplex = Duplex || require_stream_duplex();
          options = options || {};
          if (typeof isDuplex !== "boolean")
            isDuplex = stream instanceof Duplex;
          this.objectMode = !!options.objectMode;
          if (isDuplex)
            this.objectMode = this.objectMode || !!options.writableObjectMode;
          this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
          this.finalCalled = false;
          this.needDrain = false;
          this.ending = false;
          this.ended = false;
          this.finished = false;
          this.destroyed = false;
          var noDecode = options.decodeStrings === false;
          this.decodeStrings = !noDecode;
          this.defaultEncoding = options.defaultEncoding || "utf8";
          this.length = 0;
          this.writing = false;
          this.corked = 0;
          this.sync = true;
          this.bufferProcessing = false;
          this.onwrite = function(er) {
            onwrite(stream, er);
          };
          this.writecb = null;
          this.writelen = 0;
          this.bufferedRequest = null;
          this.lastBufferedRequest = null;
          this.pendingcb = 0;
          this.prefinished = false;
          this.errorEmitted = false;
          this.emitClose = options.emitClose !== false;
          this.autoDestroy = !!options.autoDestroy;
          this.bufferedRequestCount = 0;
          this.corkedRequestsFree = new CorkedRequest(this);
        }
        WritableState.prototype.getBuffer = function getBuffer() {
          var current = this.bufferedRequest;
          var out = [];
          while (current) {
            out.push(current);
            current = current.next;
          }
          return out;
        };
        (function() {
          try {
            Object.defineProperty(WritableState.prototype, "buffer", {
              get: internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
              }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
            });
          } catch (_) {
          }
        })();
        var realHasInstance;
        if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
          realHasInstance = Function.prototype[Symbol.hasInstance];
          Object.defineProperty(Writable, Symbol.hasInstance, {
            value: function value(object) {
              if (realHasInstance.call(this, object))
                return true;
              if (this !== Writable)
                return false;
              return object && object._writableState instanceof WritableState;
            }
          });
        } else {
          realHasInstance = function realHasInstance2(object) {
            return object instanceof this;
          };
        }
        function Writable(options) {
          Duplex = Duplex || require_stream_duplex();
          var isDuplex = this instanceof Duplex;
          if (!isDuplex && !realHasInstance.call(Writable, this))
            return new Writable(options);
          this._writableState = new WritableState(options, this, isDuplex);
          this.writable = true;
          if (options) {
            if (typeof options.write === "function")
              this._write = options.write;
            if (typeof options.writev === "function")
              this._writev = options.writev;
            if (typeof options.destroy === "function")
              this._destroy = options.destroy;
            if (typeof options.final === "function")
              this._final = options.final;
          }
          Stream.call(this);
        }
        Writable.prototype.pipe = function() {
          errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
        };
        function writeAfterEnd(stream, cb) {
          var er = new ERR_STREAM_WRITE_AFTER_END();
          errorOrDestroy(stream, er);
          process.nextTick(cb, er);
        }
        function validChunk(stream, state, chunk, cb) {
          var er;
          if (chunk === null) {
            er = new ERR_STREAM_NULL_VALUES();
          } else if (typeof chunk !== "string" && !state.objectMode) {
            er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
          }
          if (er) {
            errorOrDestroy(stream, er);
            process.nextTick(cb, er);
            return false;
          }
          return true;
        }
        Writable.prototype.write = function(chunk, encoding, cb) {
          var state = this._writableState;
          var ret = false;
          var isBuf = !state.objectMode && _isUint8Array(chunk);
          if (isBuf && !Buffer2.isBuffer(chunk)) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
          if (typeof encoding === "function") {
            cb = encoding;
            encoding = null;
          }
          if (isBuf)
            encoding = "buffer";
          else if (!encoding)
            encoding = state.defaultEncoding;
          if (typeof cb !== "function")
            cb = nop;
          if (state.ending)
            writeAfterEnd(this, cb);
          else if (isBuf || validChunk(this, state, chunk, cb)) {
            state.pendingcb++;
            ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
          }
          return ret;
        };
        Writable.prototype.cork = function() {
          this._writableState.corked++;
        };
        Writable.prototype.uncork = function() {
          var state = this._writableState;
          if (state.corked) {
            state.corked--;
            if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
              clearBuffer(this, state);
          }
        };
        Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
          if (typeof encoding === "string")
            encoding = encoding.toLowerCase();
          if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
            throw new ERR_UNKNOWN_ENCODING(encoding);
          this._writableState.defaultEncoding = encoding;
          return this;
        };
        Object.defineProperty(Writable.prototype, "writableBuffer", {
          enumerable: false,
          get: function get() {
            return this._writableState && this._writableState.getBuffer();
          }
        });
        function decodeChunk(state, chunk, encoding) {
          if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
            chunk = Buffer2.from(chunk, encoding);
          }
          return chunk;
        }
        Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
          enumerable: false,
          get: function get() {
            return this._writableState.highWaterMark;
          }
        });
        function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
          if (!isBuf) {
            var newChunk = decodeChunk(state, chunk, encoding);
            if (chunk !== newChunk) {
              isBuf = true;
              encoding = "buffer";
              chunk = newChunk;
            }
          }
          var len = state.objectMode ? 1 : chunk.length;
          state.length += len;
          var ret = state.length < state.highWaterMark;
          if (!ret)
            state.needDrain = true;
          if (state.writing || state.corked) {
            var last = state.lastBufferedRequest;
            state.lastBufferedRequest = {
              chunk,
              encoding,
              isBuf,
              callback: cb,
              next: null
            };
            if (last) {
              last.next = state.lastBufferedRequest;
            } else {
              state.bufferedRequest = state.lastBufferedRequest;
            }
            state.bufferedRequestCount += 1;
          } else {
            doWrite(stream, state, false, len, chunk, encoding, cb);
          }
          return ret;
        }
        function doWrite(stream, state, writev, len, chunk, encoding, cb) {
          state.writelen = len;
          state.writecb = cb;
          state.writing = true;
          state.sync = true;
          if (state.destroyed)
            state.onwrite(new ERR_STREAM_DESTROYED("write"));
          else if (writev)
            stream._writev(chunk, state.onwrite);
          else
            stream._write(chunk, encoding, state.onwrite);
          state.sync = false;
        }
        function onwriteError(stream, state, sync, er, cb) {
          --state.pendingcb;
          if (sync) {
            process.nextTick(cb, er);
            process.nextTick(finishMaybe, stream, state);
            stream._writableState.errorEmitted = true;
            errorOrDestroy(stream, er);
          } else {
            cb(er);
            stream._writableState.errorEmitted = true;
            errorOrDestroy(stream, er);
            finishMaybe(stream, state);
          }
        }
        function onwriteStateUpdate(state) {
          state.writing = false;
          state.writecb = null;
          state.length -= state.writelen;
          state.writelen = 0;
        }
        function onwrite(stream, er) {
          var state = stream._writableState;
          var sync = state.sync;
          var cb = state.writecb;
          if (typeof cb !== "function")
            throw new ERR_MULTIPLE_CALLBACK();
          onwriteStateUpdate(state);
          if (er)
            onwriteError(stream, state, sync, er, cb);
          else {
            var finished = needFinish(state) || stream.destroyed;
            if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
              clearBuffer(stream, state);
            }
            if (sync) {
              process.nextTick(afterWrite, stream, state, finished, cb);
            } else {
              afterWrite(stream, state, finished, cb);
            }
          }
        }
        function afterWrite(stream, state, finished, cb) {
          if (!finished)
            onwriteDrain(stream, state);
          state.pendingcb--;
          cb();
          finishMaybe(stream, state);
        }
        function onwriteDrain(stream, state) {
          if (state.length === 0 && state.needDrain) {
            state.needDrain = false;
            stream.emit("drain");
          }
        }
        function clearBuffer(stream, state) {
          state.bufferProcessing = true;
          var entry = state.bufferedRequest;
          if (stream._writev && entry && entry.next) {
            var l = state.bufferedRequestCount;
            var buffer = new Array(l);
            var holder = state.corkedRequestsFree;
            holder.entry = entry;
            var count = 0;
            var allBuffers = true;
            while (entry) {
              buffer[count] = entry;
              if (!entry.isBuf)
                allBuffers = false;
              entry = entry.next;
              count += 1;
            }
            buffer.allBuffers = allBuffers;
            doWrite(stream, state, true, state.length, buffer, "", holder.finish);
            state.pendingcb++;
            state.lastBufferedRequest = null;
            if (holder.next) {
              state.corkedRequestsFree = holder.next;
              holder.next = null;
            } else {
              state.corkedRequestsFree = new CorkedRequest(state);
            }
            state.bufferedRequestCount = 0;
          } else {
            while (entry) {
              var chunk = entry.chunk;
              var encoding = entry.encoding;
              var cb = entry.callback;
              var len = state.objectMode ? 1 : chunk.length;
              doWrite(stream, state, false, len, chunk, encoding, cb);
              entry = entry.next;
              state.bufferedRequestCount--;
              if (state.writing) {
                break;
              }
            }
            if (entry === null)
              state.lastBufferedRequest = null;
          }
          state.bufferedRequest = entry;
          state.bufferProcessing = false;
        }
        Writable.prototype._write = function(chunk, encoding, cb) {
          cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
        };
        Writable.prototype._writev = null;
        Writable.prototype.end = function(chunk, encoding, cb) {
          var state = this._writableState;
          if (typeof chunk === "function") {
            cb = chunk;
            chunk = null;
            encoding = null;
          } else if (typeof encoding === "function") {
            cb = encoding;
            encoding = null;
          }
          if (chunk !== null && chunk !== void 0)
            this.write(chunk, encoding);
          if (state.corked) {
            state.corked = 1;
            this.uncork();
          }
          if (!state.ending)
            endWritable(this, state, cb);
          return this;
        };
        Object.defineProperty(Writable.prototype, "writableLength", {
          enumerable: false,
          get: function get() {
            return this._writableState.length;
          }
        });
        function needFinish(state) {
          return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
        }
        function callFinal(stream, state) {
          stream._final(function(err) {
            state.pendingcb--;
            if (err) {
              errorOrDestroy(stream, err);
            }
            state.prefinished = true;
            stream.emit("prefinish");
            finishMaybe(stream, state);
          });
        }
        function prefinish(stream, state) {
          if (!state.prefinished && !state.finalCalled) {
            if (typeof stream._final === "function" && !state.destroyed) {
              state.pendingcb++;
              state.finalCalled = true;
              process.nextTick(callFinal, stream, state);
            } else {
              state.prefinished = true;
              stream.emit("prefinish");
            }
          }
        }
        function finishMaybe(stream, state) {
          var need = needFinish(state);
          if (need) {
            prefinish(stream, state);
            if (state.pendingcb === 0) {
              state.finished = true;
              stream.emit("finish");
              if (state.autoDestroy) {
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) {
                  stream.destroy();
                }
              }
            }
          }
          return need;
        }
        function endWritable(stream, state, cb) {
          state.ending = true;
          finishMaybe(stream, state);
          if (cb) {
            if (state.finished)
              process.nextTick(cb);
            else
              stream.once("finish", cb);
          }
          state.ended = true;
          stream.writable = false;
        }
        function onCorkedFinish(corkReq, state, err) {
          var entry = corkReq.entry;
          corkReq.entry = null;
          while (entry) {
            var cb = entry.callback;
            state.pendingcb--;
            cb(err);
            entry = entry.next;
          }
          state.corkedRequestsFree.next = corkReq;
        }
        Object.defineProperty(Writable.prototype, "destroyed", {
          enumerable: false,
          get: function get() {
            if (this._writableState === void 0) {
              return false;
            }
            return this._writableState.destroyed;
          },
          set: function set(value) {
            if (!this._writableState) {
              return;
            }
            this._writableState.destroyed = value;
          }
        });
        Writable.prototype.destroy = destroyImpl.destroy;
        Writable.prototype._undestroy = destroyImpl.undestroy;
        Writable.prototype._destroy = function(err, cb) {
          cb(err);
        };
      }
    });
    var require_stream_duplex = __commonJS2({
      "node_modules/bl/node_modules/readable-stream/lib/_stream_duplex.js"(exports2, module22) {
        "use strict";
        var objectKeys = Object.keys || function(obj) {
          var keys2 = [];
          for (var key in obj) {
            keys2.push(key);
          }
          return keys2;
        };
        module22.exports = Duplex;
        var Readable = require_stream_readable();
        var Writable = require_stream_writable();
        require_inherits()(Duplex, Readable);
        {
          keys = objectKeys(Writable.prototype);
          for (v = 0; v < keys.length; v++) {
            method = keys[v];
            if (!Duplex.prototype[method])
              Duplex.prototype[method] = Writable.prototype[method];
          }
        }
        var keys;
        var method;
        var v;
        function Duplex(options) {
          if (!(this instanceof Duplex))
            return new Duplex(options);
          Readable.call(this, options);
          Writable.call(this, options);
          this.allowHalfOpen = true;
          if (options) {
            if (options.readable === false)
              this.readable = false;
            if (options.writable === false)
              this.writable = false;
            if (options.allowHalfOpen === false) {
              this.allowHalfOpen = false;
              this.once("end", onend);
            }
          }
        }
        Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
          enumerable: false,
          get: function get() {
            return this._writableState.highWaterMark;
          }
        });
        Object.defineProperty(Duplex.prototype, "writableBuffer", {
          enumerable: false,
          get: function get() {
            return this._writableState && this._writableState.getBuffer();
          }
        });
        Object.defineProperty(Duplex.prototype, "writableLength", {
          enumerable: false,
          get: function get() {
            return this._writableState.length;
          }
        });
        function onend() {
          if (this._writableState.ended)
            return;
          process.nextTick(onEndNT, this);
        }
        function onEndNT(self) {
          self.end();
        }
        Object.defineProperty(Duplex.prototype, "destroyed", {
          enumerable: false,
          get: function get() {
            if (this._readableState === void 0 || this._writableState === void 0) {
              return false;
            }
            return this._readableState.destroyed && this._writableState.destroyed;
          },
          set: function set(value) {
            if (this._readableState === void 0 || this._writableState === void 0) {
              return;
            }
            this._readableState.destroyed = value;
            this._writableState.destroyed = value;
          }
        });
      }
    });
    var require_safe_buffer = __commonJS2({
      "node_modules/safe-buffer/index.js"(exports2, module22) {
        var buffer = require("buffer");
        var Buffer2 = buffer.Buffer;
        function copyProps(src, dst) {
          for (var key in src) {
            dst[key] = src[key];
          }
        }
        if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
          module22.exports = buffer;
        } else {
          copyProps(buffer, exports2);
          exports2.Buffer = SafeBuffer;
        }
        function SafeBuffer(arg, encodingOrOffset, length) {
          return Buffer2(arg, encodingOrOffset, length);
        }
        copyProps(Buffer2, SafeBuffer);
        SafeBuffer.from = function(arg, encodingOrOffset, length) {
          if (typeof arg === "number") {
            throw new TypeError("Argument must not be a number");
          }
          return Buffer2(arg, encodingOrOffset, length);
        };
        SafeBuffer.alloc = function(size, fill, encoding) {
          if (typeof size !== "number") {
            throw new TypeError("Argument must be a number");
          }
          var buf = Buffer2(size);
          if (fill !== void 0) {
            if (typeof encoding === "string") {
              buf.fill(fill, encoding);
            } else {
              buf.fill(fill);
            }
          } else {
            buf.fill(0);
          }
          return buf;
        };
        SafeBuffer.allocUnsafe = function(size) {
          if (typeof size !== "number") {
            throw new TypeError("Argument must be a number");
          }
          return Buffer2(size);
        };
        SafeBuffer.allocUnsafeSlow = function(size) {
          if (typeof size !== "number") {
            throw new TypeError("Argument must be a number");
          }
          return buffer.SlowBuffer(size);
        };
      }
    });
    var require_string_decoder = __commonJS2({
      "node_modules/string_decoder/lib/string_decoder.js"(exports2) {
        "use strict";
        var Buffer2 = require_safe_buffer().Buffer;
        var isEncoding = Buffer2.isEncoding || function(encoding) {
          encoding = "" + encoding;
          switch (encoding && encoding.toLowerCase()) {
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
            case "raw":
              return true;
            default:
              return false;
          }
        };
        function _normalizeEncoding(enc) {
          if (!enc)
            return "utf8";
          var retried;
          while (true) {
            switch (enc) {
              case "utf8":
              case "utf-8":
                return "utf8";
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return "utf16le";
              case "latin1":
              case "binary":
                return "latin1";
              case "base64":
              case "ascii":
              case "hex":
                return enc;
              default:
                if (retried)
                  return;
                enc = ("" + enc).toLowerCase();
                retried = true;
            }
          }
        }
        function normalizeEncoding(enc) {
          var nenc = _normalizeEncoding(enc);
          if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))
            throw new Error("Unknown encoding: " + enc);
          return nenc || enc;
        }
        exports2.StringDecoder = StringDecoder;
        function StringDecoder(encoding) {
          this.encoding = normalizeEncoding(encoding);
          var nb;
          switch (this.encoding) {
            case "utf16le":
              this.text = utf16Text;
              this.end = utf16End;
              nb = 4;
              break;
            case "utf8":
              this.fillLast = utf8FillLast;
              nb = 4;
              break;
            case "base64":
              this.text = base64Text;
              this.end = base64End;
              nb = 3;
              break;
            default:
              this.write = simpleWrite;
              this.end = simpleEnd;
              return;
          }
          this.lastNeed = 0;
          this.lastTotal = 0;
          this.lastChar = Buffer2.allocUnsafe(nb);
        }
        StringDecoder.prototype.write = function(buf) {
          if (buf.length === 0)
            return "";
          var r;
          var i;
          if (this.lastNeed) {
            r = this.fillLast(buf);
            if (r === void 0)
              return "";
            i = this.lastNeed;
            this.lastNeed = 0;
          } else {
            i = 0;
          }
          if (i < buf.length)
            return r ? r + this.text(buf, i) : this.text(buf, i);
          return r || "";
        };
        StringDecoder.prototype.end = utf8End;
        StringDecoder.prototype.text = utf8Text;
        StringDecoder.prototype.fillLast = function(buf) {
          if (this.lastNeed <= buf.length) {
            buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
            return this.lastChar.toString(this.encoding, 0, this.lastTotal);
          }
          buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
          this.lastNeed -= buf.length;
        };
        function utf8CheckByte(byte) {
          if (byte <= 127)
            return 0;
          else if (byte >> 5 === 6)
            return 2;
          else if (byte >> 4 === 14)
            return 3;
          else if (byte >> 3 === 30)
            return 4;
          return byte >> 6 === 2 ? -1 : -2;
        }
        function utf8CheckIncomplete(self, buf, i) {
          var j = buf.length - 1;
          if (j < i)
            return 0;
          var nb = utf8CheckByte(buf[j]);
          if (nb >= 0) {
            if (nb > 0)
              self.lastNeed = nb - 1;
            return nb;
          }
          if (--j < i || nb === -2)
            return 0;
          nb = utf8CheckByte(buf[j]);
          if (nb >= 0) {
            if (nb > 0)
              self.lastNeed = nb - 2;
            return nb;
          }
          if (--j < i || nb === -2)
            return 0;
          nb = utf8CheckByte(buf[j]);
          if (nb >= 0) {
            if (nb > 0) {
              if (nb === 2)
                nb = 0;
              else
                self.lastNeed = nb - 3;
            }
            return nb;
          }
          return 0;
        }
        function utf8CheckExtraBytes(self, buf, p) {
          if ((buf[0] & 192) !== 128) {
            self.lastNeed = 0;
            return "\uFFFD";
          }
          if (self.lastNeed > 1 && buf.length > 1) {
            if ((buf[1] & 192) !== 128) {
              self.lastNeed = 1;
              return "\uFFFD";
            }
            if (self.lastNeed > 2 && buf.length > 2) {
              if ((buf[2] & 192) !== 128) {
                self.lastNeed = 2;
                return "\uFFFD";
              }
            }
          }
        }
        function utf8FillLast(buf) {
          var p = this.lastTotal - this.lastNeed;
          var r = utf8CheckExtraBytes(this, buf, p);
          if (r !== void 0)
            return r;
          if (this.lastNeed <= buf.length) {
            buf.copy(this.lastChar, p, 0, this.lastNeed);
            return this.lastChar.toString(this.encoding, 0, this.lastTotal);
          }
          buf.copy(this.lastChar, p, 0, buf.length);
          this.lastNeed -= buf.length;
        }
        function utf8Text(buf, i) {
          var total = utf8CheckIncomplete(this, buf, i);
          if (!this.lastNeed)
            return buf.toString("utf8", i);
          this.lastTotal = total;
          var end = buf.length - (total - this.lastNeed);
          buf.copy(this.lastChar, 0, end);
          return buf.toString("utf8", i, end);
        }
        function utf8End(buf) {
          var r = buf && buf.length ? this.write(buf) : "";
          if (this.lastNeed)
            return r + "\uFFFD";
          return r;
        }
        function utf16Text(buf, i) {
          if ((buf.length - i) % 2 === 0) {
            var r = buf.toString("utf16le", i);
            if (r) {
              var c = r.charCodeAt(r.length - 1);
              if (c >= 55296 && c <= 56319) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
              }
            }
            return r;
          }
          this.lastNeed = 1;
          this.lastTotal = 2;
          this.lastChar[0] = buf[buf.length - 1];
          return buf.toString("utf16le", i, buf.length - 1);
        }
        function utf16End(buf) {
          var r = buf && buf.length ? this.write(buf) : "";
          if (this.lastNeed) {
            var end = this.lastTotal - this.lastNeed;
            return r + this.lastChar.toString("utf16le", 0, end);
          }
          return r;
        }
        function base64Text(buf, i) {
          var n = (buf.length - i) % 3;
          if (n === 0)
            return buf.toString("base64", i);
          this.lastNeed = 3 - n;
          this.lastTotal = 3;
          if (n === 1) {
            this.lastChar[0] = buf[buf.length - 1];
          } else {
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
          }
          return buf.toString("base64", i, buf.length - n);
        }
        function base64End(buf) {
          var r = buf && buf.length ? this.write(buf) : "";
          if (this.lastNeed)
            return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
          return r;
        }
        function simpleWrite(buf) {
          return buf.toString(this.encoding);
        }
        function simpleEnd(buf) {
          return buf && buf.length ? this.write(buf) : "";
        }
      }
    });
    var require_end_of_stream = __commonJS2({
      "node_modules/bl/node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports2, module22) {
        "use strict";
        var ERR_STREAM_PREMATURE_CLOSE = require_errors().codes.ERR_STREAM_PREMATURE_CLOSE;
        function once(callback) {
          var called = false;
          return function() {
            if (called)
              return;
            called = true;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            callback.apply(this, args);
          };
        }
        function noop() {
        }
        function isRequest(stream) {
          return stream.setHeader && typeof stream.abort === "function";
        }
        function eos(stream, opts, callback) {
          if (typeof opts === "function")
            return eos(stream, null, opts);
          if (!opts)
            opts = {};
          callback = once(callback || noop);
          var readable = opts.readable || opts.readable !== false && stream.readable;
          var writable = opts.writable || opts.writable !== false && stream.writable;
          var onlegacyfinish = function onlegacyfinish2() {
            if (!stream.writable)
              onfinish();
          };
          var writableEnded = stream._writableState && stream._writableState.finished;
          var onfinish = function onfinish2() {
            writable = false;
            writableEnded = true;
            if (!readable)
              callback.call(stream);
          };
          var readableEnded = stream._readableState && stream._readableState.endEmitted;
          var onend = function onend2() {
            readable = false;
            readableEnded = true;
            if (!writable)
              callback.call(stream);
          };
          var onerror = function onerror2(err) {
            callback.call(stream, err);
          };
          var onclose = function onclose2() {
            var err;
            if (readable && !readableEnded) {
              if (!stream._readableState || !stream._readableState.ended)
                err = new ERR_STREAM_PREMATURE_CLOSE();
              return callback.call(stream, err);
            }
            if (writable && !writableEnded) {
              if (!stream._writableState || !stream._writableState.ended)
                err = new ERR_STREAM_PREMATURE_CLOSE();
              return callback.call(stream, err);
            }
          };
          var onrequest = function onrequest2() {
            stream.req.on("finish", onfinish);
          };
          if (isRequest(stream)) {
            stream.on("complete", onfinish);
            stream.on("abort", onclose);
            if (stream.req)
              onrequest();
            else
              stream.on("request", onrequest);
          } else if (writable && !stream._writableState) {
            stream.on("end", onlegacyfinish);
            stream.on("close", onlegacyfinish);
          }
          stream.on("end", onend);
          stream.on("finish", onfinish);
          if (opts.error !== false)
            stream.on("error", onerror);
          stream.on("close", onclose);
          return function() {
            stream.removeListener("complete", onfinish);
            stream.removeListener("abort", onclose);
            stream.removeListener("request", onrequest);
            if (stream.req)
              stream.req.removeListener("finish", onfinish);
            stream.removeListener("end", onlegacyfinish);
            stream.removeListener("close", onlegacyfinish);
            stream.removeListener("finish", onfinish);
            stream.removeListener("end", onend);
            stream.removeListener("error", onerror);
            stream.removeListener("close", onclose);
          };
        }
        module22.exports = eos;
      }
    });
    var require_async_iterator = __commonJS2({
      "node_modules/bl/node_modules/readable-stream/lib/internal/streams/async_iterator.js"(exports2, module22) {
        "use strict";
        var _Object$setPrototypeO;
        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        var finished = require_end_of_stream();
        var kLastResolve = Symbol("lastResolve");
        var kLastReject = Symbol("lastReject");
        var kError = Symbol("error");
        var kEnded = Symbol("ended");
        var kLastPromise = Symbol("lastPromise");
        var kHandlePromise = Symbol("handlePromise");
        var kStream = Symbol("stream");
        function createIterResult(value, done) {
          return {
            value,
            done
          };
        }
        function readAndResolve(iter) {
          var resolve = iter[kLastResolve];
          if (resolve !== null) {
            var data = iter[kStream].read();
            if (data !== null) {
              iter[kLastPromise] = null;
              iter[kLastResolve] = null;
              iter[kLastReject] = null;
              resolve(createIterResult(data, false));
            }
          }
        }
        function onReadable(iter) {
          process.nextTick(readAndResolve, iter);
        }
        function wrapForNext(lastPromise, iter) {
          return function(resolve, reject) {
            lastPromise.then(function() {
              if (iter[kEnded]) {
                resolve(createIterResult(void 0, true));
                return;
              }
              iter[kHandlePromise](resolve, reject);
            }, reject);
          };
        }
        var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
        });
        var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
          get stream() {
            return this[kStream];
          },
          next: function next() {
            var _this = this;
            var error = this[kError];
            if (error !== null) {
              return Promise.reject(error);
            }
            if (this[kEnded]) {
              return Promise.resolve(createIterResult(void 0, true));
            }
            if (this[kStream].destroyed) {
              return new Promise(function(resolve, reject) {
                process.nextTick(function() {
                  if (_this[kError]) {
                    reject(_this[kError]);
                  } else {
                    resolve(createIterResult(void 0, true));
                  }
                });
              });
            }
            var lastPromise = this[kLastPromise];
            var promise;
            if (lastPromise) {
              promise = new Promise(wrapForNext(lastPromise, this));
            } else {
              var data = this[kStream].read();
              if (data !== null) {
                return Promise.resolve(createIterResult(data, false));
              }
              promise = new Promise(this[kHandlePromise]);
            }
            this[kLastPromise] = promise;
            return promise;
          }
        }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
          return this;
        }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
          var _this2 = this;
          return new Promise(function(resolve, reject) {
            _this2[kStream].destroy(null, function(err) {
              if (err) {
                reject(err);
                return;
              }
              resolve(createIterResult(void 0, true));
            });
          });
        }), _Object$setPrototypeO), AsyncIteratorPrototype);
        var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
          var _Object$create;
          var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
            value: stream,
            writable: true
          }), _defineProperty(_Object$create, kLastResolve, {
            value: null,
            writable: true
          }), _defineProperty(_Object$create, kLastReject, {
            value: null,
            writable: true
          }), _defineProperty(_Object$create, kError, {
            value: null,
            writable: true
          }), _defineProperty(_Object$create, kEnded, {
            value: stream._readableState.endEmitted,
            writable: true
          }), _defineProperty(_Object$create, kHandlePromise, {
            value: function value(resolve, reject) {
              var data = iterator[kStream].read();
              if (data) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                resolve(createIterResult(data, false));
              } else {
                iterator[kLastResolve] = resolve;
                iterator[kLastReject] = reject;
              }
            },
            writable: true
          }), _Object$create));
          iterator[kLastPromise] = null;
          finished(stream, function(err) {
            if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
              var reject = iterator[kLastReject];
              if (reject !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                reject(err);
              }
              iterator[kError] = err;
              return;
            }
            var resolve = iterator[kLastResolve];
            if (resolve !== null) {
              iterator[kLastPromise] = null;
              iterator[kLastResolve] = null;
              iterator[kLastReject] = null;
              resolve(createIterResult(void 0, true));
            }
            iterator[kEnded] = true;
          });
          stream.on("readable", onReadable.bind(null, iterator));
          return iterator;
        };
        module22.exports = createReadableStreamAsyncIterator;
      }
    });
    var require_from = __commonJS2({
      "node_modules/bl/node_modules/readable-stream/lib/internal/streams/from.js"(exports2, module22) {
        "use strict";
        function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
          try {
            var info = gen[key](arg);
            var value = info.value;
          } catch (error) {
            reject(error);
            return;
          }
          if (info.done) {
            resolve(value);
          } else {
            Promise.resolve(value).then(_next, _throw);
          }
        }
        function _asyncToGenerator(fn) {
          return function() {
            var self = this, args = arguments;
            return new Promise(function(resolve, reject) {
              var gen = fn.apply(self, args);
              function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
              }
              function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
              }
              _next(void 0);
            });
          };
        }
        function ownKeys(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly)
              symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            if (i % 2) {
              ownKeys(Object(source), true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        var ERR_INVALID_ARG_TYPE = require_errors().codes.ERR_INVALID_ARG_TYPE;
        function from(Readable, iterable, opts) {
          var iterator;
          if (iterable && typeof iterable.next === "function") {
            iterator = iterable;
          } else if (iterable && iterable[Symbol.asyncIterator])
            iterator = iterable[Symbol.asyncIterator]();
          else if (iterable && iterable[Symbol.iterator])
            iterator = iterable[Symbol.iterator]();
          else
            throw new ERR_INVALID_ARG_TYPE("iterable", ["Iterable"], iterable);
          var readable = new Readable(_objectSpread({
            objectMode: true
          }, opts));
          var reading = false;
          readable._read = function() {
            if (!reading) {
              reading = true;
              next();
            }
          };
          function next() {
            return _next2.apply(this, arguments);
          }
          function _next2() {
            _next2 = _asyncToGenerator(function* () {
              try {
                var _ref = yield iterator.next(), value = _ref.value, done = _ref.done;
                if (done) {
                  readable.push(null);
                } else if (readable.push(yield value)) {
                  next();
                } else {
                  reading = false;
                }
              } catch (err) {
                readable.destroy(err);
              }
            });
            return _next2.apply(this, arguments);
          }
          return readable;
        }
        module22.exports = from;
      }
    });
    var require_stream_readable = __commonJS2({
      "node_modules/bl/node_modules/readable-stream/lib/_stream_readable.js"(exports2, module22) {
        "use strict";
        module22.exports = Readable;
        var Duplex;
        Readable.ReadableState = ReadableState;
        var EE = require("events").EventEmitter;
        var EElistenerCount = function EElistenerCount2(emitter, type) {
          return emitter.listeners(type).length;
        };
        var Stream = require_stream();
        var Buffer2 = require("buffer").Buffer;
        var OurUint8Array = global.Uint8Array || function() {
        };
        function _uint8ArrayToBuffer(chunk) {
          return Buffer2.from(chunk);
        }
        function _isUint8Array(obj) {
          return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
        }
        var debugUtil = require("util");
        var debug4;
        if (debugUtil && debugUtil.debuglog) {
          debug4 = debugUtil.debuglog("stream");
        } else {
          debug4 = function debug5() {
          };
        }
        var BufferList = require_buffer_list();
        var destroyImpl = require_destroy();
        var _require = require_state();
        var getHighWaterMark = _require.getHighWaterMark;
        var _require$codes = require_errors().codes;
        var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
        var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
        var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
        var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
        var StringDecoder;
        var createReadableStreamAsyncIterator;
        var from;
        require_inherits()(Readable, Stream);
        var errorOrDestroy = destroyImpl.errorOrDestroy;
        var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
        function prependListener(emitter, event, fn) {
          if (typeof emitter.prependListener === "function")
            return emitter.prependListener(event, fn);
          if (!emitter._events || !emitter._events[event])
            emitter.on(event, fn);
          else if (Array.isArray(emitter._events[event]))
            emitter._events[event].unshift(fn);
          else
            emitter._events[event] = [fn, emitter._events[event]];
        }
        function ReadableState(options, stream, isDuplex) {
          Duplex = Duplex || require_stream_duplex();
          options = options || {};
          if (typeof isDuplex !== "boolean")
            isDuplex = stream instanceof Duplex;
          this.objectMode = !!options.objectMode;
          if (isDuplex)
            this.objectMode = this.objectMode || !!options.readableObjectMode;
          this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
          this.buffer = new BufferList();
          this.length = 0;
          this.pipes = null;
          this.pipesCount = 0;
          this.flowing = null;
          this.ended = false;
          this.endEmitted = false;
          this.reading = false;
          this.sync = true;
          this.needReadable = false;
          this.emittedReadable = false;
          this.readableListening = false;
          this.resumeScheduled = false;
          this.paused = true;
          this.emitClose = options.emitClose !== false;
          this.autoDestroy = !!options.autoDestroy;
          this.destroyed = false;
          this.defaultEncoding = options.defaultEncoding || "utf8";
          this.awaitDrain = 0;
          this.readingMore = false;
          this.decoder = null;
          this.encoding = null;
          if (options.encoding) {
            if (!StringDecoder)
              StringDecoder = require_string_decoder().StringDecoder;
            this.decoder = new StringDecoder(options.encoding);
            this.encoding = options.encoding;
          }
        }
        function Readable(options) {
          Duplex = Duplex || require_stream_duplex();
          if (!(this instanceof Readable))
            return new Readable(options);
          var isDuplex = this instanceof Duplex;
          this._readableState = new ReadableState(options, this, isDuplex);
          this.readable = true;
          if (options) {
            if (typeof options.read === "function")
              this._read = options.read;
            if (typeof options.destroy === "function")
              this._destroy = options.destroy;
          }
          Stream.call(this);
        }
        Object.defineProperty(Readable.prototype, "destroyed", {
          enumerable: false,
          get: function get() {
            if (this._readableState === void 0) {
              return false;
            }
            return this._readableState.destroyed;
          },
          set: function set(value) {
            if (!this._readableState) {
              return;
            }
            this._readableState.destroyed = value;
          }
        });
        Readable.prototype.destroy = destroyImpl.destroy;
        Readable.prototype._undestroy = destroyImpl.undestroy;
        Readable.prototype._destroy = function(err, cb) {
          cb(err);
        };
        Readable.prototype.push = function(chunk, encoding) {
          var state = this._readableState;
          var skipChunkCheck;
          if (!state.objectMode) {
            if (typeof chunk === "string") {
              encoding = encoding || state.defaultEncoding;
              if (encoding !== state.encoding) {
                chunk = Buffer2.from(chunk, encoding);
                encoding = "";
              }
              skipChunkCheck = true;
            }
          } else {
            skipChunkCheck = true;
          }
          return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
        };
        Readable.prototype.unshift = function(chunk) {
          return readableAddChunk(this, chunk, null, true, false);
        };
        function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
          debug4("readableAddChunk", chunk);
          var state = stream._readableState;
          if (chunk === null) {
            state.reading = false;
            onEofChunk(stream, state);
          } else {
            var er;
            if (!skipChunkCheck)
              er = chunkInvalid(state, chunk);
            if (er) {
              errorOrDestroy(stream, er);
            } else if (state.objectMode || chunk && chunk.length > 0) {
              if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
                chunk = _uint8ArrayToBuffer(chunk);
              }
              if (addToFront) {
                if (state.endEmitted)
                  errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else
                  addChunk(stream, state, chunk, true);
              } else if (state.ended) {
                errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
              } else if (state.destroyed) {
                return false;
              } else {
                state.reading = false;
                if (state.decoder && !encoding) {
                  chunk = state.decoder.write(chunk);
                  if (state.objectMode || chunk.length !== 0)
                    addChunk(stream, state, chunk, false);
                  else
                    maybeReadMore(stream, state);
                } else {
                  addChunk(stream, state, chunk, false);
                }
              }
            } else if (!addToFront) {
              state.reading = false;
              maybeReadMore(stream, state);
            }
          }
          return !state.ended && (state.length < state.highWaterMark || state.length === 0);
        }
        function addChunk(stream, state, chunk, addToFront) {
          if (state.flowing && state.length === 0 && !state.sync) {
            state.awaitDrain = 0;
            stream.emit("data", chunk);
          } else {
            state.length += state.objectMode ? 1 : chunk.length;
            if (addToFront)
              state.buffer.unshift(chunk);
            else
              state.buffer.push(chunk);
            if (state.needReadable)
              emitReadable(stream);
          }
          maybeReadMore(stream, state);
        }
        function chunkInvalid(state, chunk) {
          var er;
          if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
            er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
          }
          return er;
        }
        Readable.prototype.isPaused = function() {
          return this._readableState.flowing === false;
        };
        Readable.prototype.setEncoding = function(enc) {
          if (!StringDecoder)
            StringDecoder = require_string_decoder().StringDecoder;
          var decoder = new StringDecoder(enc);
          this._readableState.decoder = decoder;
          this._readableState.encoding = this._readableState.decoder.encoding;
          var p = this._readableState.buffer.head;
          var content = "";
          while (p !== null) {
            content += decoder.write(p.data);
            p = p.next;
          }
          this._readableState.buffer.clear();
          if (content !== "")
            this._readableState.buffer.push(content);
          this._readableState.length = content.length;
          return this;
        };
        var MAX_HWM = 1073741824;
        function computeNewHighWaterMark(n) {
          if (n >= MAX_HWM) {
            n = MAX_HWM;
          } else {
            n--;
            n |= n >>> 1;
            n |= n >>> 2;
            n |= n >>> 4;
            n |= n >>> 8;
            n |= n >>> 16;
            n++;
          }
          return n;
        }
        function howMuchToRead(n, state) {
          if (n <= 0 || state.length === 0 && state.ended)
            return 0;
          if (state.objectMode)
            return 1;
          if (n !== n) {
            if (state.flowing && state.length)
              return state.buffer.head.data.length;
            else
              return state.length;
          }
          if (n > state.highWaterMark)
            state.highWaterMark = computeNewHighWaterMark(n);
          if (n <= state.length)
            return n;
          if (!state.ended) {
            state.needReadable = true;
            return 0;
          }
          return state.length;
        }
        Readable.prototype.read = function(n) {
          debug4("read", n);
          n = parseInt(n, 10);
          var state = this._readableState;
          var nOrig = n;
          if (n !== 0)
            state.emittedReadable = false;
          if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
            debug4("read: emitReadable", state.length, state.ended);
            if (state.length === 0 && state.ended)
              endReadable(this);
            else
              emitReadable(this);
            return null;
          }
          n = howMuchToRead(n, state);
          if (n === 0 && state.ended) {
            if (state.length === 0)
              endReadable(this);
            return null;
          }
          var doRead = state.needReadable;
          debug4("need readable", doRead);
          if (state.length === 0 || state.length - n < state.highWaterMark) {
            doRead = true;
            debug4("length less than watermark", doRead);
          }
          if (state.ended || state.reading) {
            doRead = false;
            debug4("reading or ended", doRead);
          } else if (doRead) {
            debug4("do read");
            state.reading = true;
            state.sync = true;
            if (state.length === 0)
              state.needReadable = true;
            this._read(state.highWaterMark);
            state.sync = false;
            if (!state.reading)
              n = howMuchToRead(nOrig, state);
          }
          var ret;
          if (n > 0)
            ret = fromList(n, state);
          else
            ret = null;
          if (ret === null) {
            state.needReadable = state.length <= state.highWaterMark;
            n = 0;
          } else {
            state.length -= n;
            state.awaitDrain = 0;
          }
          if (state.length === 0) {
            if (!state.ended)
              state.needReadable = true;
            if (nOrig !== n && state.ended)
              endReadable(this);
          }
          if (ret !== null)
            this.emit("data", ret);
          return ret;
        };
        function onEofChunk(stream, state) {
          debug4("onEofChunk");
          if (state.ended)
            return;
          if (state.decoder) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) {
              state.buffer.push(chunk);
              state.length += state.objectMode ? 1 : chunk.length;
            }
          }
          state.ended = true;
          if (state.sync) {
            emitReadable(stream);
          } else {
            state.needReadable = false;
            if (!state.emittedReadable) {
              state.emittedReadable = true;
              emitReadable_(stream);
            }
          }
        }
        function emitReadable(stream) {
          var state = stream._readableState;
          debug4("emitReadable", state.needReadable, state.emittedReadable);
          state.needReadable = false;
          if (!state.emittedReadable) {
            debug4("emitReadable", state.flowing);
            state.emittedReadable = true;
            process.nextTick(emitReadable_, stream);
          }
        }
        function emitReadable_(stream) {
          var state = stream._readableState;
          debug4("emitReadable_", state.destroyed, state.length, state.ended);
          if (!state.destroyed && (state.length || state.ended)) {
            stream.emit("readable");
            state.emittedReadable = false;
          }
          state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
          flow(stream);
        }
        function maybeReadMore(stream, state) {
          if (!state.readingMore) {
            state.readingMore = true;
            process.nextTick(maybeReadMore_, stream, state);
          }
        }
        function maybeReadMore_(stream, state) {
          while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
            var len = state.length;
            debug4("maybeReadMore read 0");
            stream.read(0);
            if (len === state.length)
              break;
          }
          state.readingMore = false;
        }
        Readable.prototype._read = function(n) {
          errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
        };
        Readable.prototype.pipe = function(dest, pipeOpts) {
          var src = this;
          var state = this._readableState;
          switch (state.pipesCount) {
            case 0:
              state.pipes = dest;
              break;
            case 1:
              state.pipes = [state.pipes, dest];
              break;
            default:
              state.pipes.push(dest);
              break;
          }
          state.pipesCount += 1;
          debug4("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
          var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
          var endFn = doEnd ? onend : unpipe;
          if (state.endEmitted)
            process.nextTick(endFn);
          else
            src.once("end", endFn);
          dest.on("unpipe", onunpipe);
          function onunpipe(readable, unpipeInfo) {
            debug4("onunpipe");
            if (readable === src) {
              if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
              }
            }
          }
          function onend() {
            debug4("onend");
            dest.end();
          }
          var ondrain = pipeOnDrain(src);
          dest.on("drain", ondrain);
          var cleanedUp = false;
          function cleanup() {
            debug4("cleanup");
            dest.removeListener("close", onclose);
            dest.removeListener("finish", onfinish);
            dest.removeListener("drain", ondrain);
            dest.removeListener("error", onerror);
            dest.removeListener("unpipe", onunpipe);
            src.removeListener("end", onend);
            src.removeListener("end", unpipe);
            src.removeListener("data", ondata);
            cleanedUp = true;
            if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
              ondrain();
          }
          src.on("data", ondata);
          function ondata(chunk) {
            debug4("ondata");
            var ret = dest.write(chunk);
            debug4("dest.write", ret);
            if (ret === false) {
              if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug4("false write response, pause", state.awaitDrain);
                state.awaitDrain++;
              }
              src.pause();
            }
          }
          function onerror(er) {
            debug4("onerror", er);
            unpipe();
            dest.removeListener("error", onerror);
            if (EElistenerCount(dest, "error") === 0)
              errorOrDestroy(dest, er);
          }
          prependListener(dest, "error", onerror);
          function onclose() {
            dest.removeListener("finish", onfinish);
            unpipe();
          }
          dest.once("close", onclose);
          function onfinish() {
            debug4("onfinish");
            dest.removeListener("close", onclose);
            unpipe();
          }
          dest.once("finish", onfinish);
          function unpipe() {
            debug4("unpipe");
            src.unpipe(dest);
          }
          dest.emit("pipe", src);
          if (!state.flowing) {
            debug4("pipe resume");
            src.resume();
          }
          return dest;
        };
        function pipeOnDrain(src) {
          return function pipeOnDrainFunctionResult() {
            var state = src._readableState;
            debug4("pipeOnDrain", state.awaitDrain);
            if (state.awaitDrain)
              state.awaitDrain--;
            if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
              state.flowing = true;
              flow(src);
            }
          };
        }
        Readable.prototype.unpipe = function(dest) {
          var state = this._readableState;
          var unpipeInfo = {
            hasUnpiped: false
          };
          if (state.pipesCount === 0)
            return this;
          if (state.pipesCount === 1) {
            if (dest && dest !== state.pipes)
              return this;
            if (!dest)
              dest = state.pipes;
            state.pipes = null;
            state.pipesCount = 0;
            state.flowing = false;
            if (dest)
              dest.emit("unpipe", this, unpipeInfo);
            return this;
          }
          if (!dest) {
            var dests = state.pipes;
            var len = state.pipesCount;
            state.pipes = null;
            state.pipesCount = 0;
            state.flowing = false;
            for (var i = 0; i < len; i++) {
              dests[i].emit("unpipe", this, {
                hasUnpiped: false
              });
            }
            return this;
          }
          var index = indexOf(state.pipes, dest);
          if (index === -1)
            return this;
          state.pipes.splice(index, 1);
          state.pipesCount -= 1;
          if (state.pipesCount === 1)
            state.pipes = state.pipes[0];
          dest.emit("unpipe", this, unpipeInfo);
          return this;
        };
        Readable.prototype.on = function(ev, fn) {
          var res = Stream.prototype.on.call(this, ev, fn);
          var state = this._readableState;
          if (ev === "data") {
            state.readableListening = this.listenerCount("readable") > 0;
            if (state.flowing !== false)
              this.resume();
          } else if (ev === "readable") {
            if (!state.endEmitted && !state.readableListening) {
              state.readableListening = state.needReadable = true;
              state.flowing = false;
              state.emittedReadable = false;
              debug4("on readable", state.length, state.reading);
              if (state.length) {
                emitReadable(this);
              } else if (!state.reading) {
                process.nextTick(nReadingNextTick, this);
              }
            }
          }
          return res;
        };
        Readable.prototype.addListener = Readable.prototype.on;
        Readable.prototype.removeListener = function(ev, fn) {
          var res = Stream.prototype.removeListener.call(this, ev, fn);
          if (ev === "readable") {
            process.nextTick(updateReadableListening, this);
          }
          return res;
        };
        Readable.prototype.removeAllListeners = function(ev) {
          var res = Stream.prototype.removeAllListeners.apply(this, arguments);
          if (ev === "readable" || ev === void 0) {
            process.nextTick(updateReadableListening, this);
          }
          return res;
        };
        function updateReadableListening(self) {
          var state = self._readableState;
          state.readableListening = self.listenerCount("readable") > 0;
          if (state.resumeScheduled && !state.paused) {
            state.flowing = true;
          } else if (self.listenerCount("data") > 0) {
            self.resume();
          }
        }
        function nReadingNextTick(self) {
          debug4("readable nexttick read 0");
          self.read(0);
        }
        Readable.prototype.resume = function() {
          var state = this._readableState;
          if (!state.flowing) {
            debug4("resume");
            state.flowing = !state.readableListening;
            resume(this, state);
          }
          state.paused = false;
          return this;
        };
        function resume(stream, state) {
          if (!state.resumeScheduled) {
            state.resumeScheduled = true;
            process.nextTick(resume_, stream, state);
          }
        }
        function resume_(stream, state) {
          debug4("resume", state.reading);
          if (!state.reading) {
            stream.read(0);
          }
          state.resumeScheduled = false;
          stream.emit("resume");
          flow(stream);
          if (state.flowing && !state.reading)
            stream.read(0);
        }
        Readable.prototype.pause = function() {
          debug4("call pause flowing=%j", this._readableState.flowing);
          if (this._readableState.flowing !== false) {
            debug4("pause");
            this._readableState.flowing = false;
            this.emit("pause");
          }
          this._readableState.paused = true;
          return this;
        };
        function flow(stream) {
          var state = stream._readableState;
          debug4("flow", state.flowing);
          while (state.flowing && stream.read() !== null) {
            ;
          }
        }
        Readable.prototype.wrap = function(stream) {
          var _this = this;
          var state = this._readableState;
          var paused = false;
          stream.on("end", function() {
            debug4("wrapped end");
            if (state.decoder && !state.ended) {
              var chunk = state.decoder.end();
              if (chunk && chunk.length)
                _this.push(chunk);
            }
            _this.push(null);
          });
          stream.on("data", function(chunk) {
            debug4("wrapped data");
            if (state.decoder)
              chunk = state.decoder.write(chunk);
            if (state.objectMode && (chunk === null || chunk === void 0))
              return;
            else if (!state.objectMode && (!chunk || !chunk.length))
              return;
            var ret = _this.push(chunk);
            if (!ret) {
              paused = true;
              stream.pause();
            }
          });
          for (var i in stream) {
            if (this[i] === void 0 && typeof stream[i] === "function") {
              this[i] = function methodWrap(method) {
                return function methodWrapReturnFunction() {
                  return stream[method].apply(stream, arguments);
                };
              }(i);
            }
          }
          for (var n = 0; n < kProxyEvents.length; n++) {
            stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
          }
          this._read = function(n2) {
            debug4("wrapped _read", n2);
            if (paused) {
              paused = false;
              stream.resume();
            }
          };
          return this;
        };
        if (typeof Symbol === "function") {
          Readable.prototype[Symbol.asyncIterator] = function() {
            if (createReadableStreamAsyncIterator === void 0) {
              createReadableStreamAsyncIterator = require_async_iterator();
            }
            return createReadableStreamAsyncIterator(this);
          };
        }
        Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
          enumerable: false,
          get: function get() {
            return this._readableState.highWaterMark;
          }
        });
        Object.defineProperty(Readable.prototype, "readableBuffer", {
          enumerable: false,
          get: function get() {
            return this._readableState && this._readableState.buffer;
          }
        });
        Object.defineProperty(Readable.prototype, "readableFlowing", {
          enumerable: false,
          get: function get() {
            return this._readableState.flowing;
          },
          set: function set(state) {
            if (this._readableState) {
              this._readableState.flowing = state;
            }
          }
        });
        Readable._fromList = fromList;
        Object.defineProperty(Readable.prototype, "readableLength", {
          enumerable: false,
          get: function get() {
            return this._readableState.length;
          }
        });
        function fromList(n, state) {
          if (state.length === 0)
            return null;
          var ret;
          if (state.objectMode)
            ret = state.buffer.shift();
          else if (!n || n >= state.length) {
            if (state.decoder)
              ret = state.buffer.join("");
            else if (state.buffer.length === 1)
              ret = state.buffer.first();
            else
              ret = state.buffer.concat(state.length);
            state.buffer.clear();
          } else {
            ret = state.buffer.consume(n, state.decoder);
          }
          return ret;
        }
        function endReadable(stream) {
          var state = stream._readableState;
          debug4("endReadable", state.endEmitted);
          if (!state.endEmitted) {
            state.ended = true;
            process.nextTick(endReadableNT, state, stream);
          }
        }
        function endReadableNT(state, stream) {
          debug4("endReadableNT", state.endEmitted, state.length);
          if (!state.endEmitted && state.length === 0) {
            state.endEmitted = true;
            stream.readable = false;
            stream.emit("end");
            if (state.autoDestroy) {
              var wState = stream._writableState;
              if (!wState || wState.autoDestroy && wState.finished) {
                stream.destroy();
              }
            }
          }
        }
        if (typeof Symbol === "function") {
          Readable.from = function(iterable, opts) {
            if (from === void 0) {
              from = require_from();
            }
            return from(Readable, iterable, opts);
          };
        }
        function indexOf(xs, x) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (xs[i] === x)
              return i;
          }
          return -1;
        }
      }
    });
    var require_stream_transform = __commonJS2({
      "node_modules/bl/node_modules/readable-stream/lib/_stream_transform.js"(exports2, module22) {
        "use strict";
        module22.exports = Transform;
        var _require$codes = require_errors().codes;
        var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
        var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
        var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;
        var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
        var Duplex = require_stream_duplex();
        require_inherits()(Transform, Duplex);
        function afterTransform(er, data) {
          var ts = this._transformState;
          ts.transforming = false;
          var cb = ts.writecb;
          if (cb === null) {
            return this.emit("error", new ERR_MULTIPLE_CALLBACK());
          }
          ts.writechunk = null;
          ts.writecb = null;
          if (data != null)
            this.push(data);
          cb(er);
          var rs = this._readableState;
          rs.reading = false;
          if (rs.needReadable || rs.length < rs.highWaterMark) {
            this._read(rs.highWaterMark);
          }
        }
        function Transform(options) {
          if (!(this instanceof Transform))
            return new Transform(options);
          Duplex.call(this, options);
          this._transformState = {
            afterTransform: afterTransform.bind(this),
            needTransform: false,
            transforming: false,
            writecb: null,
            writechunk: null,
            writeencoding: null
          };
          this._readableState.needReadable = true;
          this._readableState.sync = false;
          if (options) {
            if (typeof options.transform === "function")
              this._transform = options.transform;
            if (typeof options.flush === "function")
              this._flush = options.flush;
          }
          this.on("prefinish", prefinish);
        }
        function prefinish() {
          var _this = this;
          if (typeof this._flush === "function" && !this._readableState.destroyed) {
            this._flush(function(er, data) {
              done(_this, er, data);
            });
          } else {
            done(this, null, null);
          }
        }
        Transform.prototype.push = function(chunk, encoding) {
          this._transformState.needTransform = false;
          return Duplex.prototype.push.call(this, chunk, encoding);
        };
        Transform.prototype._transform = function(chunk, encoding, cb) {
          cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
        };
        Transform.prototype._write = function(chunk, encoding, cb) {
          var ts = this._transformState;
          ts.writecb = cb;
          ts.writechunk = chunk;
          ts.writeencoding = encoding;
          if (!ts.transforming) {
            var rs = this._readableState;
            if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
              this._read(rs.highWaterMark);
          }
        };
        Transform.prototype._read = function(n) {
          var ts = this._transformState;
          if (ts.writechunk !== null && !ts.transforming) {
            ts.transforming = true;
            this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
          } else {
            ts.needTransform = true;
          }
        };
        Transform.prototype._destroy = function(err, cb) {
          Duplex.prototype._destroy.call(this, err, function(err2) {
            cb(err2);
          });
        };
        function done(stream, er, data) {
          if (er)
            return stream.emit("error", er);
          if (data != null)
            stream.push(data);
          if (stream._writableState.length)
            throw new ERR_TRANSFORM_WITH_LENGTH_0();
          if (stream._transformState.transforming)
            throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
          return stream.push(null);
        }
      }
    });
    var require_stream_passthrough = __commonJS2({
      "node_modules/bl/node_modules/readable-stream/lib/_stream_passthrough.js"(exports2, module22) {
        "use strict";
        module22.exports = PassThrough;
        var Transform = require_stream_transform();
        require_inherits()(PassThrough, Transform);
        function PassThrough(options) {
          if (!(this instanceof PassThrough))
            return new PassThrough(options);
          Transform.call(this, options);
        }
        PassThrough.prototype._transform = function(chunk, encoding, cb) {
          cb(null, chunk);
        };
      }
    });
    var require_pipeline = __commonJS2({
      "node_modules/bl/node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports2, module22) {
        "use strict";
        var eos;
        function once(callback) {
          var called = false;
          return function() {
            if (called)
              return;
            called = true;
            callback.apply(void 0, arguments);
          };
        }
        var _require$codes = require_errors().codes;
        var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
        var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
        function noop(err) {
          if (err)
            throw err;
        }
        function isRequest(stream) {
          return stream.setHeader && typeof stream.abort === "function";
        }
        function destroyer(stream, reading, writing, callback) {
          callback = once(callback);
          var closed = false;
          stream.on("close", function() {
            closed = true;
          });
          if (eos === void 0)
            eos = require_end_of_stream();
          eos(stream, {
            readable: reading,
            writable: writing
          }, function(err) {
            if (err)
              return callback(err);
            closed = true;
            callback();
          });
          var destroyed = false;
          return function(err) {
            if (closed)
              return;
            if (destroyed)
              return;
            destroyed = true;
            if (isRequest(stream))
              return stream.abort();
            if (typeof stream.destroy === "function")
              return stream.destroy();
            callback(err || new ERR_STREAM_DESTROYED("pipe"));
          };
        }
        function call(fn) {
          fn();
        }
        function pipe(from, to) {
          return from.pipe(to);
        }
        function popCallback(streams) {
          if (!streams.length)
            return noop;
          if (typeof streams[streams.length - 1] !== "function")
            return noop;
          return streams.pop();
        }
        function pipeline() {
          for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
            streams[_key] = arguments[_key];
          }
          var callback = popCallback(streams);
          if (Array.isArray(streams[0]))
            streams = streams[0];
          if (streams.length < 2) {
            throw new ERR_MISSING_ARGS("streams");
          }
          var error;
          var destroys = streams.map(function(stream, i) {
            var reading = i < streams.length - 1;
            var writing = i > 0;
            return destroyer(stream, reading, writing, function(err) {
              if (!error)
                error = err;
              if (err)
                destroys.forEach(call);
              if (reading)
                return;
              destroys.forEach(call);
              callback(error);
            });
          });
          return streams.reduce(pipe);
        }
        module22.exports = pipeline;
      }
    });
    var require_readable = __commonJS2({
      "node_modules/bl/node_modules/readable-stream/readable.js"(exports2, module22) {
        var Stream = require("stream");
        if (process.env.READABLE_STREAM === "disable" && Stream) {
          module22.exports = Stream.Readable;
          Object.assign(module22.exports, Stream);
          module22.exports.Stream = Stream;
        } else {
          exports2 = module22.exports = require_stream_readable();
          exports2.Stream = Stream || exports2;
          exports2.Readable = exports2;
          exports2.Writable = require_stream_writable();
          exports2.Duplex = require_stream_duplex();
          exports2.Transform = require_stream_transform();
          exports2.PassThrough = require_stream_passthrough();
          exports2.finished = require_end_of_stream();
          exports2.pipeline = require_pipeline();
        }
      }
    });
    var require_BufferList = __commonJS2({
      "node_modules/bl/BufferList.js"(exports2, module22) {
        "use strict";
        var { Buffer: Buffer2 } = require("buffer");
        var symbol = Symbol.for("BufferList");
        function BufferList(buf) {
          if (!(this instanceof BufferList)) {
            return new BufferList(buf);
          }
          BufferList._init.call(this, buf);
        }
        BufferList._init = function _init(buf) {
          Object.defineProperty(this, symbol, { value: true });
          this._bufs = [];
          this.length = 0;
          if (buf) {
            this.append(buf);
          }
        };
        BufferList.prototype._new = function _new(buf) {
          return new BufferList(buf);
        };
        BufferList.prototype._offset = function _offset(offset) {
          if (offset === 0) {
            return [0, 0];
          }
          let tot = 0;
          for (let i = 0; i < this._bufs.length; i++) {
            const _t = tot + this._bufs[i].length;
            if (offset < _t || i === this._bufs.length - 1) {
              return [i, offset - tot];
            }
            tot = _t;
          }
        };
        BufferList.prototype._reverseOffset = function(blOffset) {
          const bufferId = blOffset[0];
          let offset = blOffset[1];
          for (let i = 0; i < bufferId; i++) {
            offset += this._bufs[i].length;
          }
          return offset;
        };
        BufferList.prototype.get = function get(index) {
          if (index > this.length || index < 0) {
            return void 0;
          }
          const offset = this._offset(index);
          return this._bufs[offset[0]][offset[1]];
        };
        BufferList.prototype.slice = function slice(start, end) {
          if (typeof start === "number" && start < 0) {
            start += this.length;
          }
          if (typeof end === "number" && end < 0) {
            end += this.length;
          }
          return this.copy(null, 0, start, end);
        };
        BufferList.prototype.copy = function copy(dst, dstStart, srcStart, srcEnd) {
          if (typeof srcStart !== "number" || srcStart < 0) {
            srcStart = 0;
          }
          if (typeof srcEnd !== "number" || srcEnd > this.length) {
            srcEnd = this.length;
          }
          if (srcStart >= this.length) {
            return dst || Buffer2.alloc(0);
          }
          if (srcEnd <= 0) {
            return dst || Buffer2.alloc(0);
          }
          const copy2 = !!dst;
          const off = this._offset(srcStart);
          const len = srcEnd - srcStart;
          let bytes = len;
          let bufoff = copy2 && dstStart || 0;
          let start = off[1];
          if (srcStart === 0 && srcEnd === this.length) {
            if (!copy2) {
              return this._bufs.length === 1 ? this._bufs[0] : Buffer2.concat(this._bufs, this.length);
            }
            for (let i = 0; i < this._bufs.length; i++) {
              this._bufs[i].copy(dst, bufoff);
              bufoff += this._bufs[i].length;
            }
            return dst;
          }
          if (bytes <= this._bufs[off[0]].length - start) {
            return copy2 ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes) : this._bufs[off[0]].slice(start, start + bytes);
          }
          if (!copy2) {
            dst = Buffer2.allocUnsafe(len);
          }
          for (let i = off[0]; i < this._bufs.length; i++) {
            const l = this._bufs[i].length - start;
            if (bytes > l) {
              this._bufs[i].copy(dst, bufoff, start);
              bufoff += l;
            } else {
              this._bufs[i].copy(dst, bufoff, start, start + bytes);
              bufoff += l;
              break;
            }
            bytes -= l;
            if (start) {
              start = 0;
            }
          }
          if (dst.length > bufoff)
            return dst.slice(0, bufoff);
          return dst;
        };
        BufferList.prototype.shallowSlice = function shallowSlice(start, end) {
          start = start || 0;
          end = typeof end !== "number" ? this.length : end;
          if (start < 0) {
            start += this.length;
          }
          if (end < 0) {
            end += this.length;
          }
          if (start === end) {
            return this._new();
          }
          const startOffset = this._offset(start);
          const endOffset = this._offset(end);
          const buffers = this._bufs.slice(startOffset[0], endOffset[0] + 1);
          if (endOffset[1] === 0) {
            buffers.pop();
          } else {
            buffers[buffers.length - 1] = buffers[buffers.length - 1].slice(0, endOffset[1]);
          }
          if (startOffset[1] !== 0) {
            buffers[0] = buffers[0].slice(startOffset[1]);
          }
          return this._new(buffers);
        };
        BufferList.prototype.toString = function toString(encoding, start, end) {
          return this.slice(start, end).toString(encoding);
        };
        BufferList.prototype.consume = function consume(bytes) {
          bytes = Math.trunc(bytes);
          if (Number.isNaN(bytes) || bytes <= 0)
            return this;
          while (this._bufs.length) {
            if (bytes >= this._bufs[0].length) {
              bytes -= this._bufs[0].length;
              this.length -= this._bufs[0].length;
              this._bufs.shift();
            } else {
              this._bufs[0] = this._bufs[0].slice(bytes);
              this.length -= bytes;
              break;
            }
          }
          return this;
        };
        BufferList.prototype.duplicate = function duplicate() {
          const copy = this._new();
          for (let i = 0; i < this._bufs.length; i++) {
            copy.append(this._bufs[i]);
          }
          return copy;
        };
        BufferList.prototype.append = function append(buf) {
          if (buf == null) {
            return this;
          }
          if (buf.buffer) {
            this._appendBuffer(Buffer2.from(buf.buffer, buf.byteOffset, buf.byteLength));
          } else if (Array.isArray(buf)) {
            for (let i = 0; i < buf.length; i++) {
              this.append(buf[i]);
            }
          } else if (this._isBufferList(buf)) {
            for (let i = 0; i < buf._bufs.length; i++) {
              this.append(buf._bufs[i]);
            }
          } else {
            if (typeof buf === "number") {
              buf = buf.toString();
            }
            this._appendBuffer(Buffer2.from(buf));
          }
          return this;
        };
        BufferList.prototype._appendBuffer = function appendBuffer(buf) {
          this._bufs.push(buf);
          this.length += buf.length;
        };
        BufferList.prototype.indexOf = function(search, offset, encoding) {
          if (encoding === void 0 && typeof offset === "string") {
            encoding = offset;
            offset = void 0;
          }
          if (typeof search === "function" || Array.isArray(search)) {
            throw new TypeError('The "value" argument must be one of type string, Buffer, BufferList, or Uint8Array.');
          } else if (typeof search === "number") {
            search = Buffer2.from([search]);
          } else if (typeof search === "string") {
            search = Buffer2.from(search, encoding);
          } else if (this._isBufferList(search)) {
            search = search.slice();
          } else if (Array.isArray(search.buffer)) {
            search = Buffer2.from(search.buffer, search.byteOffset, search.byteLength);
          } else if (!Buffer2.isBuffer(search)) {
            search = Buffer2.from(search);
          }
          offset = Number(offset || 0);
          if (isNaN(offset)) {
            offset = 0;
          }
          if (offset < 0) {
            offset = this.length + offset;
          }
          if (offset < 0) {
            offset = 0;
          }
          if (search.length === 0) {
            return offset > this.length ? this.length : offset;
          }
          const blOffset = this._offset(offset);
          let blIndex = blOffset[0];
          let buffOffset = blOffset[1];
          for (; blIndex < this._bufs.length; blIndex++) {
            const buff = this._bufs[blIndex];
            while (buffOffset < buff.length) {
              const availableWindow = buff.length - buffOffset;
              if (availableWindow >= search.length) {
                const nativeSearchResult = buff.indexOf(search, buffOffset);
                if (nativeSearchResult !== -1) {
                  return this._reverseOffset([blIndex, nativeSearchResult]);
                }
                buffOffset = buff.length - search.length + 1;
              } else {
                const revOffset = this._reverseOffset([blIndex, buffOffset]);
                if (this._match(revOffset, search)) {
                  return revOffset;
                }
                buffOffset++;
              }
            }
            buffOffset = 0;
          }
          return -1;
        };
        BufferList.prototype._match = function(offset, search) {
          if (this.length - offset < search.length) {
            return false;
          }
          for (let searchOffset = 0; searchOffset < search.length; searchOffset++) {
            if (this.get(offset + searchOffset) !== search[searchOffset]) {
              return false;
            }
          }
          return true;
        };
        (function() {
          const methods = {
            readDoubleBE: 8,
            readDoubleLE: 8,
            readFloatBE: 4,
            readFloatLE: 4,
            readInt32BE: 4,
            readInt32LE: 4,
            readUInt32BE: 4,
            readUInt32LE: 4,
            readInt16BE: 2,
            readInt16LE: 2,
            readUInt16BE: 2,
            readUInt16LE: 2,
            readInt8: 1,
            readUInt8: 1,
            readIntBE: null,
            readIntLE: null,
            readUIntBE: null,
            readUIntLE: null
          };
          for (const m in methods) {
            (function(m2) {
              if (methods[m2] === null) {
                BufferList.prototype[m2] = function(offset, byteLength) {
                  return this.slice(offset, offset + byteLength)[m2](0, byteLength);
                };
              } else {
                BufferList.prototype[m2] = function(offset = 0) {
                  return this.slice(offset, offset + methods[m2])[m2](0);
                };
              }
            })(m);
          }
        })();
        BufferList.prototype._isBufferList = function _isBufferList(b) {
          return b instanceof BufferList || BufferList.isBufferList(b);
        };
        BufferList.isBufferList = function isBufferList(b) {
          return b != null && b[symbol];
        };
        module22.exports = BufferList;
      }
    });
    var require_bl = __commonJS2({
      "node_modules/bl/bl.js"(exports2, module22) {
        "use strict";
        var DuplexStream = require_readable().Duplex;
        var inherits = require_inherits();
        var BufferList = require_BufferList();
        function BufferListStream(callback) {
          if (!(this instanceof BufferListStream)) {
            return new BufferListStream(callback);
          }
          if (typeof callback === "function") {
            this._callback = callback;
            const piper = function piper2(err) {
              if (this._callback) {
                this._callback(err);
                this._callback = null;
              }
            }.bind(this);
            this.on("pipe", function onPipe(src) {
              src.on("error", piper);
            });
            this.on("unpipe", function onUnpipe(src) {
              src.removeListener("error", piper);
            });
            callback = null;
          }
          BufferList._init.call(this, callback);
          DuplexStream.call(this);
        }
        inherits(BufferListStream, DuplexStream);
        Object.assign(BufferListStream.prototype, BufferList.prototype);
        BufferListStream.prototype._new = function _new(callback) {
          return new BufferListStream(callback);
        };
        BufferListStream.prototype._write = function _write(buf, encoding, callback) {
          this._appendBuffer(buf);
          if (typeof callback === "function") {
            callback();
          }
        };
        BufferListStream.prototype._read = function _read(size) {
          if (!this.length) {
            return this.push(null);
          }
          size = Math.min(size, this.length);
          this.push(this.slice(0, size));
          this.consume(size);
        };
        BufferListStream.prototype.end = function end(chunk) {
          DuplexStream.prototype.end.call(this, chunk);
          if (this._callback) {
            this._callback(null, this.slice());
            this._callback = null;
          }
        };
        BufferListStream.prototype._destroy = function _destroy(err, cb) {
          this._bufs.length = 0;
          this.length = 0;
          cb(err);
        };
        BufferListStream.prototype._isBufferList = function _isBufferList(b) {
          return b instanceof BufferListStream || b instanceof BufferList || BufferListStream.isBufferList(b);
        };
        BufferListStream.isBufferList = BufferList.isBufferList;
        module22.exports = BufferListStream;
        module22.exports.BufferListStream = BufferListStream;
        module22.exports.BufferList = BufferList;
      }
    });
    var require_ora = __commonJS2({
      "node_modules/ora/index.js"(exports2, module22) {
        "use strict";
        var readline = require("readline");
        var chalk = require_source();
        var cliCursor = require_cli_cursor();
        var cliSpinners = require_cli_spinners();
        var logSymbols = require_log_symbols();
        var stripAnsi = require_strip_ansi();
        var wcwidth = require_wcwidth();
        var isInteractive = require_is_interactive();
        var isUnicodeSupported = require_is_unicode_supported();
        var { BufferListStream } = require_bl();
        var TEXT = Symbol("text");
        var PREFIX_TEXT = Symbol("prefixText");
        var ASCII_ETX_CODE = 3;
        var StdinDiscarder = class {
          constructor() {
            this.requests = 0;
            this.mutedStream = new BufferListStream();
            this.mutedStream.pipe(process.stdout);
            const self = this;
            this.ourEmit = function(event, data, ...args) {
              const { stdin } = process;
              if (self.requests > 0 || stdin.emit === self.ourEmit) {
                if (event === "keypress") {
                  return;
                }
                if (event === "data" && data.includes(ASCII_ETX_CODE)) {
                  process.emit("SIGINT");
                }
                Reflect.apply(self.oldEmit, this, [event, data, ...args]);
              } else {
                Reflect.apply(process.stdin.emit, this, [event, data, ...args]);
              }
            };
          }
          start() {
            this.requests++;
            if (this.requests === 1) {
              this.realStart();
            }
          }
          stop() {
            if (this.requests <= 0) {
              throw new Error("`stop` called more times than `start`");
            }
            this.requests--;
            if (this.requests === 0) {
              this.realStop();
            }
          }
          realStart() {
            if (process.platform === "win32") {
              return;
            }
            this.rl = readline.createInterface({
              input: process.stdin,
              output: this.mutedStream
            });
            this.rl.on("SIGINT", () => {
              if (process.listenerCount("SIGINT") === 0) {
                process.emit("SIGINT");
              } else {
                this.rl.close();
                process.kill(process.pid, "SIGINT");
              }
            });
          }
          realStop() {
            if (process.platform === "win32") {
              return;
            }
            this.rl.close();
            this.rl = void 0;
          }
        };
        var stdinDiscarder;
        var Ora = class {
          constructor(options) {
            if (!stdinDiscarder) {
              stdinDiscarder = new StdinDiscarder();
            }
            if (typeof options === "string") {
              options = {
                text: options
              };
            }
            this.options = __spreadValues({
              text: "",
              color: "cyan",
              stream: process.stderr,
              discardStdin: true
            }, options);
            this.spinner = this.options.spinner;
            this.color = this.options.color;
            this.hideCursor = this.options.hideCursor !== false;
            this.interval = this.options.interval || this.spinner.interval || 100;
            this.stream = this.options.stream;
            this.id = void 0;
            this.isEnabled = typeof this.options.isEnabled === "boolean" ? this.options.isEnabled : isInteractive({ stream: this.stream });
            this.isSilent = typeof this.options.isSilent === "boolean" ? this.options.isSilent : false;
            this.text = this.options.text;
            this.prefixText = this.options.prefixText;
            this.linesToClear = 0;
            this.indent = this.options.indent;
            this.discardStdin = this.options.discardStdin;
            this.isDiscardingStdin = false;
          }
          get indent() {
            return this._indent;
          }
          set indent(indent = 0) {
            if (!(indent >= 0 && Number.isInteger(indent))) {
              throw new Error("The `indent` option must be an integer from 0 and up");
            }
            this._indent = indent;
          }
          _updateInterval(interval) {
            if (interval !== void 0) {
              this.interval = interval;
            }
          }
          get spinner() {
            return this._spinner;
          }
          set spinner(spinner) {
            this.frameIndex = 0;
            if (typeof spinner === "object") {
              if (spinner.frames === void 0) {
                throw new Error("The given spinner must have a `frames` property");
              }
              this._spinner = spinner;
            } else if (!isUnicodeSupported()) {
              this._spinner = cliSpinners.line;
            } else if (spinner === void 0) {
              this._spinner = cliSpinners.dots;
            } else if (spinner !== "default" && cliSpinners[spinner]) {
              this._spinner = cliSpinners[spinner];
            } else {
              throw new Error(`There is no built-in spinner named '${spinner}'. See https://github.com/sindresorhus/cli-spinners/blob/main/spinners.json for a full list.`);
            }
            this._updateInterval(this._spinner.interval);
          }
          get text() {
            return this[TEXT];
          }
          set text(value) {
            this[TEXT] = value;
            this.updateLineCount();
          }
          get prefixText() {
            return this[PREFIX_TEXT];
          }
          set prefixText(value) {
            this[PREFIX_TEXT] = value;
            this.updateLineCount();
          }
          get isSpinning() {
            return this.id !== void 0;
          }
          getFullPrefixText(prefixText = this[PREFIX_TEXT], postfix = " ") {
            if (typeof prefixText === "string") {
              return prefixText + postfix;
            }
            if (typeof prefixText === "function") {
              return prefixText() + postfix;
            }
            return "";
          }
          updateLineCount() {
            const columns = this.stream.columns || 80;
            const fullPrefixText = this.getFullPrefixText(this.prefixText, "-");
            this.lineCount = 0;
            for (const line of stripAnsi(fullPrefixText + "--" + this[TEXT]).split("\n")) {
              this.lineCount += Math.max(1, Math.ceil(wcwidth(line) / columns));
            }
          }
          get isEnabled() {
            return this._isEnabled && !this.isSilent;
          }
          set isEnabled(value) {
            if (typeof value !== "boolean") {
              throw new TypeError("The `isEnabled` option must be a boolean");
            }
            this._isEnabled = value;
          }
          get isSilent() {
            return this._isSilent;
          }
          set isSilent(value) {
            if (typeof value !== "boolean") {
              throw new TypeError("The `isSilent` option must be a boolean");
            }
            this._isSilent = value;
          }
          frame() {
            const { frames } = this.spinner;
            let frame = frames[this.frameIndex];
            if (this.color) {
              frame = chalk[this.color](frame);
            }
            this.frameIndex = ++this.frameIndex % frames.length;
            const fullPrefixText = typeof this.prefixText === "string" && this.prefixText !== "" ? this.prefixText + " " : "";
            const fullText = typeof this.text === "string" ? " " + this.text : "";
            return fullPrefixText + frame + fullText;
          }
          clear() {
            if (!this.isEnabled || !this.stream.isTTY) {
              return this;
            }
            for (let i = 0; i < this.linesToClear; i++) {
              if (i > 0) {
                this.stream.moveCursor(0, -1);
              }
              this.stream.clearLine();
              this.stream.cursorTo(this.indent);
            }
            this.linesToClear = 0;
            return this;
          }
          render() {
            if (this.isSilent) {
              return this;
            }
            this.clear();
            this.stream.write(this.frame());
            this.linesToClear = this.lineCount;
            return this;
          }
          start(text) {
            if (text) {
              this.text = text;
            }
            if (this.isSilent) {
              return this;
            }
            if (!this.isEnabled) {
              if (this.text) {
                this.stream.write(`- ${this.text}
`);
              }
              return this;
            }
            if (this.isSpinning) {
              return this;
            }
            if (this.hideCursor) {
              cliCursor.hide(this.stream);
            }
            if (this.discardStdin && process.stdin.isTTY) {
              this.isDiscardingStdin = true;
              stdinDiscarder.start();
            }
            this.render();
            this.id = setInterval(this.render.bind(this), this.interval);
            return this;
          }
          stop() {
            if (!this.isEnabled) {
              return this;
            }
            clearInterval(this.id);
            this.id = void 0;
            this.frameIndex = 0;
            this.clear();
            if (this.hideCursor) {
              cliCursor.show(this.stream);
            }
            if (this.discardStdin && process.stdin.isTTY && this.isDiscardingStdin) {
              stdinDiscarder.stop();
              this.isDiscardingStdin = false;
            }
            return this;
          }
          succeed(text) {
            return this.stopAndPersist({ symbol: logSymbols.success, text });
          }
          fail(text) {
            return this.stopAndPersist({ symbol: logSymbols.error, text });
          }
          warn(text) {
            return this.stopAndPersist({ symbol: logSymbols.warning, text });
          }
          info(text) {
            return this.stopAndPersist({ symbol: logSymbols.info, text });
          }
          stopAndPersist(options = {}) {
            if (this.isSilent) {
              return this;
            }
            const prefixText = options.prefixText || this.prefixText;
            const text = options.text || this.text;
            const fullText = typeof text === "string" ? " " + text : "";
            this.stop();
            this.stream.write(`${this.getFullPrefixText(prefixText, " ")}${options.symbol || " "}${fullText}
`);
            return this;
          }
        };
        var oraFactory = function(options) {
          return new Ora(options);
        };
        module22.exports = oraFactory;
        module22.exports.promise = (action, options) => {
          if (typeof action.then !== "function") {
            throw new TypeError("Parameter `action` must be a Promise");
          }
          const spinner = new Ora(options);
          spinner.start();
          (async () => {
            try {
              await action;
              spinner.succeed();
            } catch {
              spinner.fail();
            }
          })();
          return spinner;
        };
      }
    });
    var require_dist_node = __commonJS2({
      "node_modules/universal-user-agent/dist-node/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        function getUserAgent() {
          if (typeof navigator === "object" && "userAgent" in navigator) {
            return navigator.userAgent;
          }
          if (typeof process === "object" && "version" in process) {
            return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
          }
          return "<environment undetectable>";
        }
        exports2.getUserAgent = getUserAgent;
      }
    });
    var require_register = __commonJS2({
      "node_modules/before-after-hook/lib/register.js"(exports2, module22) {
        module22.exports = register;
        function register(state, name2, method, options) {
          if (typeof method !== "function") {
            throw new Error("method for before hook must be a function");
          }
          if (!options) {
            options = {};
          }
          if (Array.isArray(name2)) {
            return name2.reverse().reduce(function(callback, name3) {
              return register.bind(null, state, name3, callback, options);
            }, method)();
          }
          return Promise.resolve().then(function() {
            if (!state.registry[name2]) {
              return method(options);
            }
            return state.registry[name2].reduce(function(method2, registered) {
              return registered.hook.bind(null, method2, options);
            }, method)();
          });
        }
      }
    });
    var require_add = __commonJS2({
      "node_modules/before-after-hook/lib/add.js"(exports2, module22) {
        module22.exports = addHook;
        function addHook(state, kind, name2, hook) {
          var orig = hook;
          if (!state.registry[name2]) {
            state.registry[name2] = [];
          }
          if (kind === "before") {
            hook = function(method, options) {
              return Promise.resolve().then(orig.bind(null, options)).then(method.bind(null, options));
            };
          }
          if (kind === "after") {
            hook = function(method, options) {
              var result;
              return Promise.resolve().then(method.bind(null, options)).then(function(result_) {
                result = result_;
                return orig(result, options);
              }).then(function() {
                return result;
              });
            };
          }
          if (kind === "error") {
            hook = function(method, options) {
              return Promise.resolve().then(method.bind(null, options)).catch(function(error) {
                return orig(error, options);
              });
            };
          }
          state.registry[name2].push({
            hook,
            orig
          });
        }
      }
    });
    var require_remove = __commonJS2({
      "node_modules/before-after-hook/lib/remove.js"(exports2, module22) {
        module22.exports = removeHook;
        function removeHook(state, name2, method) {
          if (!state.registry[name2]) {
            return;
          }
          var index = state.registry[name2].map(function(registered) {
            return registered.orig;
          }).indexOf(method);
          if (index === -1) {
            return;
          }
          state.registry[name2].splice(index, 1);
        }
      }
    });
    var require_before_after_hook = __commonJS2({
      "node_modules/before-after-hook/index.js"(exports2, module22) {
        var register = require_register();
        var addHook = require_add();
        var removeHook = require_remove();
        var bind = Function.bind;
        var bindable = bind.bind(bind);
        function bindApi(hook, state, name2) {
          var removeHookRef = bindable(removeHook, null).apply(null, name2 ? [state, name2] : [state]);
          hook.api = { remove: removeHookRef };
          hook.remove = removeHookRef;
          ["before", "error", "after", "wrap"].forEach(function(kind) {
            var args = name2 ? [state, kind, name2] : [state, kind];
            hook[kind] = hook.api[kind] = bindable(addHook, null).apply(null, args);
          });
        }
        function HookSingular() {
          var singularHookName = "h";
          var singularHookState = {
            registry: {}
          };
          var singularHook = register.bind(null, singularHookState, singularHookName);
          bindApi(singularHook, singularHookState, singularHookName);
          return singularHook;
        }
        function HookCollection() {
          var state = {
            registry: {}
          };
          var hook = register.bind(null, state);
          bindApi(hook, state);
          return hook;
        }
        var collectionHookDeprecationMessageDisplayed = false;
        function Hook() {
          if (!collectionHookDeprecationMessageDisplayed) {
            console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4');
            collectionHookDeprecationMessageDisplayed = true;
          }
          return HookCollection();
        }
        Hook.Singular = HookSingular.bind();
        Hook.Collection = HookCollection.bind();
        module22.exports = Hook;
        module22.exports.Hook = Hook;
        module22.exports.Singular = Hook.Singular;
        module22.exports.Collection = Hook.Collection;
      }
    });
    var require_index_cjs = __commonJS2({
      "node_modules/@octokit/request/node_modules/@octokit/endpoint/node_modules/is-plain-object/index.cjs.js"(exports2, module22) {
        "use strict";
        function isObject2(o) {
          return Object.prototype.toString.call(o) === "[object Object]";
        }
        function isPlainObject(o) {
          var ctor, prot;
          if (isObject2(o) === false)
            return false;
          ctor = o.constructor;
          if (ctor === void 0)
            return true;
          prot = ctor.prototype;
          if (isObject2(prot) === false)
            return false;
          if (prot.hasOwnProperty("isPrototypeOf") === false) {
            return false;
          }
          return true;
        }
        module22.exports = isPlainObject;
      }
    });
    var require_dist_node2 = __commonJS2({
      "node_modules/@octokit/request/node_modules/@octokit/endpoint/dist-node/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        function _interopDefault(ex) {
          return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
        }
        var isPlainObject = _interopDefault(require_index_cjs());
        var universalUserAgent = require_dist_node();
        function lowercaseKeys(object) {
          if (!object) {
            return {};
          }
          return Object.keys(object).reduce((newObj, key) => {
            newObj[key.toLowerCase()] = object[key];
            return newObj;
          }, {});
        }
        function mergeDeep(defaults, options) {
          const result = Object.assign({}, defaults);
          Object.keys(options).forEach((key) => {
            if (isPlainObject(options[key])) {
              if (!(key in defaults))
                Object.assign(result, {
                  [key]: options[key]
                });
              else
                result[key] = mergeDeep(defaults[key], options[key]);
            } else {
              Object.assign(result, {
                [key]: options[key]
              });
            }
          });
          return result;
        }
        function merge(defaults, route, options) {
          if (typeof route === "string") {
            let [method, url] = route.split(" ");
            options = Object.assign(url ? {
              method,
              url
            } : {
              url: method
            }, options);
          } else {
            options = Object.assign({}, route);
          }
          options.headers = lowercaseKeys(options.headers);
          const mergedOptions = mergeDeep(defaults || {}, options);
          if (defaults && defaults.mediaType.previews.length) {
            mergedOptions.mediaType.previews = defaults.mediaType.previews.filter((preview) => !mergedOptions.mediaType.previews.includes(preview)).concat(mergedOptions.mediaType.previews);
          }
          mergedOptions.mediaType.previews = mergedOptions.mediaType.previews.map((preview) => preview.replace(/-preview/, ""));
          return mergedOptions;
        }
        function addQueryParameters(url, parameters) {
          const separator = /\?/.test(url) ? "&" : "?";
          const names = Object.keys(parameters);
          if (names.length === 0) {
            return url;
          }
          return url + separator + names.map((name2) => {
            if (name2 === "q") {
              return "q=" + parameters.q.split("+").map(encodeURIComponent).join("+");
            }
            return `${name2}=${encodeURIComponent(parameters[name2])}`;
          }).join("&");
        }
        var urlVariableRegex = /\{[^}]+\}/g;
        function removeNonChars(variableName) {
          return variableName.replace(/^\W+|\W+$/g, "").split(/,/);
        }
        function extractUrlVariableNames(url) {
          const matches = url.match(urlVariableRegex);
          if (!matches) {
            return [];
          }
          return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);
        }
        function omit(object, keysToOmit) {
          return Object.keys(object).filter((option) => !keysToOmit.includes(option)).reduce((obj, key) => {
            obj[key] = object[key];
            return obj;
          }, {});
        }
        function encodeReserved(str) {
          return str.split(/(%[0-9A-Fa-f]{2})/g).map(function(part) {
            if (!/%[0-9A-Fa-f]/.test(part)) {
              part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
            }
            return part;
          }).join("");
        }
        function encodeUnreserved(str) {
          return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
            return "%" + c.charCodeAt(0).toString(16).toUpperCase();
          });
        }
        function encodeValue(operator, value, key) {
          value = operator === "+" || operator === "#" ? encodeReserved(value) : encodeUnreserved(value);
          if (key) {
            return encodeUnreserved(key) + "=" + value;
          } else {
            return value;
          }
        }
        function isDefined(value) {
          return value !== void 0 && value !== null;
        }
        function isKeyOperator(operator) {
          return operator === ";" || operator === "&" || operator === "?";
        }
        function getValues(context, operator, key, modifier) {
          var value = context[key], result = [];
          if (isDefined(value) && value !== "") {
            if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
              value = value.toString();
              if (modifier && modifier !== "*") {
                value = value.substring(0, parseInt(modifier, 10));
              }
              result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : ""));
            } else {
              if (modifier === "*") {
                if (Array.isArray(value)) {
                  value.filter(isDefined).forEach(function(value2) {
                    result.push(encodeValue(operator, value2, isKeyOperator(operator) ? key : ""));
                  });
                } else {
                  Object.keys(value).forEach(function(k) {
                    if (isDefined(value[k])) {
                      result.push(encodeValue(operator, value[k], k));
                    }
                  });
                }
              } else {
                const tmp = [];
                if (Array.isArray(value)) {
                  value.filter(isDefined).forEach(function(value2) {
                    tmp.push(encodeValue(operator, value2));
                  });
                } else {
                  Object.keys(value).forEach(function(k) {
                    if (isDefined(value[k])) {
                      tmp.push(encodeUnreserved(k));
                      tmp.push(encodeValue(operator, value[k].toString()));
                    }
                  });
                }
                if (isKeyOperator(operator)) {
                  result.push(encodeUnreserved(key) + "=" + tmp.join(","));
                } else if (tmp.length !== 0) {
                  result.push(tmp.join(","));
                }
              }
            }
          } else {
            if (operator === ";") {
              if (isDefined(value)) {
                result.push(encodeUnreserved(key));
              }
            } else if (value === "" && (operator === "&" || operator === "?")) {
              result.push(encodeUnreserved(key) + "=");
            } else if (value === "") {
              result.push("");
            }
          }
          return result;
        }
        function parseUrl(template) {
          return {
            expand: expand.bind(null, template)
          };
        }
        function expand(template, context) {
          var operators = ["+", "#", ".", "/", ";", "?", "&"];
          return template.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function(_, expression, literal) {
            if (expression) {
              let operator = "";
              const values = [];
              if (operators.indexOf(expression.charAt(0)) !== -1) {
                operator = expression.charAt(0);
                expression = expression.substr(1);
              }
              expression.split(/,/g).forEach(function(variable) {
                var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
                values.push(getValues(context, operator, tmp[1], tmp[2] || tmp[3]));
              });
              if (operator && operator !== "+") {
                var separator = ",";
                if (operator === "?") {
                  separator = "&";
                } else if (operator !== "#") {
                  separator = operator;
                }
                return (values.length !== 0 ? operator : "") + values.join(separator);
              } else {
                return values.join(",");
              }
            } else {
              return encodeReserved(literal);
            }
          });
        }
        function parse2(options) {
          let method = options.method.toUpperCase();
          let url = (options.url || "/").replace(/:([a-z]\w+)/g, "{+$1}");
          let headers = Object.assign({}, options.headers);
          let body;
          let parameters = omit(options, ["method", "baseUrl", "url", "headers", "request", "mediaType"]);
          const urlVariableNames = extractUrlVariableNames(url);
          url = parseUrl(url).expand(parameters);
          if (!/^http/.test(url)) {
            url = options.baseUrl + url;
          }
          const omittedParameters = Object.keys(options).filter((option) => urlVariableNames.includes(option)).concat("baseUrl");
          const remainingParameters = omit(parameters, omittedParameters);
          const isBinaryRequset = /application\/octet-stream/i.test(headers.accept);
          if (!isBinaryRequset) {
            if (options.mediaType.format) {
              headers.accept = headers.accept.split(/,/).map((preview) => preview.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/, `application/vnd$1$2.${options.mediaType.format}`)).join(",");
            }
            if (options.mediaType.previews.length) {
              const previewsFromAcceptHeader = headers.accept.match(/[\w-]+(?=-preview)/g) || [];
              headers.accept = previewsFromAcceptHeader.concat(options.mediaType.previews).map((preview) => {
                const format = options.mediaType.format ? `.${options.mediaType.format}` : "+json";
                return `application/vnd.github.${preview}-preview${format}`;
              }).join(",");
            }
          }
          if (["GET", "HEAD"].includes(method)) {
            url = addQueryParameters(url, remainingParameters);
          } else {
            if ("data" in remainingParameters) {
              body = remainingParameters.data;
            } else {
              if (Object.keys(remainingParameters).length) {
                body = remainingParameters;
              } else {
                headers["content-length"] = 0;
              }
            }
          }
          if (!headers["content-type"] && typeof body !== "undefined") {
            headers["content-type"] = "application/json; charset=utf-8";
          }
          if (["PATCH", "PUT"].includes(method) && typeof body === "undefined") {
            body = "";
          }
          return Object.assign({
            method,
            url,
            headers
          }, typeof body !== "undefined" ? {
            body
          } : null, options.request ? {
            request: options.request
          } : null);
        }
        function endpointWithDefaults(defaults, route, options) {
          return parse2(merge(defaults, route, options));
        }
        function withDefaults(oldDefaults, newDefaults) {
          const DEFAULTS2 = merge(oldDefaults, newDefaults);
          const endpoint2 = endpointWithDefaults.bind(null, DEFAULTS2);
          return Object.assign(endpoint2, {
            DEFAULTS: DEFAULTS2,
            defaults: withDefaults.bind(null, DEFAULTS2),
            merge: merge.bind(null, DEFAULTS2),
            parse: parse2
          });
        }
        var VERSION = "6.0.5";
        var userAgent = `octokit-endpoint.js/${VERSION} ${universalUserAgent.getUserAgent()}`;
        var DEFAULTS = {
          method: "GET",
          baseUrl: "https://api.github.com",
          headers: {
            accept: "application/vnd.github.v3+json",
            "user-agent": userAgent
          },
          mediaType: {
            format: "",
            previews: []
          }
        };
        var endpoint = withDefaults(null, DEFAULTS);
        exports2.endpoint = endpoint;
      }
    });
    var require_is_plain_object = __commonJS2({
      "node_modules/@octokit/request/node_modules/is-plain-object/dist/is-plain-object.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        function isObject2(o) {
          return Object.prototype.toString.call(o) === "[object Object]";
        }
        function isPlainObject(o) {
          var ctor, prot;
          if (isObject2(o) === false)
            return false;
          ctor = o.constructor;
          if (ctor === void 0)
            return true;
          prot = ctor.prototype;
          if (isObject2(prot) === false)
            return false;
          if (prot.hasOwnProperty("isPrototypeOf") === false) {
            return false;
          }
          return true;
        }
        exports2.isPlainObject = isPlainObject;
      }
    });
    var require_lib2 = __commonJS2({
      "node_modules/node-fetch/node_modules/webidl-conversions/lib/index.js"(exports2, module22) {
        "use strict";
        var conversions = {};
        module22.exports = conversions;
        function sign(x) {
          return x < 0 ? -1 : 1;
        }
        function evenRound(x) {
          if (x % 1 === 0.5 && (x & 1) === 0) {
            return Math.floor(x);
          } else {
            return Math.round(x);
          }
        }
        function createNumberConversion(bitLength, typeOpts) {
          if (!typeOpts.unsigned) {
            --bitLength;
          }
          const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);
          const upperBound = Math.pow(2, bitLength) - 1;
          const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);
          const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);
          return function(V, opts) {
            if (!opts)
              opts = {};
            let x = +V;
            if (opts.enforceRange) {
              if (!Number.isFinite(x)) {
                throw new TypeError("Argument is not a finite number");
              }
              x = sign(x) * Math.floor(Math.abs(x));
              if (x < lowerBound || x > upperBound) {
                throw new TypeError("Argument is not in byte range");
              }
              return x;
            }
            if (!isNaN(x) && opts.clamp) {
              x = evenRound(x);
              if (x < lowerBound)
                x = lowerBound;
              if (x > upperBound)
                x = upperBound;
              return x;
            }
            if (!Number.isFinite(x) || x === 0) {
              return 0;
            }
            x = sign(x) * Math.floor(Math.abs(x));
            x = x % moduloVal;
            if (!typeOpts.unsigned && x >= moduloBound) {
              return x - moduloVal;
            } else if (typeOpts.unsigned) {
              if (x < 0) {
                x += moduloVal;
              } else if (x === -0) {
                return 0;
              }
            }
            return x;
          };
        }
        conversions["void"] = function() {
          return void 0;
        };
        conversions["boolean"] = function(val) {
          return !!val;
        };
        conversions["byte"] = createNumberConversion(8, { unsigned: false });
        conversions["octet"] = createNumberConversion(8, { unsigned: true });
        conversions["short"] = createNumberConversion(16, { unsigned: false });
        conversions["unsigned short"] = createNumberConversion(16, { unsigned: true });
        conversions["long"] = createNumberConversion(32, { unsigned: false });
        conversions["unsigned long"] = createNumberConversion(32, { unsigned: true });
        conversions["long long"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });
        conversions["unsigned long long"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });
        conversions["double"] = function(V) {
          const x = +V;
          if (!Number.isFinite(x)) {
            throw new TypeError("Argument is not a finite floating-point value");
          }
          return x;
        };
        conversions["unrestricted double"] = function(V) {
          const x = +V;
          if (isNaN(x)) {
            throw new TypeError("Argument is NaN");
          }
          return x;
        };
        conversions["float"] = conversions["double"];
        conversions["unrestricted float"] = conversions["unrestricted double"];
        conversions["DOMString"] = function(V, opts) {
          if (!opts)
            opts = {};
          if (opts.treatNullAsEmptyString && V === null) {
            return "";
          }
          return String(V);
        };
        conversions["ByteString"] = function(V, opts) {
          const x = String(V);
          let c = void 0;
          for (let i = 0; (c = x.codePointAt(i)) !== void 0; ++i) {
            if (c > 255) {
              throw new TypeError("Argument is not a valid bytestring");
            }
          }
          return x;
        };
        conversions["USVString"] = function(V) {
          const S = String(V);
          const n = S.length;
          const U = [];
          for (let i = 0; i < n; ++i) {
            const c = S.charCodeAt(i);
            if (c < 55296 || c > 57343) {
              U.push(String.fromCodePoint(c));
            } else if (56320 <= c && c <= 57343) {
              U.push(String.fromCodePoint(65533));
            } else {
              if (i === n - 1) {
                U.push(String.fromCodePoint(65533));
              } else {
                const d = S.charCodeAt(i + 1);
                if (56320 <= d && d <= 57343) {
                  const a = c & 1023;
                  const b = d & 1023;
                  U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));
                  ++i;
                } else {
                  U.push(String.fromCodePoint(65533));
                }
              }
            }
          }
          return U.join("");
        };
        conversions["Date"] = function(V, opts) {
          if (!(V instanceof Date)) {
            throw new TypeError("Argument is not a Date object");
          }
          if (isNaN(V)) {
            return void 0;
          }
          return V;
        };
        conversions["RegExp"] = function(V, opts) {
          if (!(V instanceof RegExp)) {
            V = new RegExp(V);
          }
          return V;
        };
      }
    });
    var require_utils2 = __commonJS2({
      "node_modules/node-fetch/node_modules/whatwg-url/lib/utils.js"(exports2, module22) {
        "use strict";
        module22.exports.mixin = function mixin(target, source) {
          const keys = Object.getOwnPropertyNames(source);
          for (let i = 0; i < keys.length; ++i) {
            Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));
          }
        };
        module22.exports.wrapperSymbol = Symbol("wrapper");
        module22.exports.implSymbol = Symbol("impl");
        module22.exports.wrapperForImpl = function(impl) {
          return impl[module22.exports.wrapperSymbol];
        };
        module22.exports.implForWrapper = function(wrapper) {
          return wrapper[module22.exports.implSymbol];
        };
      }
    });
    var require_mappingTable = __commonJS2({
      "node_modules/node-fetch/node_modules/tr46/lib/mappingTable.json"(exports2, module22) {
        module22.exports = [[[0, 44], "disallowed_STD3_valid"], [[45, 46], "valid"], [[47, 47], "disallowed_STD3_valid"], [[48, 57], "valid"], [[58, 64], "disallowed_STD3_valid"], [[65, 65], "mapped", [97]], [[66, 66], "mapped", [98]], [[67, 67], "mapped", [99]], [[68, 68], "mapped", [100]], [[69, 69], "mapped", [101]], [[70, 70], "mapped", [102]], [[71, 71], "mapped", [103]], [[72, 72], "mapped", [104]], [[73, 73], "mapped", [105]], [[74, 74], "mapped", [106]], [[75, 75], "mapped", [107]], [[76, 76], "mapped", [108]], [[77, 77], "mapped", [109]], [[78, 78], "mapped", [110]], [[79, 79], "mapped", [111]], [[80, 80], "mapped", [112]], [[81, 81], "mapped", [113]], [[82, 82], "mapped", [114]], [[83, 83], "mapped", [115]], [[84, 84], "mapped", [116]], [[85, 85], "mapped", [117]], [[86, 86], "mapped", [118]], [[87, 87], "mapped", [119]], [[88, 88], "mapped", [120]], [[89, 89], "mapped", [121]], [[90, 90], "mapped", [122]], [[91, 96], "disallowed_STD3_valid"], [[97, 122], "valid"], [[123, 127], "disallowed_STD3_valid"], [[128, 159], "disallowed"], [[160, 160], "disallowed_STD3_mapped", [32]], [[161, 167], "valid", [], "NV8"], [[168, 168], "disallowed_STD3_mapped", [32, 776]], [[169, 169], "valid", [], "NV8"], [[170, 170], "mapped", [97]], [[171, 172], "valid", [], "NV8"], [[173, 173], "ignored"], [[174, 174], "valid", [], "NV8"], [[175, 175], "disallowed_STD3_mapped", [32, 772]], [[176, 177], "valid", [], "NV8"], [[178, 178], "mapped", [50]], [[179, 179], "mapped", [51]], [[180, 180], "disallowed_STD3_mapped", [32, 769]], [[181, 181], "mapped", [956]], [[182, 182], "valid", [], "NV8"], [[183, 183], "valid"], [[184, 184], "disallowed_STD3_mapped", [32, 807]], [[185, 185], "mapped", [49]], [[186, 186], "mapped", [111]], [[187, 187], "valid", [], "NV8"], [[188, 188], "mapped", [49, 8260, 52]], [[189, 189], "mapped", [49, 8260, 50]], [[190, 190], "mapped", [51, 8260, 52]], [[191, 191], "valid", [], "NV8"], [[192, 192], "mapped", [224]], [[193, 193], "mapped", [225]], [[194, 194], "mapped", [226]], [[195, 195], "mapped", [227]], [[196, 196], "mapped", [228]], [[197, 197], "mapped", [229]], [[198, 198], "mapped", [230]], [[199, 199], "mapped", [231]], [[200, 200], "mapped", [232]], [[201, 201], "mapped", [233]], [[202, 202], "mapped", [234]], [[203, 203], "mapped", [235]], [[204, 204], "mapped", [236]], [[205, 205], "mapped", [237]], [[206, 206], "mapped", [238]], [[207, 207], "mapped", [239]], [[208, 208], "mapped", [240]], [[209, 209], "mapped", [241]], [[210, 210], "mapped", [242]], [[211, 211], "mapped", [243]], [[212, 212], "mapped", [244]], [[213, 213], "mapped", [245]], [[214, 214], "mapped", [246]], [[215, 215], "valid", [], "NV8"], [[216, 216], "mapped", [248]], [[217, 217], "mapped", [249]], [[218, 218], "mapped", [250]], [[219, 219], "mapped", [251]], [[220, 220], "mapped", [252]], [[221, 221], "mapped", [253]], [[222, 222], "mapped", [254]], [[223, 223], "deviation", [115, 115]], [[224, 246], "valid"], [[247, 247], "valid", [], "NV8"], [[248, 255], "valid"], [[256, 256], "mapped", [257]], [[257, 257], "valid"], [[258, 258], "mapped", [259]], [[259, 259], "valid"], [[260, 260], "mapped", [261]], [[261, 261], "valid"], [[262, 262], "mapped", [263]], [[263, 263], "valid"], [[264, 264], "mapped", [265]], [[265, 265], "valid"], [[266, 266], "mapped", [267]], [[267, 267], "valid"], [[268, 268], "mapped", [269]], [[269, 269], "valid"], [[270, 270], "mapped", [271]], [[271, 271], "valid"], [[272, 272], "mapped", [273]], [[273, 273], "valid"], [[274, 274], "mapped", [275]], [[275, 275], "valid"], [[276, 276], "mapped", [277]], [[277, 277], "valid"], [[278, 278], "mapped", [279]], [[279, 279], "valid"], [[280, 280], "mapped", [281]], [[281, 281], "valid"], [[282, 282], "mapped", [283]], [[283, 283], "valid"], [[284, 284], "mapped", [285]], [[285, 285], "valid"], [[286, 286], "mapped", [287]], [[287, 287], "valid"], [[288, 288], "mapped", [289]], [[289, 289], "valid"], [[290, 290], "mapped", [291]], [[291, 291], "valid"], [[292, 292], "mapped", [293]], [[293, 293], "valid"], [[294, 294], "mapped", [295]], [[295, 295], "valid"], [[296, 296], "mapped", [297]], [[297, 297], "valid"], [[298, 298], "mapped", [299]], [[299, 299], "valid"], [[300, 300], "mapped", [301]], [[301, 301], "valid"], [[302, 302], "mapped", [303]], [[303, 303], "valid"], [[304, 304], "mapped", [105, 775]], [[305, 305], "valid"], [[306, 307], "mapped", [105, 106]], [[308, 308], "mapped", [309]], [[309, 309], "valid"], [[310, 310], "mapped", [311]], [[311, 312], "valid"], [[313, 313], "mapped", [314]], [[314, 314], "valid"], [[315, 315], "mapped", [316]], [[316, 316], "valid"], [[317, 317], "mapped", [318]], [[318, 318], "valid"], [[319, 320], "mapped", [108, 183]], [[321, 321], "mapped", [322]], [[322, 322], "valid"], [[323, 323], "mapped", [324]], [[324, 324], "valid"], [[325, 325], "mapped", [326]], [[326, 326], "valid"], [[327, 327], "mapped", [328]], [[328, 328], "valid"], [[329, 329], "mapped", [700, 110]], [[330, 330], "mapped", [331]], [[331, 331], "valid"], [[332, 332], "mapped", [333]], [[333, 333], "valid"], [[334, 334], "mapped", [335]], [[335, 335], "valid"], [[336, 336], "mapped", [337]], [[337, 337], "valid"], [[338, 338], "mapped", [339]], [[339, 339], "valid"], [[340, 340], "mapped", [341]], [[341, 341], "valid"], [[342, 342], "mapped", [343]], [[343, 343], "valid"], [[344, 344], "mapped", [345]], [[345, 345], "valid"], [[346, 346], "mapped", [347]], [[347, 347], "valid"], [[348, 348], "mapped", [349]], [[349, 349], "valid"], [[350, 350], "mapped", [351]], [[351, 351], "valid"], [[352, 352], "mapped", [353]], [[353, 353], "valid"], [[354, 354], "mapped", [355]], [[355, 355], "valid"], [[356, 356], "mapped", [357]], [[357, 357], "valid"], [[358, 358], "mapped", [359]], [[359, 359], "valid"], [[360, 360], "mapped", [361]], [[361, 361], "valid"], [[362, 362], "mapped", [363]], [[363, 363], "valid"], [[364, 364], "mapped", [365]], [[365, 365], "valid"], [[366, 366], "mapped", [367]], [[367, 367], "valid"], [[368, 368], "mapped", [369]], [[369, 369], "valid"], [[370, 370], "mapped", [371]], [[371, 371], "valid"], [[372, 372], "mapped", [373]], [[373, 373], "valid"], [[374, 374], "mapped", [375]], [[375, 375], "valid"], [[376, 376], "mapped", [255]], [[377, 377], "mapped", [378]], [[378, 378], "valid"], [[379, 379], "mapped", [380]], [[380, 380], "valid"], [[381, 381], "mapped", [382]], [[382, 382], "valid"], [[383, 383], "mapped", [115]], [[384, 384], "valid"], [[385, 385], "mapped", [595]], [[386, 386], "mapped", [387]], [[387, 387], "valid"], [[388, 388], "mapped", [389]], [[389, 389], "valid"], [[390, 390], "mapped", [596]], [[391, 391], "mapped", [392]], [[392, 392], "valid"], [[393, 393], "mapped", [598]], [[394, 394], "mapped", [599]], [[395, 395], "mapped", [396]], [[396, 397], "valid"], [[398, 398], "mapped", [477]], [[399, 399], "mapped", [601]], [[400, 400], "mapped", [603]], [[401, 401], "mapped", [402]], [[402, 402], "valid"], [[403, 403], "mapped", [608]], [[404, 404], "mapped", [611]], [[405, 405], "valid"], [[406, 406], "mapped", [617]], [[407, 407], "mapped", [616]], [[408, 408], "mapped", [409]], [[409, 411], "valid"], [[412, 412], "mapped", [623]], [[413, 413], "mapped", [626]], [[414, 414], "valid"], [[415, 415], "mapped", [629]], [[416, 416], "mapped", [417]], [[417, 417], "valid"], [[418, 418], "mapped", [419]], [[419, 419], "valid"], [[420, 420], "mapped", [421]], [[421, 421], "valid"], [[422, 422], "mapped", [640]], [[423, 423], "mapped", [424]], [[424, 424], "valid"], [[425, 425], "mapped", [643]], [[426, 427], "valid"], [[428, 428], "mapped", [429]], [[429, 429], "valid"], [[430, 430], "mapped", [648]], [[431, 431], "mapped", [432]], [[432, 432], "valid"], [[433, 433], "mapped", [650]], [[434, 434], "mapped", [651]], [[435, 435], "mapped", [436]], [[436, 436], "valid"], [[437, 437], "mapped", [438]], [[438, 438], "valid"], [[439, 439], "mapped", [658]], [[440, 440], "mapped", [441]], [[441, 443], "valid"], [[444, 444], "mapped", [445]], [[445, 451], "valid"], [[452, 454], "mapped", [100, 382]], [[455, 457], "mapped", [108, 106]], [[458, 460], "mapped", [110, 106]], [[461, 461], "mapped", [462]], [[462, 462], "valid"], [[463, 463], "mapped", [464]], [[464, 464], "valid"], [[465, 465], "mapped", [466]], [[466, 466], "valid"], [[467, 467], "mapped", [468]], [[468, 468], "valid"], [[469, 469], "mapped", [470]], [[470, 470], "valid"], [[471, 471], "mapped", [472]], [[472, 472], "valid"], [[473, 473], "mapped", [474]], [[474, 474], "valid"], [[475, 475], "mapped", [476]], [[476, 477], "valid"], [[478, 478], "mapped", [479]], [[479, 479], "valid"], [[480, 480], "mapped", [481]], [[481, 481], "valid"], [[482, 482], "mapped", [483]], [[483, 483], "valid"], [[484, 484], "mapped", [485]], [[485, 485], "valid"], [[486, 486], "mapped", [487]], [[487, 487], "valid"], [[488, 488], "mapped", [489]], [[489, 489], "valid"], [[490, 490], "mapped", [491]], [[491, 491], "valid"], [[492, 492], "mapped", [493]], [[493, 493], "valid"], [[494, 494], "mapped", [495]], [[495, 496], "valid"], [[497, 499], "mapped", [100, 122]], [[500, 500], "mapped", [501]], [[501, 501], "valid"], [[502, 502], "mapped", [405]], [[503, 503], "mapped", [447]], [[504, 504], "mapped", [505]], [[505, 505], "valid"], [[506, 506], "mapped", [507]], [[507, 507], "valid"], [[508, 508], "mapped", [509]], [[509, 509], "valid"], [[510, 510], "mapped", [511]], [[511, 511], "valid"], [[512, 512], "mapped", [513]], [[513, 513], "valid"], [[514, 514], "mapped", [515]], [[515, 515], "valid"], [[516, 516], "mapped", [517]], [[517, 517], "valid"], [[518, 518], "mapped", [519]], [[519, 519], "valid"], [[520, 520], "mapped", [521]], [[521, 521], "valid"], [[522, 522], "mapped", [523]], [[523, 523], "valid"], [[524, 524], "mapped", [525]], [[525, 525], "valid"], [[526, 526], "mapped", [527]], [[527, 527], "valid"], [[528, 528], "mapped", [529]], [[529, 529], "valid"], [[530, 530], "mapped", [531]], [[531, 531], "valid"], [[532, 532], "mapped", [533]], [[533, 533], "valid"], [[534, 534], "mapped", [535]], [[535, 535], "valid"], [[536, 536], "mapped", [537]], [[537, 537], "valid"], [[538, 538], "mapped", [539]], [[539, 539], "valid"], [[540, 540], "mapped", [541]], [[541, 541], "valid"], [[542, 542], "mapped", [543]], [[543, 543], "valid"], [[544, 544], "mapped", [414]], [[545, 545], "valid"], [[546, 546], "mapped", [547]], [[547, 547], "valid"], [[548, 548], "mapped", [549]], [[549, 549], "valid"], [[550, 550], "mapped", [551]], [[551, 551], "valid"], [[552, 552], "mapped", [553]], [[553, 553], "valid"], [[554, 554], "mapped", [555]], [[555, 555], "valid"], [[556, 556], "mapped", [557]], [[557, 557], "valid"], [[558, 558], "mapped", [559]], [[559, 559], "valid"], [[560, 560], "mapped", [561]], [[561, 561], "valid"], [[562, 562], "mapped", [563]], [[563, 563], "valid"], [[564, 566], "valid"], [[567, 569], "valid"], [[570, 570], "mapped", [11365]], [[571, 571], "mapped", [572]], [[572, 572], "valid"], [[573, 573], "mapped", [410]], [[574, 574], "mapped", [11366]], [[575, 576], "valid"], [[577, 577], "mapped", [578]], [[578, 578], "valid"], [[579, 579], "mapped", [384]], [[580, 580], "mapped", [649]], [[581, 581], "mapped", [652]], [[582, 582], "mapped", [583]], [[583, 583], "valid"], [[584, 584], "mapped", [585]], [[585, 585], "valid"], [[586, 586], "mapped", [587]], [[587, 587], "valid"], [[588, 588], "mapped", [589]], [[589, 589], "valid"], [[590, 590], "mapped", [591]], [[591, 591], "valid"], [[592, 680], "valid"], [[681, 685], "valid"], [[686, 687], "valid"], [[688, 688], "mapped", [104]], [[689, 689], "mapped", [614]], [[690, 690], "mapped", [106]], [[691, 691], "mapped", [114]], [[692, 692], "mapped", [633]], [[693, 693], "mapped", [635]], [[694, 694], "mapped", [641]], [[695, 695], "mapped", [119]], [[696, 696], "mapped", [121]], [[697, 705], "valid"], [[706, 709], "valid", [], "NV8"], [[710, 721], "valid"], [[722, 727], "valid", [], "NV8"], [[728, 728], "disallowed_STD3_mapped", [32, 774]], [[729, 729], "disallowed_STD3_mapped", [32, 775]], [[730, 730], "disallowed_STD3_mapped", [32, 778]], [[731, 731], "disallowed_STD3_mapped", [32, 808]], [[732, 732], "disallowed_STD3_mapped", [32, 771]], [[733, 733], "disallowed_STD3_mapped", [32, 779]], [[734, 734], "valid", [], "NV8"], [[735, 735], "valid", [], "NV8"], [[736, 736], "mapped", [611]], [[737, 737], "mapped", [108]], [[738, 738], "mapped", [115]], [[739, 739], "mapped", [120]], [[740, 740], "mapped", [661]], [[741, 745], "valid", [], "NV8"], [[746, 747], "valid", [], "NV8"], [[748, 748], "valid"], [[749, 749], "valid", [], "NV8"], [[750, 750], "valid"], [[751, 767], "valid", [], "NV8"], [[768, 831], "valid"], [[832, 832], "mapped", [768]], [[833, 833], "mapped", [769]], [[834, 834], "valid"], [[835, 835], "mapped", [787]], [[836, 836], "mapped", [776, 769]], [[837, 837], "mapped", [953]], [[838, 846], "valid"], [[847, 847], "ignored"], [[848, 855], "valid"], [[856, 860], "valid"], [[861, 863], "valid"], [[864, 865], "valid"], [[866, 866], "valid"], [[867, 879], "valid"], [[880, 880], "mapped", [881]], [[881, 881], "valid"], [[882, 882], "mapped", [883]], [[883, 883], "valid"], [[884, 884], "mapped", [697]], [[885, 885], "valid"], [[886, 886], "mapped", [887]], [[887, 887], "valid"], [[888, 889], "disallowed"], [[890, 890], "disallowed_STD3_mapped", [32, 953]], [[891, 893], "valid"], [[894, 894], "disallowed_STD3_mapped", [59]], [[895, 895], "mapped", [1011]], [[896, 899], "disallowed"], [[900, 900], "disallowed_STD3_mapped", [32, 769]], [[901, 901], "disallowed_STD3_mapped", [32, 776, 769]], [[902, 902], "mapped", [940]], [[903, 903], "mapped", [183]], [[904, 904], "mapped", [941]], [[905, 905], "mapped", [942]], [[906, 906], "mapped", [943]], [[907, 907], "disallowed"], [[908, 908], "mapped", [972]], [[909, 909], "disallowed"], [[910, 910], "mapped", [973]], [[911, 911], "mapped", [974]], [[912, 912], "valid"], [[913, 913], "mapped", [945]], [[914, 914], "mapped", [946]], [[915, 915], "mapped", [947]], [[916, 916], "mapped", [948]], [[917, 917], "mapped", [949]], [[918, 918], "mapped", [950]], [[919, 919], "mapped", [951]], [[920, 920], "mapped", [952]], [[921, 921], "mapped", [953]], [[922, 922], "mapped", [954]], [[923, 923], "mapped", [955]], [[924, 924], "mapped", [956]], [[925, 925], "mapped", [957]], [[926, 926], "mapped", [958]], [[927, 927], "mapped", [959]], [[928, 928], "mapped", [960]], [[929, 929], "mapped", [961]], [[930, 930], "disallowed"], [[931, 931], "mapped", [963]], [[932, 932], "mapped", [964]], [[933, 933], "mapped", [965]], [[934, 934], "mapped", [966]], [[935, 935], "mapped", [967]], [[936, 936], "mapped", [968]], [[937, 937], "mapped", [969]], [[938, 938], "mapped", [970]], [[939, 939], "mapped", [971]], [[940, 961], "valid"], [[962, 962], "deviation", [963]], [[963, 974], "valid"], [[975, 975], "mapped", [983]], [[976, 976], "mapped", [946]], [[977, 977], "mapped", [952]], [[978, 978], "mapped", [965]], [[979, 979], "mapped", [973]], [[980, 980], "mapped", [971]], [[981, 981], "mapped", [966]], [[982, 982], "mapped", [960]], [[983, 983], "valid"], [[984, 984], "mapped", [985]], [[985, 985], "valid"], [[986, 986], "mapped", [987]], [[987, 987], "valid"], [[988, 988], "mapped", [989]], [[989, 989], "valid"], [[990, 990], "mapped", [991]], [[991, 991], "valid"], [[992, 992], "mapped", [993]], [[993, 993], "valid"], [[994, 994], "mapped", [995]], [[995, 995], "valid"], [[996, 996], "mapped", [997]], [[997, 997], "valid"], [[998, 998], "mapped", [999]], [[999, 999], "valid"], [[1e3, 1e3], "mapped", [1001]], [[1001, 1001], "valid"], [[1002, 1002], "mapped", [1003]], [[1003, 1003], "valid"], [[1004, 1004], "mapped", [1005]], [[1005, 1005], "valid"], [[1006, 1006], "mapped", [1007]], [[1007, 1007], "valid"], [[1008, 1008], "mapped", [954]], [[1009, 1009], "mapped", [961]], [[1010, 1010], "mapped", [963]], [[1011, 1011], "valid"], [[1012, 1012], "mapped", [952]], [[1013, 1013], "mapped", [949]], [[1014, 1014], "valid", [], "NV8"], [[1015, 1015], "mapped", [1016]], [[1016, 1016], "valid"], [[1017, 1017], "mapped", [963]], [[1018, 1018], "mapped", [1019]], [[1019, 1019], "valid"], [[1020, 1020], "valid"], [[1021, 1021], "mapped", [891]], [[1022, 1022], "mapped", [892]], [[1023, 1023], "mapped", [893]], [[1024, 1024], "mapped", [1104]], [[1025, 1025], "mapped", [1105]], [[1026, 1026], "mapped", [1106]], [[1027, 1027], "mapped", [1107]], [[1028, 1028], "mapped", [1108]], [[1029, 1029], "mapped", [1109]], [[1030, 1030], "mapped", [1110]], [[1031, 1031], "mapped", [1111]], [[1032, 1032], "mapped", [1112]], [[1033, 1033], "mapped", [1113]], [[1034, 1034], "mapped", [1114]], [[1035, 1035], "mapped", [1115]], [[1036, 1036], "mapped", [1116]], [[1037, 1037], "mapped", [1117]], [[1038, 1038], "mapped", [1118]], [[1039, 1039], "mapped", [1119]], [[1040, 1040], "mapped", [1072]], [[1041, 1041], "mapped", [1073]], [[1042, 1042], "mapped", [1074]], [[1043, 1043], "mapped", [1075]], [[1044, 1044], "mapped", [1076]], [[1045, 1045], "mapped", [1077]], [[1046, 1046], "mapped", [1078]], [[1047, 1047], "mapped", [1079]], [[1048, 1048], "mapped", [1080]], [[1049, 1049], "mapped", [1081]], [[1050, 1050], "mapped", [1082]], [[1051, 1051], "mapped", [1083]], [[1052, 1052], "mapped", [1084]], [[1053, 1053], "mapped", [1085]], [[1054, 1054], "mapped", [1086]], [[1055, 1055], "mapped", [1087]], [[1056, 1056], "mapped", [1088]], [[1057, 1057], "mapped", [1089]], [[1058, 1058], "mapped", [1090]], [[1059, 1059], "mapped", [1091]], [[1060, 1060], "mapped", [1092]], [[1061, 1061], "mapped", [1093]], [[1062, 1062], "mapped", [1094]], [[1063, 1063], "mapped", [1095]], [[1064, 1064], "mapped", [1096]], [[1065, 1065], "mapped", [1097]], [[1066, 1066], "mapped", [1098]], [[1067, 1067], "mapped", [1099]], [[1068, 1068], "mapped", [1100]], [[1069, 1069], "mapped", [1101]], [[1070, 1070], "mapped", [1102]], [[1071, 1071], "mapped", [1103]], [[1072, 1103], "valid"], [[1104, 1104], "valid"], [[1105, 1116], "valid"], [[1117, 1117], "valid"], [[1118, 1119], "valid"], [[1120, 1120], "mapped", [1121]], [[1121, 1121], "valid"], [[1122, 1122], "mapped", [1123]], [[1123, 1123], "valid"], [[1124, 1124], "mapped", [1125]], [[1125, 1125], "valid"], [[1126, 1126], "mapped", [1127]], [[1127, 1127], "valid"], [[1128, 1128], "mapped", [1129]], [[1129, 1129], "valid"], [[1130, 1130], "mapped", [1131]], [[1131, 1131], "valid"], [[1132, 1132], "mapped", [1133]], [[1133, 1133], "valid"], [[1134, 1134], "mapped", [1135]], [[1135, 1135], "valid"], [[1136, 1136], "mapped", [1137]], [[1137, 1137], "valid"], [[1138, 1138], "mapped", [1139]], [[1139, 1139], "valid"], [[1140, 1140], "mapped", [1141]], [[1141, 1141], "valid"], [[1142, 1142], "mapped", [1143]], [[1143, 1143], "valid"], [[1144, 1144], "mapped", [1145]], [[1145, 1145], "valid"], [[1146, 1146], "mapped", [1147]], [[1147, 1147], "valid"], [[1148, 1148], "mapped", [1149]], [[1149, 1149], "valid"], [[1150, 1150], "mapped", [1151]], [[1151, 1151], "valid"], [[1152, 1152], "mapped", [1153]], [[1153, 1153], "valid"], [[1154, 1154], "valid", [], "NV8"], [[1155, 1158], "valid"], [[1159, 1159], "valid"], [[1160, 1161], "valid", [], "NV8"], [[1162, 1162], "mapped", [1163]], [[1163, 1163], "valid"], [[1164, 1164], "mapped", [1165]], [[1165, 1165], "valid"], [[1166, 1166], "mapped", [1167]], [[1167, 1167], "valid"], [[1168, 1168], "mapped", [1169]], [[1169, 1169], "valid"], [[1170, 1170], "mapped", [1171]], [[1171, 1171], "valid"], [[1172, 1172], "mapped", [1173]], [[1173, 1173], "valid"], [[1174, 1174], "mapped", [1175]], [[1175, 1175], "valid"], [[1176, 1176], "mapped", [1177]], [[1177, 1177], "valid"], [[1178, 1178], "mapped", [1179]], [[1179, 1179], "valid"], [[1180, 1180], "mapped", [1181]], [[1181, 1181], "valid"], [[1182, 1182], "mapped", [1183]], [[1183, 1183], "valid"], [[1184, 1184], "mapped", [1185]], [[1185, 1185], "valid"], [[1186, 1186], "mapped", [1187]], [[1187, 1187], "valid"], [[1188, 1188], "mapped", [1189]], [[1189, 1189], "valid"], [[1190, 1190], "mapped", [1191]], [[1191, 1191], "valid"], [[1192, 1192], "mapped", [1193]], [[1193, 1193], "valid"], [[1194, 1194], "mapped", [1195]], [[1195, 1195], "valid"], [[1196, 1196], "mapped", [1197]], [[1197, 1197], "valid"], [[1198, 1198], "mapped", [1199]], [[1199, 1199], "valid"], [[1200, 1200], "mapped", [1201]], [[1201, 1201], "valid"], [[1202, 1202], "mapped", [1203]], [[1203, 1203], "valid"], [[1204, 1204], "mapped", [1205]], [[1205, 1205], "valid"], [[1206, 1206], "mapped", [1207]], [[1207, 1207], "valid"], [[1208, 1208], "mapped", [1209]], [[1209, 1209], "valid"], [[1210, 1210], "mapped", [1211]], [[1211, 1211], "valid"], [[1212, 1212], "mapped", [1213]], [[1213, 1213], "valid"], [[1214, 1214], "mapped", [1215]], [[1215, 1215], "valid"], [[1216, 1216], "disallowed"], [[1217, 1217], "mapped", [1218]], [[1218, 1218], "valid"], [[1219, 1219], "mapped", [1220]], [[1220, 1220], "valid"], [[1221, 1221], "mapped", [1222]], [[1222, 1222], "valid"], [[1223, 1223], "mapped", [1224]], [[1224, 1224], "valid"], [[1225, 1225], "mapped", [1226]], [[1226, 1226], "valid"], [[1227, 1227], "mapped", [1228]], [[1228, 1228], "valid"], [[1229, 1229], "mapped", [1230]], [[1230, 1230], "valid"], [[1231, 1231], "valid"], [[1232, 1232], "mapped", [1233]], [[1233, 1233], "valid"], [[1234, 1234], "mapped", [1235]], [[1235, 1235], "valid"], [[1236, 1236], "mapped", [1237]], [[1237, 1237], "valid"], [[1238, 1238], "mapped", [1239]], [[1239, 1239], "valid"], [[1240, 1240], "mapped", [1241]], [[1241, 1241], "valid"], [[1242, 1242], "mapped", [1243]], [[1243, 1243], "valid"], [[1244, 1244], "mapped", [1245]], [[1245, 1245], "valid"], [[1246, 1246], "mapped", [1247]], [[1247, 1247], "valid"], [[1248, 1248], "mapped", [1249]], [[1249, 1249], "valid"], [[1250, 1250], "mapped", [1251]], [[1251, 1251], "valid"], [[1252, 1252], "mapped", [1253]], [[1253, 1253], "valid"], [[1254, 1254], "mapped", [1255]], [[1255, 1255], "valid"], [[1256, 1256], "mapped", [1257]], [[1257, 1257], "valid"], [[1258, 1258], "mapped", [1259]], [[1259, 1259], "valid"], [[1260, 1260], "mapped", [1261]], [[1261, 1261], "valid"], [[1262, 1262], "mapped", [1263]], [[1263, 1263], "valid"], [[1264, 1264], "mapped", [1265]], [[1265, 1265], "valid"], [[1266, 1266], "mapped", [1267]], [[1267, 1267], "valid"], [[1268, 1268], "mapped", [1269]], [[1269, 1269], "valid"], [[1270, 1270], "mapped", [1271]], [[1271, 1271], "valid"], [[1272, 1272], "mapped", [1273]], [[1273, 1273], "valid"], [[1274, 1274], "mapped", [1275]], [[1275, 1275], "valid"], [[1276, 1276], "mapped", [1277]], [[1277, 1277], "valid"], [[1278, 1278], "mapped", [1279]], [[1279, 1279], "valid"], [[1280, 1280], "mapped", [1281]], [[1281, 1281], "valid"], [[1282, 1282], "mapped", [1283]], [[1283, 1283], "valid"], [[1284, 1284], "mapped", [1285]], [[1285, 1285], "valid"], [[1286, 1286], "mapped", [1287]], [[1287, 1287], "valid"], [[1288, 1288], "mapped", [1289]], [[1289, 1289], "valid"], [[1290, 1290], "mapped", [1291]], [[1291, 1291], "valid"], [[1292, 1292], "mapped", [1293]], [[1293, 1293], "valid"], [[1294, 1294], "mapped", [1295]], [[1295, 1295], "valid"], [[1296, 1296], "mapped", [1297]], [[1297, 1297], "valid"], [[1298, 1298], "mapped", [1299]], [[1299, 1299], "valid"], [[1300, 1300], "mapped", [1301]], [[1301, 1301], "valid"], [[1302, 1302], "mapped", [1303]], [[1303, 1303], "valid"], [[1304, 1304], "mapped", [1305]], [[1305, 1305], "valid"], [[1306, 1306], "mapped", [1307]], [[1307, 1307], "valid"], [[1308, 1308], "mapped", [1309]], [[1309, 1309], "valid"], [[1310, 1310], "mapped", [1311]], [[1311, 1311], "valid"], [[1312, 1312], "mapped", [1313]], [[1313, 1313], "valid"], [[1314, 1314], "mapped", [1315]], [[1315, 1315], "valid"], [[1316, 1316], "mapped", [1317]], [[1317, 1317], "valid"], [[1318, 1318], "mapped", [1319]], [[1319, 1319], "valid"], [[1320, 1320], "mapped", [1321]], [[1321, 1321], "valid"], [[1322, 1322], "mapped", [1323]], [[1323, 1323], "valid"], [[1324, 1324], "mapped", [1325]], [[1325, 1325], "valid"], [[1326, 1326], "mapped", [1327]], [[1327, 1327], "valid"], [[1328, 1328], "disallowed"], [[1329, 1329], "mapped", [1377]], [[1330, 1330], "mapped", [1378]], [[1331, 1331], "mapped", [1379]], [[1332, 1332], "mapped", [1380]], [[1333, 1333], "mapped", [1381]], [[1334, 1334], "mapped", [1382]], [[1335, 1335], "mapped", [1383]], [[1336, 1336], "mapped", [1384]], [[1337, 1337], "mapped", [1385]], [[1338, 1338], "mapped", [1386]], [[1339, 1339], "mapped", [1387]], [[1340, 1340], "mapped", [1388]], [[1341, 1341], "mapped", [1389]], [[1342, 1342], "mapped", [1390]], [[1343, 1343], "mapped", [1391]], [[1344, 1344], "mapped", [1392]], [[1345, 1345], "mapped", [1393]], [[1346, 1346], "mapped", [1394]], [[1347, 1347], "mapped", [1395]], [[1348, 1348], "mapped", [1396]], [[1349, 1349], "mapped", [1397]], [[1350, 1350], "mapped", [1398]], [[1351, 1351], "mapped", [1399]], [[1352, 1352], "mapped", [1400]], [[1353, 1353], "mapped", [1401]], [[1354, 1354], "mapped", [1402]], [[1355, 1355], "mapped", [1403]], [[1356, 1356], "mapped", [1404]], [[1357, 1357], "mapped", [1405]], [[1358, 1358], "mapped", [1406]], [[1359, 1359], "mapped", [1407]], [[1360, 1360], "mapped", [1408]], [[1361, 1361], "mapped", [1409]], [[1362, 1362], "mapped", [1410]], [[1363, 1363], "mapped", [1411]], [[1364, 1364], "mapped", [1412]], [[1365, 1365], "mapped", [1413]], [[1366, 1366], "mapped", [1414]], [[1367, 1368], "disallowed"], [[1369, 1369], "valid"], [[1370, 1375], "valid", [], "NV8"], [[1376, 1376], "disallowed"], [[1377, 1414], "valid"], [[1415, 1415], "mapped", [1381, 1410]], [[1416, 1416], "disallowed"], [[1417, 1417], "valid", [], "NV8"], [[1418, 1418], "valid", [], "NV8"], [[1419, 1420], "disallowed"], [[1421, 1422], "valid", [], "NV8"], [[1423, 1423], "valid", [], "NV8"], [[1424, 1424], "disallowed"], [[1425, 1441], "valid"], [[1442, 1442], "valid"], [[1443, 1455], "valid"], [[1456, 1465], "valid"], [[1466, 1466], "valid"], [[1467, 1469], "valid"], [[1470, 1470], "valid", [], "NV8"], [[1471, 1471], "valid"], [[1472, 1472], "valid", [], "NV8"], [[1473, 1474], "valid"], [[1475, 1475], "valid", [], "NV8"], [[1476, 1476], "valid"], [[1477, 1477], "valid"], [[1478, 1478], "valid", [], "NV8"], [[1479, 1479], "valid"], [[1480, 1487], "disallowed"], [[1488, 1514], "valid"], [[1515, 1519], "disallowed"], [[1520, 1524], "valid"], [[1525, 1535], "disallowed"], [[1536, 1539], "disallowed"], [[1540, 1540], "disallowed"], [[1541, 1541], "disallowed"], [[1542, 1546], "valid", [], "NV8"], [[1547, 1547], "valid", [], "NV8"], [[1548, 1548], "valid", [], "NV8"], [[1549, 1551], "valid", [], "NV8"], [[1552, 1557], "valid"], [[1558, 1562], "valid"], [[1563, 1563], "valid", [], "NV8"], [[1564, 1564], "disallowed"], [[1565, 1565], "disallowed"], [[1566, 1566], "valid", [], "NV8"], [[1567, 1567], "valid", [], "NV8"], [[1568, 1568], "valid"], [[1569, 1594], "valid"], [[1595, 1599], "valid"], [[1600, 1600], "valid", [], "NV8"], [[1601, 1618], "valid"], [[1619, 1621], "valid"], [[1622, 1624], "valid"], [[1625, 1630], "valid"], [[1631, 1631], "valid"], [[1632, 1641], "valid"], [[1642, 1645], "valid", [], "NV8"], [[1646, 1647], "valid"], [[1648, 1652], "valid"], [[1653, 1653], "mapped", [1575, 1652]], [[1654, 1654], "mapped", [1608, 1652]], [[1655, 1655], "mapped", [1735, 1652]], [[1656, 1656], "mapped", [1610, 1652]], [[1657, 1719], "valid"], [[1720, 1721], "valid"], [[1722, 1726], "valid"], [[1727, 1727], "valid"], [[1728, 1742], "valid"], [[1743, 1743], "valid"], [[1744, 1747], "valid"], [[1748, 1748], "valid", [], "NV8"], [[1749, 1756], "valid"], [[1757, 1757], "disallowed"], [[1758, 1758], "valid", [], "NV8"], [[1759, 1768], "valid"], [[1769, 1769], "valid", [], "NV8"], [[1770, 1773], "valid"], [[1774, 1775], "valid"], [[1776, 1785], "valid"], [[1786, 1790], "valid"], [[1791, 1791], "valid"], [[1792, 1805], "valid", [], "NV8"], [[1806, 1806], "disallowed"], [[1807, 1807], "disallowed"], [[1808, 1836], "valid"], [[1837, 1839], "valid"], [[1840, 1866], "valid"], [[1867, 1868], "disallowed"], [[1869, 1871], "valid"], [[1872, 1901], "valid"], [[1902, 1919], "valid"], [[1920, 1968], "valid"], [[1969, 1969], "valid"], [[1970, 1983], "disallowed"], [[1984, 2037], "valid"], [[2038, 2042], "valid", [], "NV8"], [[2043, 2047], "disallowed"], [[2048, 2093], "valid"], [[2094, 2095], "disallowed"], [[2096, 2110], "valid", [], "NV8"], [[2111, 2111], "disallowed"], [[2112, 2139], "valid"], [[2140, 2141], "disallowed"], [[2142, 2142], "valid", [], "NV8"], [[2143, 2207], "disallowed"], [[2208, 2208], "valid"], [[2209, 2209], "valid"], [[2210, 2220], "valid"], [[2221, 2226], "valid"], [[2227, 2228], "valid"], [[2229, 2274], "disallowed"], [[2275, 2275], "valid"], [[2276, 2302], "valid"], [[2303, 2303], "valid"], [[2304, 2304], "valid"], [[2305, 2307], "valid"], [[2308, 2308], "valid"], [[2309, 2361], "valid"], [[2362, 2363], "valid"], [[2364, 2381], "valid"], [[2382, 2382], "valid"], [[2383, 2383], "valid"], [[2384, 2388], "valid"], [[2389, 2389], "valid"], [[2390, 2391], "valid"], [[2392, 2392], "mapped", [2325, 2364]], [[2393, 2393], "mapped", [2326, 2364]], [[2394, 2394], "mapped", [2327, 2364]], [[2395, 2395], "mapped", [2332, 2364]], [[2396, 2396], "mapped", [2337, 2364]], [[2397, 2397], "mapped", [2338, 2364]], [[2398, 2398], "mapped", [2347, 2364]], [[2399, 2399], "mapped", [2351, 2364]], [[2400, 2403], "valid"], [[2404, 2405], "valid", [], "NV8"], [[2406, 2415], "valid"], [[2416, 2416], "valid", [], "NV8"], [[2417, 2418], "valid"], [[2419, 2423], "valid"], [[2424, 2424], "valid"], [[2425, 2426], "valid"], [[2427, 2428], "valid"], [[2429, 2429], "valid"], [[2430, 2431], "valid"], [[2432, 2432], "valid"], [[2433, 2435], "valid"], [[2436, 2436], "disallowed"], [[2437, 2444], "valid"], [[2445, 2446], "disallowed"], [[2447, 2448], "valid"], [[2449, 2450], "disallowed"], [[2451, 2472], "valid"], [[2473, 2473], "disallowed"], [[2474, 2480], "valid"], [[2481, 2481], "disallowed"], [[2482, 2482], "valid"], [[2483, 2485], "disallowed"], [[2486, 2489], "valid"], [[2490, 2491], "disallowed"], [[2492, 2492], "valid"], [[2493, 2493], "valid"], [[2494, 2500], "valid"], [[2501, 2502], "disallowed"], [[2503, 2504], "valid"], [[2505, 2506], "disallowed"], [[2507, 2509], "valid"], [[2510, 2510], "valid"], [[2511, 2518], "disallowed"], [[2519, 2519], "valid"], [[2520, 2523], "disallowed"], [[2524, 2524], "mapped", [2465, 2492]], [[2525, 2525], "mapped", [2466, 2492]], [[2526, 2526], "disallowed"], [[2527, 2527], "mapped", [2479, 2492]], [[2528, 2531], "valid"], [[2532, 2533], "disallowed"], [[2534, 2545], "valid"], [[2546, 2554], "valid", [], "NV8"], [[2555, 2555], "valid", [], "NV8"], [[2556, 2560], "disallowed"], [[2561, 2561], "valid"], [[2562, 2562], "valid"], [[2563, 2563], "valid"], [[2564, 2564], "disallowed"], [[2565, 2570], "valid"], [[2571, 2574], "disallowed"], [[2575, 2576], "valid"], [[2577, 2578], "disallowed"], [[2579, 2600], "valid"], [[2601, 2601], "disallowed"], [[2602, 2608], "valid"], [[2609, 2609], "disallowed"], [[2610, 2610], "valid"], [[2611, 2611], "mapped", [2610, 2620]], [[2612, 2612], "disallowed"], [[2613, 2613], "valid"], [[2614, 2614], "mapped", [2616, 2620]], [[2615, 2615], "disallowed"], [[2616, 2617], "valid"], [[2618, 2619], "disallowed"], [[2620, 2620], "valid"], [[2621, 2621], "disallowed"], [[2622, 2626], "valid"], [[2627, 2630], "disallowed"], [[2631, 2632], "valid"], [[2633, 2634], "disallowed"], [[2635, 2637], "valid"], [[2638, 2640], "disallowed"], [[2641, 2641], "valid"], [[2642, 2648], "disallowed"], [[2649, 2649], "mapped", [2582, 2620]], [[2650, 2650], "mapped", [2583, 2620]], [[2651, 2651], "mapped", [2588, 2620]], [[2652, 2652], "valid"], [[2653, 2653], "disallowed"], [[2654, 2654], "mapped", [2603, 2620]], [[2655, 2661], "disallowed"], [[2662, 2676], "valid"], [[2677, 2677], "valid"], [[2678, 2688], "disallowed"], [[2689, 2691], "valid"], [[2692, 2692], "disallowed"], [[2693, 2699], "valid"], [[2700, 2700], "valid"], [[2701, 2701], "valid"], [[2702, 2702], "disallowed"], [[2703, 2705], "valid"], [[2706, 2706], "disallowed"], [[2707, 2728], "valid"], [[2729, 2729], "disallowed"], [[2730, 2736], "valid"], [[2737, 2737], "disallowed"], [[2738, 2739], "valid"], [[2740, 2740], "disallowed"], [[2741, 2745], "valid"], [[2746, 2747], "disallowed"], [[2748, 2757], "valid"], [[2758, 2758], "disallowed"], [[2759, 2761], "valid"], [[2762, 2762], "disallowed"], [[2763, 2765], "valid"], [[2766, 2767], "disallowed"], [[2768, 2768], "valid"], [[2769, 2783], "disallowed"], [[2784, 2784], "valid"], [[2785, 2787], "valid"], [[2788, 2789], "disallowed"], [[2790, 2799], "valid"], [[2800, 2800], "valid", [], "NV8"], [[2801, 2801], "valid", [], "NV8"], [[2802, 2808], "disallowed"], [[2809, 2809], "valid"], [[2810, 2816], "disallowed"], [[2817, 2819], "valid"], [[2820, 2820], "disallowed"], [[2821, 2828], "valid"], [[2829, 2830], "disallowed"], [[2831, 2832], "valid"], [[2833, 2834], "disallowed"], [[2835, 2856], "valid"], [[2857, 2857], "disallowed"], [[2858, 2864], "valid"], [[2865, 2865], "disallowed"], [[2866, 2867], "valid"], [[2868, 2868], "disallowed"], [[2869, 2869], "valid"], [[2870, 2873], "valid"], [[2874, 2875], "disallowed"], [[2876, 2883], "valid"], [[2884, 2884], "valid"], [[2885, 2886], "disallowed"], [[2887, 2888], "valid"], [[2889, 2890], "disallowed"], [[2891, 2893], "valid"], [[2894, 2901], "disallowed"], [[2902, 2903], "valid"], [[2904, 2907], "disallowed"], [[2908, 2908], "mapped", [2849, 2876]], [[2909, 2909], "mapped", [2850, 2876]], [[2910, 2910], "disallowed"], [[2911, 2913], "valid"], [[2914, 2915], "valid"], [[2916, 2917], "disallowed"], [[2918, 2927], "valid"], [[2928, 2928], "valid", [], "NV8"], [[2929, 2929], "valid"], [[2930, 2935], "valid", [], "NV8"], [[2936, 2945], "disallowed"], [[2946, 2947], "valid"], [[2948, 2948], "disallowed"], [[2949, 2954], "valid"], [[2955, 2957], "disallowed"], [[2958, 2960], "valid"], [[2961, 2961], "disallowed"], [[2962, 2965], "valid"], [[2966, 2968], "disallowed"], [[2969, 2970], "valid"], [[2971, 2971], "disallowed"], [[2972, 2972], "valid"], [[2973, 2973], "disallowed"], [[2974, 2975], "valid"], [[2976, 2978], "disallowed"], [[2979, 2980], "valid"], [[2981, 2983], "disallowed"], [[2984, 2986], "valid"], [[2987, 2989], "disallowed"], [[2990, 2997], "valid"], [[2998, 2998], "valid"], [[2999, 3001], "valid"], [[3002, 3005], "disallowed"], [[3006, 3010], "valid"], [[3011, 3013], "disallowed"], [[3014, 3016], "valid"], [[3017, 3017], "disallowed"], [[3018, 3021], "valid"], [[3022, 3023], "disallowed"], [[3024, 3024], "valid"], [[3025, 3030], "disallowed"], [[3031, 3031], "valid"], [[3032, 3045], "disallowed"], [[3046, 3046], "valid"], [[3047, 3055], "valid"], [[3056, 3058], "valid", [], "NV8"], [[3059, 3066], "valid", [], "NV8"], [[3067, 3071], "disallowed"], [[3072, 3072], "valid"], [[3073, 3075], "valid"], [[3076, 3076], "disallowed"], [[3077, 3084], "valid"], [[3085, 3085], "disallowed"], [[3086, 3088], "valid"], [[3089, 3089], "disallowed"], [[3090, 3112], "valid"], [[3113, 3113], "disallowed"], [[3114, 3123], "valid"], [[3124, 3124], "valid"], [[3125, 3129], "valid"], [[3130, 3132], "disallowed"], [[3133, 3133], "valid"], [[3134, 3140], "valid"], [[3141, 3141], "disallowed"], [[3142, 3144], "valid"], [[3145, 3145], "disallowed"], [[3146, 3149], "valid"], [[3150, 3156], "disallowed"], [[3157, 3158], "valid"], [[3159, 3159], "disallowed"], [[3160, 3161], "valid"], [[3162, 3162], "valid"], [[3163, 3167], "disallowed"], [[3168, 3169], "valid"], [[3170, 3171], "valid"], [[3172, 3173], "disallowed"], [[3174, 3183], "valid"], [[3184, 3191], "disallowed"], [[3192, 3199], "valid", [], "NV8"], [[3200, 3200], "disallowed"], [[3201, 3201], "valid"], [[3202, 3203], "valid"], [[3204, 3204], "disallowed"], [[3205, 3212], "valid"], [[3213, 3213], "disallowed"], [[3214, 3216], "valid"], [[3217, 3217], "disallowed"], [[3218, 3240], "valid"], [[3241, 3241], "disallowed"], [[3242, 3251], "valid"], [[3252, 3252], "disallowed"], [[3253, 3257], "valid"], [[3258, 3259], "disallowed"], [[3260, 3261], "valid"], [[3262, 3268], "valid"], [[3269, 3269], "disallowed"], [[3270, 3272], "valid"], [[3273, 3273], "disallowed"], [[3274, 3277], "valid"], [[3278, 3284], "disallowed"], [[3285, 3286], "valid"], [[3287, 3293], "disallowed"], [[3294, 3294], "valid"], [[3295, 3295], "disallowed"], [[3296, 3297], "valid"], [[3298, 3299], "valid"], [[3300, 3301], "disallowed"], [[3302, 3311], "valid"], [[3312, 3312], "disallowed"], [[3313, 3314], "valid"], [[3315, 3328], "disallowed"], [[3329, 3329], "valid"], [[3330, 3331], "valid"], [[3332, 3332], "disallowed"], [[3333, 3340], "valid"], [[3341, 3341], "disallowed"], [[3342, 3344], "valid"], [[3345, 3345], "disallowed"], [[3346, 3368], "valid"], [[3369, 3369], "valid"], [[3370, 3385], "valid"], [[3386, 3386], "valid"], [[3387, 3388], "disallowed"], [[3389, 3389], "valid"], [[3390, 3395], "valid"], [[3396, 3396], "valid"], [[3397, 3397], "disallowed"], [[3398, 3400], "valid"], [[3401, 3401], "disallowed"], [[3402, 3405], "valid"], [[3406, 3406], "valid"], [[3407, 3414], "disallowed"], [[3415, 3415], "valid"], [[3416, 3422], "disallowed"], [[3423, 3423], "valid"], [[3424, 3425], "valid"], [[3426, 3427], "valid"], [[3428, 3429], "disallowed"], [[3430, 3439], "valid"], [[3440, 3445], "valid", [], "NV8"], [[3446, 3448], "disallowed"], [[3449, 3449], "valid", [], "NV8"], [[3450, 3455], "valid"], [[3456, 3457], "disallowed"], [[3458, 3459], "valid"], [[3460, 3460], "disallowed"], [[3461, 3478], "valid"], [[3479, 3481], "disallowed"], [[3482, 3505], "valid"], [[3506, 3506], "disallowed"], [[3507, 3515], "valid"], [[3516, 3516], "disallowed"], [[3517, 3517], "valid"], [[3518, 3519], "disallowed"], [[3520, 3526], "valid"], [[3527, 3529], "disallowed"], [[3530, 3530], "valid"], [[3531, 3534], "disallowed"], [[3535, 3540], "valid"], [[3541, 3541], "disallowed"], [[3542, 3542], "valid"], [[3543, 3543], "disallowed"], [[3544, 3551], "valid"], [[3552, 3557], "disallowed"], [[3558, 3567], "valid"], [[3568, 3569], "disallowed"], [[3570, 3571], "valid"], [[3572, 3572], "valid", [], "NV8"], [[3573, 3584], "disallowed"], [[3585, 3634], "valid"], [[3635, 3635], "mapped", [3661, 3634]], [[3636, 3642], "valid"], [[3643, 3646], "disallowed"], [[3647, 3647], "valid", [], "NV8"], [[3648, 3662], "valid"], [[3663, 3663], "valid", [], "NV8"], [[3664, 3673], "valid"], [[3674, 3675], "valid", [], "NV8"], [[3676, 3712], "disallowed"], [[3713, 3714], "valid"], [[3715, 3715], "disallowed"], [[3716, 3716], "valid"], [[3717, 3718], "disallowed"], [[3719, 3720], "valid"], [[3721, 3721], "disallowed"], [[3722, 3722], "valid"], [[3723, 3724], "disallowed"], [[3725, 3725], "valid"], [[3726, 3731], "disallowed"], [[3732, 3735], "valid"], [[3736, 3736], "disallowed"], [[3737, 3743], "valid"], [[3744, 3744], "disallowed"], [[3745, 3747], "valid"], [[3748, 3748], "disallowed"], [[3749, 3749], "valid"], [[3750, 3750], "disallowed"], [[3751, 3751], "valid"], [[3752, 3753], "disallowed"], [[3754, 3755], "valid"], [[3756, 3756], "disallowed"], [[3757, 3762], "valid"], [[3763, 3763], "mapped", [3789, 3762]], [[3764, 3769], "valid"], [[3770, 3770], "disallowed"], [[3771, 3773], "valid"], [[3774, 3775], "disallowed"], [[3776, 3780], "valid"], [[3781, 3781], "disallowed"], [[3782, 3782], "valid"], [[3783, 3783], "disallowed"], [[3784, 3789], "valid"], [[3790, 3791], "disallowed"], [[3792, 3801], "valid"], [[3802, 3803], "disallowed"], [[3804, 3804], "mapped", [3755, 3737]], [[3805, 3805], "mapped", [3755, 3745]], [[3806, 3807], "valid"], [[3808, 3839], "disallowed"], [[3840, 3840], "valid"], [[3841, 3850], "valid", [], "NV8"], [[3851, 3851], "valid"], [[3852, 3852], "mapped", [3851]], [[3853, 3863], "valid", [], "NV8"], [[3864, 3865], "valid"], [[3866, 3871], "valid", [], "NV8"], [[3872, 3881], "valid"], [[3882, 3892], "valid", [], "NV8"], [[3893, 3893], "valid"], [[3894, 3894], "valid", [], "NV8"], [[3895, 3895], "valid"], [[3896, 3896], "valid", [], "NV8"], [[3897, 3897], "valid"], [[3898, 3901], "valid", [], "NV8"], [[3902, 3906], "valid"], [[3907, 3907], "mapped", [3906, 4023]], [[3908, 3911], "valid"], [[3912, 3912], "disallowed"], [[3913, 3916], "valid"], [[3917, 3917], "mapped", [3916, 4023]], [[3918, 3921], "valid"], [[3922, 3922], "mapped", [3921, 4023]], [[3923, 3926], "valid"], [[3927, 3927], "mapped", [3926, 4023]], [[3928, 3931], "valid"], [[3932, 3932], "mapped", [3931, 4023]], [[3933, 3944], "valid"], [[3945, 3945], "mapped", [3904, 4021]], [[3946, 3946], "valid"], [[3947, 3948], "valid"], [[3949, 3952], "disallowed"], [[3953, 3954], "valid"], [[3955, 3955], "mapped", [3953, 3954]], [[3956, 3956], "valid"], [[3957, 3957], "mapped", [3953, 3956]], [[3958, 3958], "mapped", [4018, 3968]], [[3959, 3959], "mapped", [4018, 3953, 3968]], [[3960, 3960], "mapped", [4019, 3968]], [[3961, 3961], "mapped", [4019, 3953, 3968]], [[3962, 3968], "valid"], [[3969, 3969], "mapped", [3953, 3968]], [[3970, 3972], "valid"], [[3973, 3973], "valid", [], "NV8"], [[3974, 3979], "valid"], [[3980, 3983], "valid"], [[3984, 3986], "valid"], [[3987, 3987], "mapped", [3986, 4023]], [[3988, 3989], "valid"], [[3990, 3990], "valid"], [[3991, 3991], "valid"], [[3992, 3992], "disallowed"], [[3993, 3996], "valid"], [[3997, 3997], "mapped", [3996, 4023]], [[3998, 4001], "valid"], [[4002, 4002], "mapped", [4001, 4023]], [[4003, 4006], "valid"], [[4007, 4007], "mapped", [4006, 4023]], [[4008, 4011], "valid"], [[4012, 4012], "mapped", [4011, 4023]], [[4013, 4013], "valid"], [[4014, 4016], "valid"], [[4017, 4023], "valid"], [[4024, 4024], "valid"], [[4025, 4025], "mapped", [3984, 4021]], [[4026, 4028], "valid"], [[4029, 4029], "disallowed"], [[4030, 4037], "valid", [], "NV8"], [[4038, 4038], "valid"], [[4039, 4044], "valid", [], "NV8"], [[4045, 4045], "disallowed"], [[4046, 4046], "valid", [], "NV8"], [[4047, 4047], "valid", [], "NV8"], [[4048, 4049], "valid", [], "NV8"], [[4050, 4052], "valid", [], "NV8"], [[4053, 4056], "valid", [], "NV8"], [[4057, 4058], "valid", [], "NV8"], [[4059, 4095], "disallowed"], [[4096, 4129], "valid"], [[4130, 4130], "valid"], [[4131, 4135], "valid"], [[4136, 4136], "valid"], [[4137, 4138], "valid"], [[4139, 4139], "valid"], [[4140, 4146], "valid"], [[4147, 4149], "valid"], [[4150, 4153], "valid"], [[4154, 4159], "valid"], [[4160, 4169], "valid"], [[4170, 4175], "valid", [], "NV8"], [[4176, 4185], "valid"], [[4186, 4249], "valid"], [[4250, 4253], "valid"], [[4254, 4255], "valid", [], "NV8"], [[4256, 4293], "disallowed"], [[4294, 4294], "disallowed"], [[4295, 4295], "mapped", [11559]], [[4296, 4300], "disallowed"], [[4301, 4301], "mapped", [11565]], [[4302, 4303], "disallowed"], [[4304, 4342], "valid"], [[4343, 4344], "valid"], [[4345, 4346], "valid"], [[4347, 4347], "valid", [], "NV8"], [[4348, 4348], "mapped", [4316]], [[4349, 4351], "valid"], [[4352, 4441], "valid", [], "NV8"], [[4442, 4446], "valid", [], "NV8"], [[4447, 4448], "disallowed"], [[4449, 4514], "valid", [], "NV8"], [[4515, 4519], "valid", [], "NV8"], [[4520, 4601], "valid", [], "NV8"], [[4602, 4607], "valid", [], "NV8"], [[4608, 4614], "valid"], [[4615, 4615], "valid"], [[4616, 4678], "valid"], [[4679, 4679], "valid"], [[4680, 4680], "valid"], [[4681, 4681], "disallowed"], [[4682, 4685], "valid"], [[4686, 4687], "disallowed"], [[4688, 4694], "valid"], [[4695, 4695], "disallowed"], [[4696, 4696], "valid"], [[4697, 4697], "disallowed"], [[4698, 4701], "valid"], [[4702, 4703], "disallowed"], [[4704, 4742], "valid"], [[4743, 4743], "valid"], [[4744, 4744], "valid"], [[4745, 4745], "disallowed"], [[4746, 4749], "valid"], [[4750, 4751], "disallowed"], [[4752, 4782], "valid"], [[4783, 4783], "valid"], [[4784, 4784], "valid"], [[4785, 4785], "disallowed"], [[4786, 4789], "valid"], [[4790, 4791], "disallowed"], [[4792, 4798], "valid"], [[4799, 4799], "disallowed"], [[4800, 4800], "valid"], [[4801, 4801], "disallowed"], [[4802, 4805], "valid"], [[4806, 4807], "disallowed"], [[4808, 4814], "valid"], [[4815, 4815], "valid"], [[4816, 4822], "valid"], [[4823, 4823], "disallowed"], [[4824, 4846], "valid"], [[4847, 4847], "valid"], [[4848, 4878], "valid"], [[4879, 4879], "valid"], [[4880, 4880], "valid"], [[4881, 4881], "disallowed"], [[4882, 4885], "valid"], [[4886, 4887], "disallowed"], [[4888, 4894], "valid"], [[4895, 4895], "valid"], [[4896, 4934], "valid"], [[4935, 4935], "valid"], [[4936, 4954], "valid"], [[4955, 4956], "disallowed"], [[4957, 4958], "valid"], [[4959, 4959], "valid"], [[4960, 4960], "valid", [], "NV8"], [[4961, 4988], "valid", [], "NV8"], [[4989, 4991], "disallowed"], [[4992, 5007], "valid"], [[5008, 5017], "valid", [], "NV8"], [[5018, 5023], "disallowed"], [[5024, 5108], "valid"], [[5109, 5109], "valid"], [[5110, 5111], "disallowed"], [[5112, 5112], "mapped", [5104]], [[5113, 5113], "mapped", [5105]], [[5114, 5114], "mapped", [5106]], [[5115, 5115], "mapped", [5107]], [[5116, 5116], "mapped", [5108]], [[5117, 5117], "mapped", [5109]], [[5118, 5119], "disallowed"], [[5120, 5120], "valid", [], "NV8"], [[5121, 5740], "valid"], [[5741, 5742], "valid", [], "NV8"], [[5743, 5750], "valid"], [[5751, 5759], "valid"], [[5760, 5760], "disallowed"], [[5761, 5786], "valid"], [[5787, 5788], "valid", [], "NV8"], [[5789, 5791], "disallowed"], [[5792, 5866], "valid"], [[5867, 5872], "valid", [], "NV8"], [[5873, 5880], "valid"], [[5881, 5887], "disallowed"], [[5888, 5900], "valid"], [[5901, 5901], "disallowed"], [[5902, 5908], "valid"], [[5909, 5919], "disallowed"], [[5920, 5940], "valid"], [[5941, 5942], "valid", [], "NV8"], [[5943, 5951], "disallowed"], [[5952, 5971], "valid"], [[5972, 5983], "disallowed"], [[5984, 5996], "valid"], [[5997, 5997], "disallowed"], [[5998, 6e3], "valid"], [[6001, 6001], "disallowed"], [[6002, 6003], "valid"], [[6004, 6015], "disallowed"], [[6016, 6067], "valid"], [[6068, 6069], "disallowed"], [[6070, 6099], "valid"], [[6100, 6102], "valid", [], "NV8"], [[6103, 6103], "valid"], [[6104, 6107], "valid", [], "NV8"], [[6108, 6108], "valid"], [[6109, 6109], "valid"], [[6110, 6111], "disallowed"], [[6112, 6121], "valid"], [[6122, 6127], "disallowed"], [[6128, 6137], "valid", [], "NV8"], [[6138, 6143], "disallowed"], [[6144, 6149], "valid", [], "NV8"], [[6150, 6150], "disallowed"], [[6151, 6154], "valid", [], "NV8"], [[6155, 6157], "ignored"], [[6158, 6158], "disallowed"], [[6159, 6159], "disallowed"], [[6160, 6169], "valid"], [[6170, 6175], "disallowed"], [[6176, 6263], "valid"], [[6264, 6271], "disallowed"], [[6272, 6313], "valid"], [[6314, 6314], "valid"], [[6315, 6319], "disallowed"], [[6320, 6389], "valid"], [[6390, 6399], "disallowed"], [[6400, 6428], "valid"], [[6429, 6430], "valid"], [[6431, 6431], "disallowed"], [[6432, 6443], "valid"], [[6444, 6447], "disallowed"], [[6448, 6459], "valid"], [[6460, 6463], "disallowed"], [[6464, 6464], "valid", [], "NV8"], [[6465, 6467], "disallowed"], [[6468, 6469], "valid", [], "NV8"], [[6470, 6509], "valid"], [[6510, 6511], "disallowed"], [[6512, 6516], "valid"], [[6517, 6527], "disallowed"], [[6528, 6569], "valid"], [[6570, 6571], "valid"], [[6572, 6575], "disallowed"], [[6576, 6601], "valid"], [[6602, 6607], "disallowed"], [[6608, 6617], "valid"], [[6618, 6618], "valid", [], "XV8"], [[6619, 6621], "disallowed"], [[6622, 6623], "valid", [], "NV8"], [[6624, 6655], "valid", [], "NV8"], [[6656, 6683], "valid"], [[6684, 6685], "disallowed"], [[6686, 6687], "valid", [], "NV8"], [[6688, 6750], "valid"], [[6751, 6751], "disallowed"], [[6752, 6780], "valid"], [[6781, 6782], "disallowed"], [[6783, 6793], "valid"], [[6794, 6799], "disallowed"], [[6800, 6809], "valid"], [[6810, 6815], "disallowed"], [[6816, 6822], "valid", [], "NV8"], [[6823, 6823], "valid"], [[6824, 6829], "valid", [], "NV8"], [[6830, 6831], "disallowed"], [[6832, 6845], "valid"], [[6846, 6846], "valid", [], "NV8"], [[6847, 6911], "disallowed"], [[6912, 6987], "valid"], [[6988, 6991], "disallowed"], [[6992, 7001], "valid"], [[7002, 7018], "valid", [], "NV8"], [[7019, 7027], "valid"], [[7028, 7036], "valid", [], "NV8"], [[7037, 7039], "disallowed"], [[7040, 7082], "valid"], [[7083, 7085], "valid"], [[7086, 7097], "valid"], [[7098, 7103], "valid"], [[7104, 7155], "valid"], [[7156, 7163], "disallowed"], [[7164, 7167], "valid", [], "NV8"], [[7168, 7223], "valid"], [[7224, 7226], "disallowed"], [[7227, 7231], "valid", [], "NV8"], [[7232, 7241], "valid"], [[7242, 7244], "disallowed"], [[7245, 7293], "valid"], [[7294, 7295], "valid", [], "NV8"], [[7296, 7359], "disallowed"], [[7360, 7367], "valid", [], "NV8"], [[7368, 7375], "disallowed"], [[7376, 7378], "valid"], [[7379, 7379], "valid", [], "NV8"], [[7380, 7410], "valid"], [[7411, 7414], "valid"], [[7415, 7415], "disallowed"], [[7416, 7417], "valid"], [[7418, 7423], "disallowed"], [[7424, 7467], "valid"], [[7468, 7468], "mapped", [97]], [[7469, 7469], "mapped", [230]], [[7470, 7470], "mapped", [98]], [[7471, 7471], "valid"], [[7472, 7472], "mapped", [100]], [[7473, 7473], "mapped", [101]], [[7474, 7474], "mapped", [477]], [[7475, 7475], "mapped", [103]], [[7476, 7476], "mapped", [104]], [[7477, 7477], "mapped", [105]], [[7478, 7478], "mapped", [106]], [[7479, 7479], "mapped", [107]], [[7480, 7480], "mapped", [108]], [[7481, 7481], "mapped", [109]], [[7482, 7482], "mapped", [110]], [[7483, 7483], "valid"], [[7484, 7484], "mapped", [111]], [[7485, 7485], "mapped", [547]], [[7486, 7486], "mapped", [112]], [[7487, 7487], "mapped", [114]], [[7488, 7488], "mapped", [116]], [[7489, 7489], "mapped", [117]], [[7490, 7490], "mapped", [119]], [[7491, 7491], "mapped", [97]], [[7492, 7492], "mapped", [592]], [[7493, 7493], "mapped", [593]], [[7494, 7494], "mapped", [7426]], [[7495, 7495], "mapped", [98]], [[7496, 7496], "mapped", [100]], [[7497, 7497], "mapped", [101]], [[7498, 7498], "mapped", [601]], [[7499, 7499], "mapped", [603]], [[7500, 7500], "mapped", [604]], [[7501, 7501], "mapped", [103]], [[7502, 7502], "valid"], [[7503, 7503], "mapped", [107]], [[7504, 7504], "mapped", [109]], [[7505, 7505], "mapped", [331]], [[7506, 7506], "mapped", [111]], [[7507, 7507], "mapped", [596]], [[7508, 7508], "mapped", [7446]], [[7509, 7509], "mapped", [7447]], [[7510, 7510], "mapped", [112]], [[7511, 7511], "mapped", [116]], [[7512, 7512], "mapped", [117]], [[7513, 7513], "mapped", [7453]], [[7514, 7514], "mapped", [623]], [[7515, 7515], "mapped", [118]], [[7516, 7516], "mapped", [7461]], [[7517, 7517], "mapped", [946]], [[7518, 7518], "mapped", [947]], [[7519, 7519], "mapped", [948]], [[7520, 7520], "mapped", [966]], [[7521, 7521], "mapped", [967]], [[7522, 7522], "mapped", [105]], [[7523, 7523], "mapped", [114]], [[7524, 7524], "mapped", [117]], [[7525, 7525], "mapped", [118]], [[7526, 7526], "mapped", [946]], [[7527, 7527], "mapped", [947]], [[7528, 7528], "mapped", [961]], [[7529, 7529], "mapped", [966]], [[7530, 7530], "mapped", [967]], [[7531, 7531], "valid"], [[7532, 7543], "valid"], [[7544, 7544], "mapped", [1085]], [[7545, 7578], "valid"], [[7579, 7579], "mapped", [594]], [[7580, 7580], "mapped", [99]], [[7581, 7581], "mapped", [597]], [[7582, 7582], "mapped", [240]], [[7583, 7583], "mapped", [604]], [[7584, 7584], "mapped", [102]], [[7585, 7585], "mapped", [607]], [[7586, 7586], "mapped", [609]], [[7587, 7587], "mapped", [613]], [[7588, 7588], "mapped", [616]], [[7589, 7589], "mapped", [617]], [[7590, 7590], "mapped", [618]], [[7591, 7591], "mapped", [7547]], [[7592, 7592], "mapped", [669]], [[7593, 7593], "mapped", [621]], [[7594, 7594], "mapped", [7557]], [[7595, 7595], "mapped", [671]], [[7596, 7596], "mapped", [625]], [[7597, 7597], "mapped", [624]], [[7598, 7598], "mapped", [626]], [[7599, 7599], "mapped", [627]], [[7600, 7600], "mapped", [628]], [[7601, 7601], "mapped", [629]], [[7602, 7602], "mapped", [632]], [[7603, 7603], "mapped", [642]], [[7604, 7604], "mapped", [643]], [[7605, 7605], "mapped", [427]], [[7606, 7606], "mapped", [649]], [[7607, 7607], "mapped", [650]], [[7608, 7608], "mapped", [7452]], [[7609, 7609], "mapped", [651]], [[7610, 7610], "mapped", [652]], [[7611, 7611], "mapped", [122]], [[7612, 7612], "mapped", [656]], [[7613, 7613], "mapped", [657]], [[7614, 7614], "mapped", [658]], [[7615, 7615], "mapped", [952]], [[7616, 7619], "valid"], [[7620, 7626], "valid"], [[7627, 7654], "valid"], [[7655, 7669], "valid"], [[7670, 7675], "disallowed"], [[7676, 7676], "valid"], [[7677, 7677], "valid"], [[7678, 7679], "valid"], [[7680, 7680], "mapped", [7681]], [[7681, 7681], "valid"], [[7682, 7682], "mapped", [7683]], [[7683, 7683], "valid"], [[7684, 7684], "mapped", [7685]], [[7685, 7685], "valid"], [[7686, 7686], "mapped", [7687]], [[7687, 7687], "valid"], [[7688, 7688], "mapped", [7689]], [[7689, 7689], "valid"], [[7690, 7690], "mapped", [7691]], [[7691, 7691], "valid"], [[7692, 7692], "mapped", [7693]], [[7693, 7693], "valid"], [[7694, 7694], "mapped", [7695]], [[7695, 7695], "valid"], [[7696, 7696], "mapped", [7697]], [[7697, 7697], "valid"], [[7698, 7698], "mapped", [7699]], [[7699, 7699], "valid"], [[7700, 7700], "mapped", [7701]], [[7701, 7701], "valid"], [[7702, 7702], "mapped", [7703]], [[7703, 7703], "valid"], [[7704, 7704], "mapped", [7705]], [[7705, 7705], "valid"], [[7706, 7706], "mapped", [7707]], [[7707, 7707], "valid"], [[7708, 7708], "mapped", [7709]], [[7709, 7709], "valid"], [[7710, 7710], "mapped", [7711]], [[7711, 7711], "valid"], [[7712, 7712], "mapped", [7713]], [[7713, 7713], "valid"], [[7714, 7714], "mapped", [7715]], [[7715, 7715], "valid"], [[7716, 7716], "mapped", [7717]], [[7717, 7717], "valid"], [[7718, 7718], "mapped", [7719]], [[7719, 7719], "valid"], [[7720, 7720], "mapped", [7721]], [[7721, 7721], "valid"], [[7722, 7722], "mapped", [7723]], [[7723, 7723], "valid"], [[7724, 7724], "mapped", [7725]], [[7725, 7725], "valid"], [[7726, 7726], "mapped", [7727]], [[7727, 7727], "valid"], [[7728, 7728], "mapped", [7729]], [[7729, 7729], "valid"], [[7730, 7730], "mapped", [7731]], [[7731, 7731], "valid"], [[7732, 7732], "mapped", [7733]], [[7733, 7733], "valid"], [[7734, 7734], "mapped", [7735]], [[7735, 7735], "valid"], [[7736, 7736], "mapped", [7737]], [[7737, 7737], "valid"], [[7738, 7738], "mapped", [7739]], [[7739, 7739], "valid"], [[7740, 7740], "mapped", [7741]], [[7741, 7741], "valid"], [[7742, 7742], "mapped", [7743]], [[7743, 7743], "valid"], [[7744, 7744], "mapped", [7745]], [[7745, 7745], "valid"], [[7746, 7746], "mapped", [7747]], [[7747, 7747], "valid"], [[7748, 7748], "mapped", [7749]], [[7749, 7749], "valid"], [[7750, 7750], "mapped", [7751]], [[7751, 7751], "valid"], [[7752, 7752], "mapped", [7753]], [[7753, 7753], "valid"], [[7754, 7754], "mapped", [7755]], [[7755, 7755], "valid"], [[7756, 7756], "mapped", [7757]], [[7757, 7757], "valid"], [[7758, 7758], "mapped", [7759]], [[7759, 7759], "valid"], [[7760, 7760], "mapped", [7761]], [[7761, 7761], "valid"], [[7762, 7762], "mapped", [7763]], [[7763, 7763], "valid"], [[7764, 7764], "mapped", [7765]], [[7765, 7765], "valid"], [[7766, 7766], "mapped", [7767]], [[7767, 7767], "valid"], [[7768, 7768], "mapped", [7769]], [[7769, 7769], "valid"], [[7770, 7770], "mapped", [7771]], [[7771, 7771], "valid"], [[7772, 7772], "mapped", [7773]], [[7773, 7773], "valid"], [[7774, 7774], "mapped", [7775]], [[7775, 7775], "valid"], [[7776, 7776], "mapped", [7777]], [[7777, 7777], "valid"], [[7778, 7778], "mapped", [7779]], [[7779, 7779], "valid"], [[7780, 7780], "mapped", [7781]], [[7781, 7781], "valid"], [[7782, 7782], "mapped", [7783]], [[7783, 7783], "valid"], [[7784, 7784], "mapped", [7785]], [[7785, 7785], "valid"], [[7786, 7786], "mapped", [7787]], [[7787, 7787], "valid"], [[7788, 7788], "mapped", [7789]], [[7789, 7789], "valid"], [[7790, 7790], "mapped", [7791]], [[7791, 7791], "valid"], [[7792, 7792], "mapped", [7793]], [[7793, 7793], "valid"], [[7794, 7794], "mapped", [7795]], [[7795, 7795], "valid"], [[7796, 7796], "mapped", [7797]], [[7797, 7797], "valid"], [[7798, 7798], "mapped", [7799]], [[7799, 7799], "valid"], [[7800, 7800], "mapped", [7801]], [[7801, 7801], "valid"], [[7802, 7802], "mapped", [7803]], [[7803, 7803], "valid"], [[7804, 7804], "mapped", [7805]], [[7805, 7805], "valid"], [[7806, 7806], "mapped", [7807]], [[7807, 7807], "valid"], [[7808, 7808], "mapped", [7809]], [[7809, 7809], "valid"], [[7810, 7810], "mapped", [7811]], [[7811, 7811], "valid"], [[7812, 7812], "mapped", [7813]], [[7813, 7813], "valid"], [[7814, 7814], "mapped", [7815]], [[7815, 7815], "valid"], [[7816, 7816], "mapped", [7817]], [[7817, 7817], "valid"], [[7818, 7818], "mapped", [7819]], [[7819, 7819], "valid"], [[7820, 7820], "mapped", [7821]], [[7821, 7821], "valid"], [[7822, 7822], "mapped", [7823]], [[7823, 7823], "valid"], [[7824, 7824], "mapped", [7825]], [[7825, 7825], "valid"], [[7826, 7826], "mapped", [7827]], [[7827, 7827], "valid"], [[7828, 7828], "mapped", [7829]], [[7829, 7833], "valid"], [[7834, 7834], "mapped", [97, 702]], [[7835, 7835], "mapped", [7777]], [[7836, 7837], "valid"], [[7838, 7838], "mapped", [115, 115]], [[7839, 7839], "valid"], [[7840, 7840], "mapped", [7841]], [[7841, 7841], "valid"], [[7842, 7842], "mapped", [7843]], [[7843, 7843], "valid"], [[7844, 7844], "mapped", [7845]], [[7845, 7845], "valid"], [[7846, 7846], "mapped", [7847]], [[7847, 7847], "valid"], [[7848, 7848], "mapped", [7849]], [[7849, 7849], "valid"], [[7850, 7850], "mapped", [7851]], [[7851, 7851], "valid"], [[7852, 7852], "mapped", [7853]], [[7853, 7853], "valid"], [[7854, 7854], "mapped", [7855]], [[7855, 7855], "valid"], [[7856, 7856], "mapped", [7857]], [[7857, 7857], "valid"], [[7858, 7858], "mapped", [7859]], [[7859, 7859], "valid"], [[7860, 7860], "mapped", [7861]], [[7861, 7861], "valid"], [[7862, 7862], "mapped", [7863]], [[7863, 7863], "valid"], [[7864, 7864], "mapped", [7865]], [[7865, 7865], "valid"], [[7866, 7866], "mapped", [7867]], [[7867, 7867], "valid"], [[7868, 7868], "mapped", [7869]], [[7869, 7869], "valid"], [[7870, 7870], "mapped", [7871]], [[7871, 7871], "valid"], [[7872, 7872], "mapped", [7873]], [[7873, 7873], "valid"], [[7874, 7874], "mapped", [7875]], [[7875, 7875], "valid"], [[7876, 7876], "mapped", [7877]], [[7877, 7877], "valid"], [[7878, 7878], "mapped", [7879]], [[7879, 7879], "valid"], [[7880, 7880], "mapped", [7881]], [[7881, 7881], "valid"], [[7882, 7882], "mapped", [7883]], [[7883, 7883], "valid"], [[7884, 7884], "mapped", [7885]], [[7885, 7885], "valid"], [[7886, 7886], "mapped", [7887]], [[7887, 7887], "valid"], [[7888, 7888], "mapped", [7889]], [[7889, 7889], "valid"], [[7890, 7890], "mapped", [7891]], [[7891, 7891], "valid"], [[7892, 7892], "mapped", [7893]], [[7893, 7893], "valid"], [[7894, 7894], "mapped", [7895]], [[7895, 7895], "valid"], [[7896, 7896], "mapped", [7897]], [[7897, 7897], "valid"], [[7898, 7898], "mapped", [7899]], [[7899, 7899], "valid"], [[7900, 7900], "mapped", [7901]], [[7901, 7901], "valid"], [[7902, 7902], "mapped", [7903]], [[7903, 7903], "valid"], [[7904, 7904], "mapped", [7905]], [[7905, 7905], "valid"], [[7906, 7906], "mapped", [7907]], [[7907, 7907], "valid"], [[7908, 7908], "mapped", [7909]], [[7909, 7909], "valid"], [[7910, 7910], "mapped", [7911]], [[7911, 7911], "valid"], [[7912, 7912], "mapped", [7913]], [[7913, 7913], "valid"], [[7914, 7914], "mapped", [7915]], [[7915, 7915], "valid"], [[7916, 7916], "mapped", [7917]], [[7917, 7917], "valid"], [[7918, 7918], "mapped", [7919]], [[7919, 7919], "valid"], [[7920, 7920], "mapped", [7921]], [[7921, 7921], "valid"], [[7922, 7922], "mapped", [7923]], [[7923, 7923], "valid"], [[7924, 7924], "mapped", [7925]], [[7925, 7925], "valid"], [[7926, 7926], "mapped", [7927]], [[7927, 7927], "valid"], [[7928, 7928], "mapped", [7929]], [[7929, 7929], "valid"], [[7930, 7930], "mapped", [7931]], [[7931, 7931], "valid"], [[7932, 7932], "mapped", [7933]], [[7933, 7933], "valid"], [[7934, 7934], "mapped", [7935]], [[7935, 7935], "valid"], [[7936, 7943], "valid"], [[7944, 7944], "mapped", [7936]], [[7945, 7945], "mapped", [7937]], [[7946, 7946], "mapped", [7938]], [[7947, 7947], "mapped", [7939]], [[7948, 7948], "mapped", [7940]], [[7949, 7949], "mapped", [7941]], [[7950, 7950], "mapped", [7942]], [[7951, 7951], "mapped", [7943]], [[7952, 7957], "valid"], [[7958, 7959], "disallowed"], [[7960, 7960], "mapped", [7952]], [[7961, 7961], "mapped", [7953]], [[7962, 7962], "mapped", [7954]], [[7963, 7963], "mapped", [7955]], [[7964, 7964], "mapped", [7956]], [[7965, 7965], "mapped", [7957]], [[7966, 7967], "disallowed"], [[7968, 7975], "valid"], [[7976, 7976], "mapped", [7968]], [[7977, 7977], "mapped", [7969]], [[7978, 7978], "mapped", [7970]], [[7979, 7979], "mapped", [7971]], [[7980, 7980], "mapped", [7972]], [[7981, 7981], "mapped", [7973]], [[7982, 7982], "mapped", [7974]], [[7983, 7983], "mapped", [7975]], [[7984, 7991], "valid"], [[7992, 7992], "mapped", [7984]], [[7993, 7993], "mapped", [7985]], [[7994, 7994], "mapped", [7986]], [[7995, 7995], "mapped", [7987]], [[7996, 7996], "mapped", [7988]], [[7997, 7997], "mapped", [7989]], [[7998, 7998], "mapped", [7990]], [[7999, 7999], "mapped", [7991]], [[8e3, 8005], "valid"], [[8006, 8007], "disallowed"], [[8008, 8008], "mapped", [8e3]], [[8009, 8009], "mapped", [8001]], [[8010, 8010], "mapped", [8002]], [[8011, 8011], "mapped", [8003]], [[8012, 8012], "mapped", [8004]], [[8013, 8013], "mapped", [8005]], [[8014, 8015], "disallowed"], [[8016, 8023], "valid"], [[8024, 8024], "disallowed"], [[8025, 8025], "mapped", [8017]], [[8026, 8026], "disallowed"], [[8027, 8027], "mapped", [8019]], [[8028, 8028], "disallowed"], [[8029, 8029], "mapped", [8021]], [[8030, 8030], "disallowed"], [[8031, 8031], "mapped", [8023]], [[8032, 8039], "valid"], [[8040, 8040], "mapped", [8032]], [[8041, 8041], "mapped", [8033]], [[8042, 8042], "mapped", [8034]], [[8043, 8043], "mapped", [8035]], [[8044, 8044], "mapped", [8036]], [[8045, 8045], "mapped", [8037]], [[8046, 8046], "mapped", [8038]], [[8047, 8047], "mapped", [8039]], [[8048, 8048], "valid"], [[8049, 8049], "mapped", [940]], [[8050, 8050], "valid"], [[8051, 8051], "mapped", [941]], [[8052, 8052], "valid"], [[8053, 8053], "mapped", [942]], [[8054, 8054], "valid"], [[8055, 8055], "mapped", [943]], [[8056, 8056], "valid"], [[8057, 8057], "mapped", [972]], [[8058, 8058], "valid"], [[8059, 8059], "mapped", [973]], [[8060, 8060], "valid"], [[8061, 8061], "mapped", [974]], [[8062, 8063], "disallowed"], [[8064, 8064], "mapped", [7936, 953]], [[8065, 8065], "mapped", [7937, 953]], [[8066, 8066], "mapped", [7938, 953]], [[8067, 8067], "mapped", [7939, 953]], [[8068, 8068], "mapped", [7940, 953]], [[8069, 8069], "mapped", [7941, 953]], [[8070, 8070], "mapped", [7942, 953]], [[8071, 8071], "mapped", [7943, 953]], [[8072, 8072], "mapped", [7936, 953]], [[8073, 8073], "mapped", [7937, 953]], [[8074, 8074], "mapped", [7938, 953]], [[8075, 8075], "mapped", [7939, 953]], [[8076, 8076], "mapped", [7940, 953]], [[8077, 8077], "mapped", [7941, 953]], [[8078, 8078], "mapped", [7942, 953]], [[8079, 8079], "mapped", [7943, 953]], [[8080, 8080], "mapped", [7968, 953]], [[8081, 8081], "mapped", [7969, 953]], [[8082, 8082], "mapped", [7970, 953]], [[8083, 8083], "mapped", [7971, 953]], [[8084, 8084], "mapped", [7972, 953]], [[8085, 8085], "mapped", [7973, 953]], [[8086, 8086], "mapped", [7974, 953]], [[8087, 8087], "mapped", [7975, 953]], [[8088, 8088], "mapped", [7968, 953]], [[8089, 8089], "mapped", [7969, 953]], [[8090, 8090], "mapped", [7970, 953]], [[8091, 8091], "mapped", [7971, 953]], [[8092, 8092], "mapped", [7972, 953]], [[8093, 8093], "mapped", [7973, 953]], [[8094, 8094], "mapped", [7974, 953]], [[8095, 8095], "mapped", [7975, 953]], [[8096, 8096], "mapped", [8032, 953]], [[8097, 8097], "mapped", [8033, 953]], [[8098, 8098], "mapped", [8034, 953]], [[8099, 8099], "mapped", [8035, 953]], [[8100, 8100], "mapped", [8036, 953]], [[8101, 8101], "mapped", [8037, 953]], [[8102, 8102], "mapped", [8038, 953]], [[8103, 8103], "mapped", [8039, 953]], [[8104, 8104], "mapped", [8032, 953]], [[8105, 8105], "mapped", [8033, 953]], [[8106, 8106], "mapped", [8034, 953]], [[8107, 8107], "mapped", [8035, 953]], [[8108, 8108], "mapped", [8036, 953]], [[8109, 8109], "mapped", [8037, 953]], [[8110, 8110], "mapped", [8038, 953]], [[8111, 8111], "mapped", [8039, 953]], [[8112, 8113], "valid"], [[8114, 8114], "mapped", [8048, 953]], [[8115, 8115], "mapped", [945, 953]], [[8116, 8116], "mapped", [940, 953]], [[8117, 8117], "disallowed"], [[8118, 8118], "valid"], [[8119, 8119], "mapped", [8118, 953]], [[8120, 8120], "mapped", [8112]], [[8121, 8121], "mapped", [8113]], [[8122, 8122], "mapped", [8048]], [[8123, 8123], "mapped", [940]], [[8124, 8124], "mapped", [945, 953]], [[8125, 8125], "disallowed_STD3_mapped", [32, 787]], [[8126, 8126], "mapped", [953]], [[8127, 8127], "disallowed_STD3_mapped", [32, 787]], [[8128, 8128], "disallowed_STD3_mapped", [32, 834]], [[8129, 8129], "disallowed_STD3_mapped", [32, 776, 834]], [[8130, 8130], "mapped", [8052, 953]], [[8131, 8131], "mapped", [951, 953]], [[8132, 8132], "mapped", [942, 953]], [[8133, 8133], "disallowed"], [[8134, 8134], "valid"], [[8135, 8135], "mapped", [8134, 953]], [[8136, 8136], "mapped", [8050]], [[8137, 8137], "mapped", [941]], [[8138, 8138], "mapped", [8052]], [[8139, 8139], "mapped", [942]], [[8140, 8140], "mapped", [951, 953]], [[8141, 8141], "disallowed_STD3_mapped", [32, 787, 768]], [[8142, 8142], "disallowed_STD3_mapped", [32, 787, 769]], [[8143, 8143], "disallowed_STD3_mapped", [32, 787, 834]], [[8144, 8146], "valid"], [[8147, 8147], "mapped", [912]], [[8148, 8149], "disallowed"], [[8150, 8151], "valid"], [[8152, 8152], "mapped", [8144]], [[8153, 8153], "mapped", [8145]], [[8154, 8154], "mapped", [8054]], [[8155, 8155], "mapped", [943]], [[8156, 8156], "disallowed"], [[8157, 8157], "disallowed_STD3_mapped", [32, 788, 768]], [[8158, 8158], "disallowed_STD3_mapped", [32, 788, 769]], [[8159, 8159], "disallowed_STD3_mapped", [32, 788, 834]], [[8160, 8162], "valid"], [[8163, 8163], "mapped", [944]], [[8164, 8167], "valid"], [[8168, 8168], "mapped", [8160]], [[8169, 8169], "mapped", [8161]], [[8170, 8170], "mapped", [8058]], [[8171, 8171], "mapped", [973]], [[8172, 8172], "mapped", [8165]], [[8173, 8173], "disallowed_STD3_mapped", [32, 776, 768]], [[8174, 8174], "disallowed_STD3_mapped", [32, 776, 769]], [[8175, 8175], "disallowed_STD3_mapped", [96]], [[8176, 8177], "disallowed"], [[8178, 8178], "mapped", [8060, 953]], [[8179, 8179], "mapped", [969, 953]], [[8180, 8180], "mapped", [974, 953]], [[8181, 8181], "disallowed"], [[8182, 8182], "valid"], [[8183, 8183], "mapped", [8182, 953]], [[8184, 8184], "mapped", [8056]], [[8185, 8185], "mapped", [972]], [[8186, 8186], "mapped", [8060]], [[8187, 8187], "mapped", [974]], [[8188, 8188], "mapped", [969, 953]], [[8189, 8189], "disallowed_STD3_mapped", [32, 769]], [[8190, 8190], "disallowed_STD3_mapped", [32, 788]], [[8191, 8191], "disallowed"], [[8192, 8202], "disallowed_STD3_mapped", [32]], [[8203, 8203], "ignored"], [[8204, 8205], "deviation", []], [[8206, 8207], "disallowed"], [[8208, 8208], "valid", [], "NV8"], [[8209, 8209], "mapped", [8208]], [[8210, 8214], "valid", [], "NV8"], [[8215, 8215], "disallowed_STD3_mapped", [32, 819]], [[8216, 8227], "valid", [], "NV8"], [[8228, 8230], "disallowed"], [[8231, 8231], "valid", [], "NV8"], [[8232, 8238], "disallowed"], [[8239, 8239], "disallowed_STD3_mapped", [32]], [[8240, 8242], "valid", [], "NV8"], [[8243, 8243], "mapped", [8242, 8242]], [[8244, 8244], "mapped", [8242, 8242, 8242]], [[8245, 8245], "valid", [], "NV8"], [[8246, 8246], "mapped", [8245, 8245]], [[8247, 8247], "mapped", [8245, 8245, 8245]], [[8248, 8251], "valid", [], "NV8"], [[8252, 8252], "disallowed_STD3_mapped", [33, 33]], [[8253, 8253], "valid", [], "NV8"], [[8254, 8254], "disallowed_STD3_mapped", [32, 773]], [[8255, 8262], "valid", [], "NV8"], [[8263, 8263], "disallowed_STD3_mapped", [63, 63]], [[8264, 8264], "disallowed_STD3_mapped", [63, 33]], [[8265, 8265], "disallowed_STD3_mapped", [33, 63]], [[8266, 8269], "valid", [], "NV8"], [[8270, 8274], "valid", [], "NV8"], [[8275, 8276], "valid", [], "NV8"], [[8277, 8278], "valid", [], "NV8"], [[8279, 8279], "mapped", [8242, 8242, 8242, 8242]], [[8280, 8286], "valid", [], "NV8"], [[8287, 8287], "disallowed_STD3_mapped", [32]], [[8288, 8288], "ignored"], [[8289, 8291], "disallowed"], [[8292, 8292], "ignored"], [[8293, 8293], "disallowed"], [[8294, 8297], "disallowed"], [[8298, 8303], "disallowed"], [[8304, 8304], "mapped", [48]], [[8305, 8305], "mapped", [105]], [[8306, 8307], "disallowed"], [[8308, 8308], "mapped", [52]], [[8309, 8309], "mapped", [53]], [[8310, 8310], "mapped", [54]], [[8311, 8311], "mapped", [55]], [[8312, 8312], "mapped", [56]], [[8313, 8313], "mapped", [57]], [[8314, 8314], "disallowed_STD3_mapped", [43]], [[8315, 8315], "mapped", [8722]], [[8316, 8316], "disallowed_STD3_mapped", [61]], [[8317, 8317], "disallowed_STD3_mapped", [40]], [[8318, 8318], "disallowed_STD3_mapped", [41]], [[8319, 8319], "mapped", [110]], [[8320, 8320], "mapped", [48]], [[8321, 8321], "mapped", [49]], [[8322, 8322], "mapped", [50]], [[8323, 8323], "mapped", [51]], [[8324, 8324], "mapped", [52]], [[8325, 8325], "mapped", [53]], [[8326, 8326], "mapped", [54]], [[8327, 8327], "mapped", [55]], [[8328, 8328], "mapped", [56]], [[8329, 8329], "mapped", [57]], [[8330, 8330], "disallowed_STD3_mapped", [43]], [[8331, 8331], "mapped", [8722]], [[8332, 8332], "disallowed_STD3_mapped", [61]], [[8333, 8333], "disallowed_STD3_mapped", [40]], [[8334, 8334], "disallowed_STD3_mapped", [41]], [[8335, 8335], "disallowed"], [[8336, 8336], "mapped", [97]], [[8337, 8337], "mapped", [101]], [[8338, 8338], "mapped", [111]], [[8339, 8339], "mapped", [120]], [[8340, 8340], "mapped", [601]], [[8341, 8341], "mapped", [104]], [[8342, 8342], "mapped", [107]], [[8343, 8343], "mapped", [108]], [[8344, 8344], "mapped", [109]], [[8345, 8345], "mapped", [110]], [[8346, 8346], "mapped", [112]], [[8347, 8347], "mapped", [115]], [[8348, 8348], "mapped", [116]], [[8349, 8351], "disallowed"], [[8352, 8359], "valid", [], "NV8"], [[8360, 8360], "mapped", [114, 115]], [[8361, 8362], "valid", [], "NV8"], [[8363, 8363], "valid", [], "NV8"], [[8364, 8364], "valid", [], "NV8"], [[8365, 8367], "valid", [], "NV8"], [[8368, 8369], "valid", [], "NV8"], [[8370, 8373], "valid", [], "NV8"], [[8374, 8376], "valid", [], "NV8"], [[8377, 8377], "valid", [], "NV8"], [[8378, 8378], "valid", [], "NV8"], [[8379, 8381], "valid", [], "NV8"], [[8382, 8382], "valid", [], "NV8"], [[8383, 8399], "disallowed"], [[8400, 8417], "valid", [], "NV8"], [[8418, 8419], "valid", [], "NV8"], [[8420, 8426], "valid", [], "NV8"], [[8427, 8427], "valid", [], "NV8"], [[8428, 8431], "valid", [], "NV8"], [[8432, 8432], "valid", [], "NV8"], [[8433, 8447], "disallowed"], [[8448, 8448], "disallowed_STD3_mapped", [97, 47, 99]], [[8449, 8449], "disallowed_STD3_mapped", [97, 47, 115]], [[8450, 8450], "mapped", [99]], [[8451, 8451], "mapped", [176, 99]], [[8452, 8452], "valid", [], "NV8"], [[8453, 8453], "disallowed_STD3_mapped", [99, 47, 111]], [[8454, 8454], "disallowed_STD3_mapped", [99, 47, 117]], [[8455, 8455], "mapped", [603]], [[8456, 8456], "valid", [], "NV8"], [[8457, 8457], "mapped", [176, 102]], [[8458, 8458], "mapped", [103]], [[8459, 8462], "mapped", [104]], [[8463, 8463], "mapped", [295]], [[8464, 8465], "mapped", [105]], [[8466, 8467], "mapped", [108]], [[8468, 8468], "valid", [], "NV8"], [[8469, 8469], "mapped", [110]], [[8470, 8470], "mapped", [110, 111]], [[8471, 8472], "valid", [], "NV8"], [[8473, 8473], "mapped", [112]], [[8474, 8474], "mapped", [113]], [[8475, 8477], "mapped", [114]], [[8478, 8479], "valid", [], "NV8"], [[8480, 8480], "mapped", [115, 109]], [[8481, 8481], "mapped", [116, 101, 108]], [[8482, 8482], "mapped", [116, 109]], [[8483, 8483], "valid", [], "NV8"], [[8484, 8484], "mapped", [122]], [[8485, 8485], "valid", [], "NV8"], [[8486, 8486], "mapped", [969]], [[8487, 8487], "valid", [], "NV8"], [[8488, 8488], "mapped", [122]], [[8489, 8489], "valid", [], "NV8"], [[8490, 8490], "mapped", [107]], [[8491, 8491], "mapped", [229]], [[8492, 8492], "mapped", [98]], [[8493, 8493], "mapped", [99]], [[8494, 8494], "valid", [], "NV8"], [[8495, 8496], "mapped", [101]], [[8497, 8497], "mapped", [102]], [[8498, 8498], "disallowed"], [[8499, 8499], "mapped", [109]], [[8500, 8500], "mapped", [111]], [[8501, 8501], "mapped", [1488]], [[8502, 8502], "mapped", [1489]], [[8503, 8503], "mapped", [1490]], [[8504, 8504], "mapped", [1491]], [[8505, 8505], "mapped", [105]], [[8506, 8506], "valid", [], "NV8"], [[8507, 8507], "mapped", [102, 97, 120]], [[8508, 8508], "mapped", [960]], [[8509, 8510], "mapped", [947]], [[8511, 8511], "mapped", [960]], [[8512, 8512], "mapped", [8721]], [[8513, 8516], "valid", [], "NV8"], [[8517, 8518], "mapped", [100]], [[8519, 8519], "mapped", [101]], [[8520, 8520], "mapped", [105]], [[8521, 8521], "mapped", [106]], [[8522, 8523], "valid", [], "NV8"], [[8524, 8524], "valid", [], "NV8"], [[8525, 8525], "valid", [], "NV8"], [[8526, 8526], "valid"], [[8527, 8527], "valid", [], "NV8"], [[8528, 8528], "mapped", [49, 8260, 55]], [[8529, 8529], "mapped", [49, 8260, 57]], [[8530, 8530], "mapped", [49, 8260, 49, 48]], [[8531, 8531], "mapped", [49, 8260, 51]], [[8532, 8532], "mapped", [50, 8260, 51]], [[8533, 8533], "mapped", [49, 8260, 53]], [[8534, 8534], "mapped", [50, 8260, 53]], [[8535, 8535], "mapped", [51, 8260, 53]], [[8536, 8536], "mapped", [52, 8260, 53]], [[8537, 8537], "mapped", [49, 8260, 54]], [[8538, 8538], "mapped", [53, 8260, 54]], [[8539, 8539], "mapped", [49, 8260, 56]], [[8540, 8540], "mapped", [51, 8260, 56]], [[8541, 8541], "mapped", [53, 8260, 56]], [[8542, 8542], "mapped", [55, 8260, 56]], [[8543, 8543], "mapped", [49, 8260]], [[8544, 8544], "mapped", [105]], [[8545, 8545], "mapped", [105, 105]], [[8546, 8546], "mapped", [105, 105, 105]], [[8547, 8547], "mapped", [105, 118]], [[8548, 8548], "mapped", [118]], [[8549, 8549], "mapped", [118, 105]], [[8550, 8550], "mapped", [118, 105, 105]], [[8551, 8551], "mapped", [118, 105, 105, 105]], [[8552, 8552], "mapped", [105, 120]], [[8553, 8553], "mapped", [120]], [[8554, 8554], "mapped", [120, 105]], [[8555, 8555], "mapped", [120, 105, 105]], [[8556, 8556], "mapped", [108]], [[8557, 8557], "mapped", [99]], [[8558, 8558], "mapped", [100]], [[8559, 8559], "mapped", [109]], [[8560, 8560], "mapped", [105]], [[8561, 8561], "mapped", [105, 105]], [[8562, 8562], "mapped", [105, 105, 105]], [[8563, 8563], "mapped", [105, 118]], [[8564, 8564], "mapped", [118]], [[8565, 8565], "mapped", [118, 105]], [[8566, 8566], "mapped", [118, 105, 105]], [[8567, 8567], "mapped", [118, 105, 105, 105]], [[8568, 8568], "mapped", [105, 120]], [[8569, 8569], "mapped", [120]], [[8570, 8570], "mapped", [120, 105]], [[8571, 8571], "mapped", [120, 105, 105]], [[8572, 8572], "mapped", [108]], [[8573, 8573], "mapped", [99]], [[8574, 8574], "mapped", [100]], [[8575, 8575], "mapped", [109]], [[8576, 8578], "valid", [], "NV8"], [[8579, 8579], "disallowed"], [[8580, 8580], "valid"], [[8581, 8584], "valid", [], "NV8"], [[8585, 8585], "mapped", [48, 8260, 51]], [[8586, 8587], "valid", [], "NV8"], [[8588, 8591], "disallowed"], [[8592, 8682], "valid", [], "NV8"], [[8683, 8691], "valid", [], "NV8"], [[8692, 8703], "valid", [], "NV8"], [[8704, 8747], "valid", [], "NV8"], [[8748, 8748], "mapped", [8747, 8747]], [[8749, 8749], "mapped", [8747, 8747, 8747]], [[8750, 8750], "valid", [], "NV8"], [[8751, 8751], "mapped", [8750, 8750]], [[8752, 8752], "mapped", [8750, 8750, 8750]], [[8753, 8799], "valid", [], "NV8"], [[8800, 8800], "disallowed_STD3_valid"], [[8801, 8813], "valid", [], "NV8"], [[8814, 8815], "disallowed_STD3_valid"], [[8816, 8945], "valid", [], "NV8"], [[8946, 8959], "valid", [], "NV8"], [[8960, 8960], "valid", [], "NV8"], [[8961, 8961], "valid", [], "NV8"], [[8962, 9e3], "valid", [], "NV8"], [[9001, 9001], "mapped", [12296]], [[9002, 9002], "mapped", [12297]], [[9003, 9082], "valid", [], "NV8"], [[9083, 9083], "valid", [], "NV8"], [[9084, 9084], "valid", [], "NV8"], [[9085, 9114], "valid", [], "NV8"], [[9115, 9166], "valid", [], "NV8"], [[9167, 9168], "valid", [], "NV8"], [[9169, 9179], "valid", [], "NV8"], [[9180, 9191], "valid", [], "NV8"], [[9192, 9192], "valid", [], "NV8"], [[9193, 9203], "valid", [], "NV8"], [[9204, 9210], "valid", [], "NV8"], [[9211, 9215], "disallowed"], [[9216, 9252], "valid", [], "NV8"], [[9253, 9254], "valid", [], "NV8"], [[9255, 9279], "disallowed"], [[9280, 9290], "valid", [], "NV8"], [[9291, 9311], "disallowed"], [[9312, 9312], "mapped", [49]], [[9313, 9313], "mapped", [50]], [[9314, 9314], "mapped", [51]], [[9315, 9315], "mapped", [52]], [[9316, 9316], "mapped", [53]], [[9317, 9317], "mapped", [54]], [[9318, 9318], "mapped", [55]], [[9319, 9319], "mapped", [56]], [[9320, 9320], "mapped", [57]], [[9321, 9321], "mapped", [49, 48]], [[9322, 9322], "mapped", [49, 49]], [[9323, 9323], "mapped", [49, 50]], [[9324, 9324], "mapped", [49, 51]], [[9325, 9325], "mapped", [49, 52]], [[9326, 9326], "mapped", [49, 53]], [[9327, 9327], "mapped", [49, 54]], [[9328, 9328], "mapped", [49, 55]], [[9329, 9329], "mapped", [49, 56]], [[9330, 9330], "mapped", [49, 57]], [[9331, 9331], "mapped", [50, 48]], [[9332, 9332], "disallowed_STD3_mapped", [40, 49, 41]], [[9333, 9333], "disallowed_STD3_mapped", [40, 50, 41]], [[9334, 9334], "disallowed_STD3_mapped", [40, 51, 41]], [[9335, 9335], "disallowed_STD3_mapped", [40, 52, 41]], [[9336, 9336], "disallowed_STD3_mapped", [40, 53, 41]], [[9337, 9337], "disallowed_STD3_mapped", [40, 54, 41]], [[9338, 9338], "disallowed_STD3_mapped", [40, 55, 41]], [[9339, 9339], "disallowed_STD3_mapped", [40, 56, 41]], [[9340, 9340], "disallowed_STD3_mapped", [40, 57, 41]], [[9341, 9341], "disallowed_STD3_mapped", [40, 49, 48, 41]], [[9342, 9342], "disallowed_STD3_mapped", [40, 49, 49, 41]], [[9343, 9343], "disallowed_STD3_mapped", [40, 49, 50, 41]], [[9344, 9344], "disallowed_STD3_mapped", [40, 49, 51, 41]], [[9345, 9345], "disallowed_STD3_mapped", [40, 49, 52, 41]], [[9346, 9346], "disallowed_STD3_mapped", [40, 49, 53, 41]], [[9347, 9347], "disallowed_STD3_mapped", [40, 49, 54, 41]], [[9348, 9348], "disallowed_STD3_mapped", [40, 49, 55, 41]], [[9349, 9349], "disallowed_STD3_mapped", [40, 49, 56, 41]], [[9350, 9350], "disallowed_STD3_mapped", [40, 49, 57, 41]], [[9351, 9351], "disallowed_STD3_mapped", [40, 50, 48, 41]], [[9352, 9371], "disallowed"], [[9372, 9372], "disallowed_STD3_mapped", [40, 97, 41]], [[9373, 9373], "disallowed_STD3_mapped", [40, 98, 41]], [[9374, 9374], "disallowed_STD3_mapped", [40, 99, 41]], [[9375, 9375], "disallowed_STD3_mapped", [40, 100, 41]], [[9376, 9376], "disallowed_STD3_mapped", [40, 101, 41]], [[9377, 9377], "disallowed_STD3_mapped", [40, 102, 41]], [[9378, 9378], "disallowed_STD3_mapped", [40, 103, 41]], [[9379, 9379], "disallowed_STD3_mapped", [40, 104, 41]], [[9380, 9380], "disallowed_STD3_mapped", [40, 105, 41]], [[9381, 9381], "disallowed_STD3_mapped", [40, 106, 41]], [[9382, 9382], "disallowed_STD3_mapped", [40, 107, 41]], [[9383, 9383], "disallowed_STD3_mapped", [40, 108, 41]], [[9384, 9384], "disallowed_STD3_mapped", [40, 109, 41]], [[9385, 9385], "disallowed_STD3_mapped", [40, 110, 41]], [[9386, 9386], "disallowed_STD3_mapped", [40, 111, 41]], [[9387, 9387], "disallowed_STD3_mapped", [40, 112, 41]], [[9388, 9388], "disallowed_STD3_mapped", [40, 113, 41]], [[9389, 9389], "disallowed_STD3_mapped", [40, 114, 41]], [[9390, 9390], "disallowed_STD3_mapped", [40, 115, 41]], [[9391, 9391], "disallowed_STD3_mapped", [40, 116, 41]], [[9392, 9392], "disallowed_STD3_mapped", [40, 117, 41]], [[9393, 9393], "disallowed_STD3_mapped", [40, 118, 41]], [[9394, 9394], "disallowed_STD3_mapped", [40, 119, 41]], [[9395, 9395], "disallowed_STD3_mapped", [40, 120, 41]], [[9396, 9396], "disallowed_STD3_mapped", [40, 121, 41]], [[9397, 9397], "disallowed_STD3_mapped", [40, 122, 41]], [[9398, 9398], "mapped", [97]], [[9399, 9399], "mapped", [98]], [[9400, 9400], "mapped", [99]], [[9401, 9401], "mapped", [100]], [[9402, 9402], "mapped", [101]], [[9403, 9403], "mapped", [102]], [[9404, 9404], "mapped", [103]], [[9405, 9405], "mapped", [104]], [[9406, 9406], "mapped", [105]], [[9407, 9407], "mapped", [106]], [[9408, 9408], "mapped", [107]], [[9409, 9409], "mapped", [108]], [[9410, 9410], "mapped", [109]], [[9411, 9411], "mapped", [110]], [[9412, 9412], "mapped", [111]], [[9413, 9413], "mapped", [112]], [[9414, 9414], "mapped", [113]], [[9415, 9415], "mapped", [114]], [[9416, 9416], "mapped", [115]], [[9417, 9417], "mapped", [116]], [[9418, 9418], "mapped", [117]], [[9419, 9419], "mapped", [118]], [[9420, 9420], "mapped", [119]], [[9421, 9421], "mapped", [120]], [[9422, 9422], "mapped", [121]], [[9423, 9423], "mapped", [122]], [[9424, 9424], "mapped", [97]], [[9425, 9425], "mapped", [98]], [[9426, 9426], "mapped", [99]], [[9427, 9427], "mapped", [100]], [[9428, 9428], "mapped", [101]], [[9429, 9429], "mapped", [102]], [[9430, 9430], "mapped", [103]], [[9431, 9431], "mapped", [104]], [[9432, 9432], "mapped", [105]], [[9433, 9433], "mapped", [106]], [[9434, 9434], "mapped", [107]], [[9435, 9435], "mapped", [108]], [[9436, 9436], "mapped", [109]], [[9437, 9437], "mapped", [110]], [[9438, 9438], "mapped", [111]], [[9439, 9439], "mapped", [112]], [[9440, 9440], "mapped", [113]], [[9441, 9441], "mapped", [114]], [[9442, 9442], "mapped", [115]], [[9443, 9443], "mapped", [116]], [[9444, 9444], "mapped", [117]], [[9445, 9445], "mapped", [118]], [[9446, 9446], "mapped", [119]], [[9447, 9447], "mapped", [120]], [[9448, 9448], "mapped", [121]], [[9449, 9449], "mapped", [122]], [[9450, 9450], "mapped", [48]], [[9451, 9470], "valid", [], "NV8"], [[9471, 9471], "valid", [], "NV8"], [[9472, 9621], "valid", [], "NV8"], [[9622, 9631], "valid", [], "NV8"], [[9632, 9711], "valid", [], "NV8"], [[9712, 9719], "valid", [], "NV8"], [[9720, 9727], "valid", [], "NV8"], [[9728, 9747], "valid", [], "NV8"], [[9748, 9749], "valid", [], "NV8"], [[9750, 9751], "valid", [], "NV8"], [[9752, 9752], "valid", [], "NV8"], [[9753, 9753], "valid", [], "NV8"], [[9754, 9839], "valid", [], "NV8"], [[9840, 9841], "valid", [], "NV8"], [[9842, 9853], "valid", [], "NV8"], [[9854, 9855], "valid", [], "NV8"], [[9856, 9865], "valid", [], "NV8"], [[9866, 9873], "valid", [], "NV8"], [[9874, 9884], "valid", [], "NV8"], [[9885, 9885], "valid", [], "NV8"], [[9886, 9887], "valid", [], "NV8"], [[9888, 9889], "valid", [], "NV8"], [[9890, 9905], "valid", [], "NV8"], [[9906, 9906], "valid", [], "NV8"], [[9907, 9916], "valid", [], "NV8"], [[9917, 9919], "valid", [], "NV8"], [[9920, 9923], "valid", [], "NV8"], [[9924, 9933], "valid", [], "NV8"], [[9934, 9934], "valid", [], "NV8"], [[9935, 9953], "valid", [], "NV8"], [[9954, 9954], "valid", [], "NV8"], [[9955, 9955], "valid", [], "NV8"], [[9956, 9959], "valid", [], "NV8"], [[9960, 9983], "valid", [], "NV8"], [[9984, 9984], "valid", [], "NV8"], [[9985, 9988], "valid", [], "NV8"], [[9989, 9989], "valid", [], "NV8"], [[9990, 9993], "valid", [], "NV8"], [[9994, 9995], "valid", [], "NV8"], [[9996, 10023], "valid", [], "NV8"], [[10024, 10024], "valid", [], "NV8"], [[10025, 10059], "valid", [], "NV8"], [[10060, 10060], "valid", [], "NV8"], [[10061, 10061], "valid", [], "NV8"], [[10062, 10062], "valid", [], "NV8"], [[10063, 10066], "valid", [], "NV8"], [[10067, 10069], "valid", [], "NV8"], [[10070, 10070], "valid", [], "NV8"], [[10071, 10071], "valid", [], "NV8"], [[10072, 10078], "valid", [], "NV8"], [[10079, 10080], "valid", [], "NV8"], [[10081, 10087], "valid", [], "NV8"], [[10088, 10101], "valid", [], "NV8"], [[10102, 10132], "valid", [], "NV8"], [[10133, 10135], "valid", [], "NV8"], [[10136, 10159], "valid", [], "NV8"], [[10160, 10160], "valid", [], "NV8"], [[10161, 10174], "valid", [], "NV8"], [[10175, 10175], "valid", [], "NV8"], [[10176, 10182], "valid", [], "NV8"], [[10183, 10186], "valid", [], "NV8"], [[10187, 10187], "valid", [], "NV8"], [[10188, 10188], "valid", [], "NV8"], [[10189, 10189], "valid", [], "NV8"], [[10190, 10191], "valid", [], "NV8"], [[10192, 10219], "valid", [], "NV8"], [[10220, 10223], "valid", [], "NV8"], [[10224, 10239], "valid", [], "NV8"], [[10240, 10495], "valid", [], "NV8"], [[10496, 10763], "valid", [], "NV8"], [[10764, 10764], "mapped", [8747, 8747, 8747, 8747]], [[10765, 10867], "valid", [], "NV8"], [[10868, 10868], "disallowed_STD3_mapped", [58, 58, 61]], [[10869, 10869], "disallowed_STD3_mapped", [61, 61]], [[10870, 10870], "disallowed_STD3_mapped", [61, 61, 61]], [[10871, 10971], "valid", [], "NV8"], [[10972, 10972], "mapped", [10973, 824]], [[10973, 11007], "valid", [], "NV8"], [[11008, 11021], "valid", [], "NV8"], [[11022, 11027], "valid", [], "NV8"], [[11028, 11034], "valid", [], "NV8"], [[11035, 11039], "valid", [], "NV8"], [[11040, 11043], "valid", [], "NV8"], [[11044, 11084], "valid", [], "NV8"], [[11085, 11087], "valid", [], "NV8"], [[11088, 11092], "valid", [], "NV8"], [[11093, 11097], "valid", [], "NV8"], [[11098, 11123], "valid", [], "NV8"], [[11124, 11125], "disallowed"], [[11126, 11157], "valid", [], "NV8"], [[11158, 11159], "disallowed"], [[11160, 11193], "valid", [], "NV8"], [[11194, 11196], "disallowed"], [[11197, 11208], "valid", [], "NV8"], [[11209, 11209], "disallowed"], [[11210, 11217], "valid", [], "NV8"], [[11218, 11243], "disallowed"], [[11244, 11247], "valid", [], "NV8"], [[11248, 11263], "disallowed"], [[11264, 11264], "mapped", [11312]], [[11265, 11265], "mapped", [11313]], [[11266, 11266], "mapped", [11314]], [[11267, 11267], "mapped", [11315]], [[11268, 11268], "mapped", [11316]], [[11269, 11269], "mapped", [11317]], [[11270, 11270], "mapped", [11318]], [[11271, 11271], "mapped", [11319]], [[11272, 11272], "mapped", [11320]], [[11273, 11273], "mapped", [11321]], [[11274, 11274], "mapped", [11322]], [[11275, 11275], "mapped", [11323]], [[11276, 11276], "mapped", [11324]], [[11277, 11277], "mapped", [11325]], [[11278, 11278], "mapped", [11326]], [[11279, 11279], "mapped", [11327]], [[11280, 11280], "mapped", [11328]], [[11281, 11281], "mapped", [11329]], [[11282, 11282], "mapped", [11330]], [[11283, 11283], "mapped", [11331]], [[11284, 11284], "mapped", [11332]], [[11285, 11285], "mapped", [11333]], [[11286, 11286], "mapped", [11334]], [[11287, 11287], "mapped", [11335]], [[11288, 11288], "mapped", [11336]], [[11289, 11289], "mapped", [11337]], [[11290, 11290], "mapped", [11338]], [[11291, 11291], "mapped", [11339]], [[11292, 11292], "mapped", [11340]], [[11293, 11293], "mapped", [11341]], [[11294, 11294], "mapped", [11342]], [[11295, 11295], "mapped", [11343]], [[11296, 11296], "mapped", [11344]], [[11297, 11297], "mapped", [11345]], [[11298, 11298], "mapped", [11346]], [[11299, 11299], "mapped", [11347]], [[11300, 11300], "mapped", [11348]], [[11301, 11301], "mapped", [11349]], [[11302, 11302], "mapped", [11350]], [[11303, 11303], "mapped", [11351]], [[11304, 11304], "mapped", [11352]], [[11305, 11305], "mapped", [11353]], [[11306, 11306], "mapped", [11354]], [[11307, 11307], "mapped", [11355]], [[11308, 11308], "mapped", [11356]], [[11309, 11309], "mapped", [11357]], [[11310, 11310], "mapped", [11358]], [[11311, 11311], "disallowed"], [[11312, 11358], "valid"], [[11359, 11359], "disallowed"], [[11360, 11360], "mapped", [11361]], [[11361, 11361], "valid"], [[11362, 11362], "mapped", [619]], [[11363, 11363], "mapped", [7549]], [[11364, 11364], "mapped", [637]], [[11365, 11366], "valid"], [[11367, 11367], "mapped", [11368]], [[11368, 11368], "valid"], [[11369, 11369], "mapped", [11370]], [[11370, 11370], "valid"], [[11371, 11371], "mapped", [11372]], [[11372, 11372], "valid"], [[11373, 11373], "mapped", [593]], [[11374, 11374], "mapped", [625]], [[11375, 11375], "mapped", [592]], [[11376, 11376], "mapped", [594]], [[11377, 11377], "valid"], [[11378, 11378], "mapped", [11379]], [[11379, 11379], "valid"], [[11380, 11380], "valid"], [[11381, 11381], "mapped", [11382]], [[11382, 11383], "valid"], [[11384, 11387], "valid"], [[11388, 11388], "mapped", [106]], [[11389, 11389], "mapped", [118]], [[11390, 11390], "mapped", [575]], [[11391, 11391], "mapped", [576]], [[11392, 11392], "mapped", [11393]], [[11393, 11393], "valid"], [[11394, 11394], "mapped", [11395]], [[11395, 11395], "valid"], [[11396, 11396], "mapped", [11397]], [[11397, 11397], "valid"], [[11398, 11398], "mapped", [11399]], [[11399, 11399], "valid"], [[11400, 11400], "mapped", [11401]], [[11401, 11401], "valid"], [[11402, 11402], "mapped", [11403]], [[11403, 11403], "valid"], [[11404, 11404], "mapped", [11405]], [[11405, 11405], "valid"], [[11406, 11406], "mapped", [11407]], [[11407, 11407], "valid"], [[11408, 11408], "mapped", [11409]], [[11409, 11409], "valid"], [[11410, 11410], "mapped", [11411]], [[11411, 11411], "valid"], [[11412, 11412], "mapped", [11413]], [[11413, 11413], "valid"], [[11414, 11414], "mapped", [11415]], [[11415, 11415], "valid"], [[11416, 11416], "mapped", [11417]], [[11417, 11417], "valid"], [[11418, 11418], "mapped", [11419]], [[11419, 11419], "valid"], [[11420, 11420], "mapped", [11421]], [[11421, 11421], "valid"], [[11422, 11422], "mapped", [11423]], [[11423, 11423], "valid"], [[11424, 11424], "mapped", [11425]], [[11425, 11425], "valid"], [[11426, 11426], "mapped", [11427]], [[11427, 11427], "valid"], [[11428, 11428], "mapped", [11429]], [[11429, 11429], "valid"], [[11430, 11430], "mapped", [11431]], [[11431, 11431], "valid"], [[11432, 11432], "mapped", [11433]], [[11433, 11433], "valid"], [[11434, 11434], "mapped", [11435]], [[11435, 11435], "valid"], [[11436, 11436], "mapped", [11437]], [[11437, 11437], "valid"], [[11438, 11438], "mapped", [11439]], [[11439, 11439], "valid"], [[11440, 11440], "mapped", [11441]], [[11441, 11441], "valid"], [[11442, 11442], "mapped", [11443]], [[11443, 11443], "valid"], [[11444, 11444], "mapped", [11445]], [[11445, 11445], "valid"], [[11446, 11446], "mapped", [11447]], [[11447, 11447], "valid"], [[11448, 11448], "mapped", [11449]], [[11449, 11449], "valid"], [[11450, 11450], "mapped", [11451]], [[11451, 11451], "valid"], [[11452, 11452], "mapped", [11453]], [[11453, 11453], "valid"], [[11454, 11454], "mapped", [11455]], [[11455, 11455], "valid"], [[11456, 11456], "mapped", [11457]], [[11457, 11457], "valid"], [[11458, 11458], "mapped", [11459]], [[11459, 11459], "valid"], [[11460, 11460], "mapped", [11461]], [[11461, 11461], "valid"], [[11462, 11462], "mapped", [11463]], [[11463, 11463], "valid"], [[11464, 11464], "mapped", [11465]], [[11465, 11465], "valid"], [[11466, 11466], "mapped", [11467]], [[11467, 11467], "valid"], [[11468, 11468], "mapped", [11469]], [[11469, 11469], "valid"], [[11470, 11470], "mapped", [11471]], [[11471, 11471], "valid"], [[11472, 11472], "mapped", [11473]], [[11473, 11473], "valid"], [[11474, 11474], "mapped", [11475]], [[11475, 11475], "valid"], [[11476, 11476], "mapped", [11477]], [[11477, 11477], "valid"], [[11478, 11478], "mapped", [11479]], [[11479, 11479], "valid"], [[11480, 11480], "mapped", [11481]], [[11481, 11481], "valid"], [[11482, 11482], "mapped", [11483]], [[11483, 11483], "valid"], [[11484, 11484], "mapped", [11485]], [[11485, 11485], "valid"], [[11486, 11486], "mapped", [11487]], [[11487, 11487], "valid"], [[11488, 11488], "mapped", [11489]], [[11489, 11489], "valid"], [[11490, 11490], "mapped", [11491]], [[11491, 11492], "valid"], [[11493, 11498], "valid", [], "NV8"], [[11499, 11499], "mapped", [11500]], [[11500, 11500], "valid"], [[11501, 11501], "mapped", [11502]], [[11502, 11505], "valid"], [[11506, 11506], "mapped", [11507]], [[11507, 11507], "valid"], [[11508, 11512], "disallowed"], [[11513, 11519], "valid", [], "NV8"], [[11520, 11557], "valid"], [[11558, 11558], "disallowed"], [[11559, 11559], "valid"], [[11560, 11564], "disallowed"], [[11565, 11565], "valid"], [[11566, 11567], "disallowed"], [[11568, 11621], "valid"], [[11622, 11623], "valid"], [[11624, 11630], "disallowed"], [[11631, 11631], "mapped", [11617]], [[11632, 11632], "valid", [], "NV8"], [[11633, 11646], "disallowed"], [[11647, 11647], "valid"], [[11648, 11670], "valid"], [[11671, 11679], "disallowed"], [[11680, 11686], "valid"], [[11687, 11687], "disallowed"], [[11688, 11694], "valid"], [[11695, 11695], "disallowed"], [[11696, 11702], "valid"], [[11703, 11703], "disallowed"], [[11704, 11710], "valid"], [[11711, 11711], "disallowed"], [[11712, 11718], "valid"], [[11719, 11719], "disallowed"], [[11720, 11726], "valid"], [[11727, 11727], "disallowed"], [[11728, 11734], "valid"], [[11735, 11735], "disallowed"], [[11736, 11742], "valid"], [[11743, 11743], "disallowed"], [[11744, 11775], "valid"], [[11776, 11799], "valid", [], "NV8"], [[11800, 11803], "valid", [], "NV8"], [[11804, 11805], "valid", [], "NV8"], [[11806, 11822], "valid", [], "NV8"], [[11823, 11823], "valid"], [[11824, 11824], "valid", [], "NV8"], [[11825, 11825], "valid", [], "NV8"], [[11826, 11835], "valid", [], "NV8"], [[11836, 11842], "valid", [], "NV8"], [[11843, 11903], "disallowed"], [[11904, 11929], "valid", [], "NV8"], [[11930, 11930], "disallowed"], [[11931, 11934], "valid", [], "NV8"], [[11935, 11935], "mapped", [27597]], [[11936, 12018], "valid", [], "NV8"], [[12019, 12019], "mapped", [40863]], [[12020, 12031], "disallowed"], [[12032, 12032], "mapped", [19968]], [[12033, 12033], "mapped", [20008]], [[12034, 12034], "mapped", [20022]], [[12035, 12035], "mapped", [20031]], [[12036, 12036], "mapped", [20057]], [[12037, 12037], "mapped", [20101]], [[12038, 12038], "mapped", [20108]], [[12039, 12039], "mapped", [20128]], [[12040, 12040], "mapped", [20154]], [[12041, 12041], "mapped", [20799]], [[12042, 12042], "mapped", [20837]], [[12043, 12043], "mapped", [20843]], [[12044, 12044], "mapped", [20866]], [[12045, 12045], "mapped", [20886]], [[12046, 12046], "mapped", [20907]], [[12047, 12047], "mapped", [20960]], [[12048, 12048], "mapped", [20981]], [[12049, 12049], "mapped", [20992]], [[12050, 12050], "mapped", [21147]], [[12051, 12051], "mapped", [21241]], [[12052, 12052], "mapped", [21269]], [[12053, 12053], "mapped", [21274]], [[12054, 12054], "mapped", [21304]], [[12055, 12055], "mapped", [21313]], [[12056, 12056], "mapped", [21340]], [[12057, 12057], "mapped", [21353]], [[12058, 12058], "mapped", [21378]], [[12059, 12059], "mapped", [21430]], [[12060, 12060], "mapped", [21448]], [[12061, 12061], "mapped", [21475]], [[12062, 12062], "mapped", [22231]], [[12063, 12063], "mapped", [22303]], [[12064, 12064], "mapped", [22763]], [[12065, 12065], "mapped", [22786]], [[12066, 12066], "mapped", [22794]], [[12067, 12067], "mapped", [22805]], [[12068, 12068], "mapped", [22823]], [[12069, 12069], "mapped", [22899]], [[12070, 12070], "mapped", [23376]], [[12071, 12071], "mapped", [23424]], [[12072, 12072], "mapped", [23544]], [[12073, 12073], "mapped", [23567]], [[12074, 12074], "mapped", [23586]], [[12075, 12075], "mapped", [23608]], [[12076, 12076], "mapped", [23662]], [[12077, 12077], "mapped", [23665]], [[12078, 12078], "mapped", [24027]], [[12079, 12079], "mapped", [24037]], [[12080, 12080], "mapped", [24049]], [[12081, 12081], "mapped", [24062]], [[12082, 12082], "mapped", [24178]], [[12083, 12083], "mapped", [24186]], [[12084, 12084], "mapped", [24191]], [[12085, 12085], "mapped", [24308]], [[12086, 12086], "mapped", [24318]], [[12087, 12087], "mapped", [24331]], [[12088, 12088], "mapped", [24339]], [[12089, 12089], "mapped", [24400]], [[12090, 12090], "mapped", [24417]], [[12091, 12091], "mapped", [24435]], [[12092, 12092], "mapped", [24515]], [[12093, 12093], "mapped", [25096]], [[12094, 12094], "mapped", [25142]], [[12095, 12095], "mapped", [25163]], [[12096, 12096], "mapped", [25903]], [[12097, 12097], "mapped", [25908]], [[12098, 12098], "mapped", [25991]], [[12099, 12099], "mapped", [26007]], [[12100, 12100], "mapped", [26020]], [[12101, 12101], "mapped", [26041]], [[12102, 12102], "mapped", [26080]], [[12103, 12103], "mapped", [26085]], [[12104, 12104], "mapped", [26352]], [[12105, 12105], "mapped", [26376]], [[12106, 12106], "mapped", [26408]], [[12107, 12107], "mapped", [27424]], [[12108, 12108], "mapped", [27490]], [[12109, 12109], "mapped", [27513]], [[12110, 12110], "mapped", [27571]], [[12111, 12111], "mapped", [27595]], [[12112, 12112], "mapped", [27604]], [[12113, 12113], "mapped", [27611]], [[12114, 12114], "mapped", [27663]], [[12115, 12115], "mapped", [27668]], [[12116, 12116], "mapped", [27700]], [[12117, 12117], "mapped", [28779]], [[12118, 12118], "mapped", [29226]], [[12119, 12119], "mapped", [29238]], [[12120, 12120], "mapped", [29243]], [[12121, 12121], "mapped", [29247]], [[12122, 12122], "mapped", [29255]], [[12123, 12123], "mapped", [29273]], [[12124, 12124], "mapped", [29275]], [[12125, 12125], "mapped", [29356]], [[12126, 12126], "mapped", [29572]], [[12127, 12127], "mapped", [29577]], [[12128, 12128], "mapped", [29916]], [[12129, 12129], "mapped", [29926]], [[12130, 12130], "mapped", [29976]], [[12131, 12131], "mapped", [29983]], [[12132, 12132], "mapped", [29992]], [[12133, 12133], "mapped", [3e4]], [[12134, 12134], "mapped", [30091]], [[12135, 12135], "mapped", [30098]], [[12136, 12136], "mapped", [30326]], [[12137, 12137], "mapped", [30333]], [[12138, 12138], "mapped", [30382]], [[12139, 12139], "mapped", [30399]], [[12140, 12140], "mapped", [30446]], [[12141, 12141], "mapped", [30683]], [[12142, 12142], "mapped", [30690]], [[12143, 12143], "mapped", [30707]], [[12144, 12144], "mapped", [31034]], [[12145, 12145], "mapped", [31160]], [[12146, 12146], "mapped", [31166]], [[12147, 12147], "mapped", [31348]], [[12148, 12148], "mapped", [31435]], [[12149, 12149], "mapped", [31481]], [[12150, 12150], "mapped", [31859]], [[12151, 12151], "mapped", [31992]], [[12152, 12152], "mapped", [32566]], [[12153, 12153], "mapped", [32593]], [[12154, 12154], "mapped", [32650]], [[12155, 12155], "mapped", [32701]], [[12156, 12156], "mapped", [32769]], [[12157, 12157], "mapped", [32780]], [[12158, 12158], "mapped", [32786]], [[12159, 12159], "mapped", [32819]], [[12160, 12160], "mapped", [32895]], [[12161, 12161], "mapped", [32905]], [[12162, 12162], "mapped", [33251]], [[12163, 12163], "mapped", [33258]], [[12164, 12164], "mapped", [33267]], [[12165, 12165], "mapped", [33276]], [[12166, 12166], "mapped", [33292]], [[12167, 12167], "mapped", [33307]], [[12168, 12168], "mapped", [33311]], [[12169, 12169], "mapped", [33390]], [[12170, 12170], "mapped", [33394]], [[12171, 12171], "mapped", [33400]], [[12172, 12172], "mapped", [34381]], [[12173, 12173], "mapped", [34411]], [[12174, 12174], "mapped", [34880]], [[12175, 12175], "mapped", [34892]], [[12176, 12176], "mapped", [34915]], [[12177, 12177], "mapped", [35198]], [[12178, 12178], "mapped", [35211]], [[12179, 12179], "mapped", [35282]], [[12180, 12180], "mapped", [35328]], [[12181, 12181], "mapped", [35895]], [[12182, 12182], "mapped", [35910]], [[12183, 12183], "mapped", [35925]], [[12184, 12184], "mapped", [35960]], [[12185, 12185], "mapped", [35997]], [[12186, 12186], "mapped", [36196]], [[12187, 12187], "mapped", [36208]], [[12188, 12188], "mapped", [36275]], [[12189, 12189], "mapped", [36523]], [[12190, 12190], "mapped", [36554]], [[12191, 12191], "mapped", [36763]], [[12192, 12192], "mapped", [36784]], [[12193, 12193], "mapped", [36789]], [[12194, 12194], "mapped", [37009]], [[12195, 12195], "mapped", [37193]], [[12196, 12196], "mapped", [37318]], [[12197, 12197], "mapped", [37324]], [[12198, 12198], "mapped", [37329]], [[12199, 12199], "mapped", [38263]], [[12200, 12200], "mapped", [38272]], [[12201, 12201], "mapped", [38428]], [[12202, 12202], "mapped", [38582]], [[12203, 12203], "mapped", [38585]], [[12204, 12204], "mapped", [38632]], [[12205, 12205], "mapped", [38737]], [[12206, 12206], "mapped", [38750]], [[12207, 12207], "mapped", [38754]], [[12208, 12208], "mapped", [38761]], [[12209, 12209], "mapped", [38859]], [[12210, 12210], "mapped", [38893]], [[12211, 12211], "mapped", [38899]], [[12212, 12212], "mapped", [38913]], [[12213, 12213], "mapped", [39080]], [[12214, 12214], "mapped", [39131]], [[12215, 12215], "mapped", [39135]], [[12216, 12216], "mapped", [39318]], [[12217, 12217], "mapped", [39321]], [[12218, 12218], "mapped", [39340]], [[12219, 12219], "mapped", [39592]], [[12220, 12220], "mapped", [39640]], [[12221, 12221], "mapped", [39647]], [[12222, 12222], "mapped", [39717]], [[12223, 12223], "mapped", [39727]], [[12224, 12224], "mapped", [39730]], [[12225, 12225], "mapped", [39740]], [[12226, 12226], "mapped", [39770]], [[12227, 12227], "mapped", [40165]], [[12228, 12228], "mapped", [40565]], [[12229, 12229], "mapped", [40575]], [[12230, 12230], "mapped", [40613]], [[12231, 12231], "mapped", [40635]], [[12232, 12232], "mapped", [40643]], [[12233, 12233], "mapped", [40653]], [[12234, 12234], "mapped", [40657]], [[12235, 12235], "mapped", [40697]], [[12236, 12236], "mapped", [40701]], [[12237, 12237], "mapped", [40718]], [[12238, 12238], "mapped", [40723]], [[12239, 12239], "mapped", [40736]], [[12240, 12240], "mapped", [40763]], [[12241, 12241], "mapped", [40778]], [[12242, 12242], "mapped", [40786]], [[12243, 12243], "mapped", [40845]], [[12244, 12244], "mapped", [40860]], [[12245, 12245], "mapped", [40864]], [[12246, 12271], "disallowed"], [[12272, 12283], "disallowed"], [[12284, 12287], "disallowed"], [[12288, 12288], "disallowed_STD3_mapped", [32]], [[12289, 12289], "valid", [], "NV8"], [[12290, 12290], "mapped", [46]], [[12291, 12292], "valid", [], "NV8"], [[12293, 12295], "valid"], [[12296, 12329], "valid", [], "NV8"], [[12330, 12333], "valid"], [[12334, 12341], "valid", [], "NV8"], [[12342, 12342], "mapped", [12306]], [[12343, 12343], "valid", [], "NV8"], [[12344, 12344], "mapped", [21313]], [[12345, 12345], "mapped", [21316]], [[12346, 12346], "mapped", [21317]], [[12347, 12347], "valid", [], "NV8"], [[12348, 12348], "valid"], [[12349, 12349], "valid", [], "NV8"], [[12350, 12350], "valid", [], "NV8"], [[12351, 12351], "valid", [], "NV8"], [[12352, 12352], "disallowed"], [[12353, 12436], "valid"], [[12437, 12438], "valid"], [[12439, 12440], "disallowed"], [[12441, 12442], "valid"], [[12443, 12443], "disallowed_STD3_mapped", [32, 12441]], [[12444, 12444], "disallowed_STD3_mapped", [32, 12442]], [[12445, 12446], "valid"], [[12447, 12447], "mapped", [12424, 12426]], [[12448, 12448], "valid", [], "NV8"], [[12449, 12542], "valid"], [[12543, 12543], "mapped", [12467, 12488]], [[12544, 12548], "disallowed"], [[12549, 12588], "valid"], [[12589, 12589], "valid"], [[12590, 12592], "disallowed"], [[12593, 12593], "mapped", [4352]], [[12594, 12594], "mapped", [4353]], [[12595, 12595], "mapped", [4522]], [[12596, 12596], "mapped", [4354]], [[12597, 12597], "mapped", [4524]], [[12598, 12598], "mapped", [4525]], [[12599, 12599], "mapped", [4355]], [[12600, 12600], "mapped", [4356]], [[12601, 12601], "mapped", [4357]], [[12602, 12602], "mapped", [4528]], [[12603, 12603], "mapped", [4529]], [[12604, 12604], "mapped", [4530]], [[12605, 12605], "mapped", [4531]], [[12606, 12606], "mapped", [4532]], [[12607, 12607], "mapped", [4533]], [[12608, 12608], "mapped", [4378]], [[12609, 12609], "mapped", [4358]], [[12610, 12610], "mapped", [4359]], [[12611, 12611], "mapped", [4360]], [[12612, 12612], "mapped", [4385]], [[12613, 12613], "mapped", [4361]], [[12614, 12614], "mapped", [4362]], [[12615, 12615], "mapped", [4363]], [[12616, 12616], "mapped", [4364]], [[12617, 12617], "mapped", [4365]], [[12618, 12618], "mapped", [4366]], [[12619, 12619], "mapped", [4367]], [[12620, 12620], "mapped", [4368]], [[12621, 12621], "mapped", [4369]], [[12622, 12622], "mapped", [4370]], [[12623, 12623], "mapped", [4449]], [[12624, 12624], "mapped", [4450]], [[12625, 12625], "mapped", [4451]], [[12626, 12626], "mapped", [4452]], [[12627, 12627], "mapped", [4453]], [[12628, 12628], "mapped", [4454]], [[12629, 12629], "mapped", [4455]], [[12630, 12630], "mapped", [4456]], [[12631, 12631], "mapped", [4457]], [[12632, 12632], "mapped", [4458]], [[12633, 12633], "mapped", [4459]], [[12634, 12634], "mapped", [4460]], [[12635, 12635], "mapped", [4461]], [[12636, 12636], "mapped", [4462]], [[12637, 12637], "mapped", [4463]], [[12638, 12638], "mapped", [4464]], [[12639, 12639], "mapped", [4465]], [[12640, 12640], "mapped", [4466]], [[12641, 12641], "mapped", [4467]], [[12642, 12642], "mapped", [4468]], [[12643, 12643], "mapped", [4469]], [[12644, 12644], "disallowed"], [[12645, 12645], "mapped", [4372]], [[12646, 12646], "mapped", [4373]], [[12647, 12647], "mapped", [4551]], [[12648, 12648], "mapped", [4552]], [[12649, 12649], "mapped", [4556]], [[12650, 12650], "mapped", [4558]], [[12651, 12651], "mapped", [4563]], [[12652, 12652], "mapped", [4567]], [[12653, 12653], "mapped", [4569]], [[12654, 12654], "mapped", [4380]], [[12655, 12655], "mapped", [4573]], [[12656, 12656], "mapped", [4575]], [[12657, 12657], "mapped", [4381]], [[12658, 12658], "mapped", [4382]], [[12659, 12659], "mapped", [4384]], [[12660, 12660], "mapped", [4386]], [[12661, 12661], "mapped", [4387]], [[12662, 12662], "mapped", [4391]], [[12663, 12663], "mapped", [4393]], [[12664, 12664], "mapped", [4395]], [[12665, 12665], "mapped", [4396]], [[12666, 12666], "mapped", [4397]], [[12667, 12667], "mapped", [4398]], [[12668, 12668], "mapped", [4399]], [[12669, 12669], "mapped", [4402]], [[12670, 12670], "mapped", [4406]], [[12671, 12671], "mapped", [4416]], [[12672, 12672], "mapped", [4423]], [[12673, 12673], "mapped", [4428]], [[12674, 12674], "mapped", [4593]], [[12675, 12675], "mapped", [4594]], [[12676, 12676], "mapped", [4439]], [[12677, 12677], "mapped", [4440]], [[12678, 12678], "mapped", [4441]], [[12679, 12679], "mapped", [4484]], [[12680, 12680], "mapped", [4485]], [[12681, 12681], "mapped", [4488]], [[12682, 12682], "mapped", [4497]], [[12683, 12683], "mapped", [4498]], [[12684, 12684], "mapped", [4500]], [[12685, 12685], "mapped", [4510]], [[12686, 12686], "mapped", [4513]], [[12687, 12687], "disallowed"], [[12688, 12689], "valid", [], "NV8"], [[12690, 12690], "mapped", [19968]], [[12691, 12691], "mapped", [20108]], [[12692, 12692], "mapped", [19977]], [[12693, 12693], "mapped", [22235]], [[12694, 12694], "mapped", [19978]], [[12695, 12695], "mapped", [20013]], [[12696, 12696], "mapped", [19979]], [[12697, 12697], "mapped", [30002]], [[12698, 12698], "mapped", [20057]], [[12699, 12699], "mapped", [19993]], [[12700, 12700], "mapped", [19969]], [[12701, 12701], "mapped", [22825]], [[12702, 12702], "mapped", [22320]], [[12703, 12703], "mapped", [20154]], [[12704, 12727], "valid"], [[12728, 12730], "valid"], [[12731, 12735], "disallowed"], [[12736, 12751], "valid", [], "NV8"], [[12752, 12771], "valid", [], "NV8"], [[12772, 12783], "disallowed"], [[12784, 12799], "valid"], [[12800, 12800], "disallowed_STD3_mapped", [40, 4352, 41]], [[12801, 12801], "disallowed_STD3_mapped", [40, 4354, 41]], [[12802, 12802], "disallowed_STD3_mapped", [40, 4355, 41]], [[12803, 12803], "disallowed_STD3_mapped", [40, 4357, 41]], [[12804, 12804], "disallowed_STD3_mapped", [40, 4358, 41]], [[12805, 12805], "disallowed_STD3_mapped", [40, 4359, 41]], [[12806, 12806], "disallowed_STD3_mapped", [40, 4361, 41]], [[12807, 12807], "disallowed_STD3_mapped", [40, 4363, 41]], [[12808, 12808], "disallowed_STD3_mapped", [40, 4364, 41]], [[12809, 12809], "disallowed_STD3_mapped", [40, 4366, 41]], [[12810, 12810], "disallowed_STD3_mapped", [40, 4367, 41]], [[12811, 12811], "disallowed_STD3_mapped", [40, 4368, 41]], [[12812, 12812], "disallowed_STD3_mapped", [40, 4369, 41]], [[12813, 12813], "disallowed_STD3_mapped", [40, 4370, 41]], [[12814, 12814], "disallowed_STD3_mapped", [40, 44032, 41]], [[12815, 12815], "disallowed_STD3_mapped", [40, 45208, 41]], [[12816, 12816], "disallowed_STD3_mapped", [40, 45796, 41]], [[12817, 12817], "disallowed_STD3_mapped", [40, 46972, 41]], [[12818, 12818], "disallowed_STD3_mapped", [40, 47560, 41]], [[12819, 12819], "disallowed_STD3_mapped", [40, 48148, 41]], [[12820, 12820], "disallowed_STD3_mapped", [40, 49324, 41]], [[12821, 12821], "disallowed_STD3_mapped", [40, 50500, 41]], [[12822, 12822], "disallowed_STD3_mapped", [40, 51088, 41]], [[12823, 12823], "disallowed_STD3_mapped", [40, 52264, 41]], [[12824, 12824], "disallowed_STD3_mapped", [40, 52852, 41]], [[12825, 12825], "disallowed_STD3_mapped", [40, 53440, 41]], [[12826, 12826], "disallowed_STD3_mapped", [40, 54028, 41]], [[12827, 12827], "disallowed_STD3_mapped", [40, 54616, 41]], [[12828, 12828], "disallowed_STD3_mapped", [40, 51452, 41]], [[12829, 12829], "disallowed_STD3_mapped", [40, 50724, 51204, 41]], [[12830, 12830], "disallowed_STD3_mapped", [40, 50724, 54980, 41]], [[12831, 12831], "disallowed"], [[12832, 12832], "disallowed_STD3_mapped", [40, 19968, 41]], [[12833, 12833], "disallowed_STD3_mapped", [40, 20108, 41]], [[12834, 12834], "disallowed_STD3_mapped", [40, 19977, 41]], [[12835, 12835], "disallowed_STD3_mapped", [40, 22235, 41]], [[12836, 12836], "disallowed_STD3_mapped", [40, 20116, 41]], [[12837, 12837], "disallowed_STD3_mapped", [40, 20845, 41]], [[12838, 12838], "disallowed_STD3_mapped", [40, 19971, 41]], [[12839, 12839], "disallowed_STD3_mapped", [40, 20843, 41]], [[12840, 12840], "disallowed_STD3_mapped", [40, 20061, 41]], [[12841, 12841], "disallowed_STD3_mapped", [40, 21313, 41]], [[12842, 12842], "disallowed_STD3_mapped", [40, 26376, 41]], [[12843, 12843], "disallowed_STD3_mapped", [40, 28779, 41]], [[12844, 12844], "disallowed_STD3_mapped", [40, 27700, 41]], [[12845, 12845], "disallowed_STD3_mapped", [40, 26408, 41]], [[12846, 12846], "disallowed_STD3_mapped", [40, 37329, 41]], [[12847, 12847], "disallowed_STD3_mapped", [40, 22303, 41]], [[12848, 12848], "disallowed_STD3_mapped", [40, 26085, 41]], [[12849, 12849], "disallowed_STD3_mapped", [40, 26666, 41]], [[12850, 12850], "disallowed_STD3_mapped", [40, 26377, 41]], [[12851, 12851], "disallowed_STD3_mapped", [40, 31038, 41]], [[12852, 12852], "disallowed_STD3_mapped", [40, 21517, 41]], [[12853, 12853], "disallowed_STD3_mapped", [40, 29305, 41]], [[12854, 12854], "disallowed_STD3_mapped", [40, 36001, 41]], [[12855, 12855], "disallowed_STD3_mapped", [40, 31069, 41]], [[12856, 12856], "disallowed_STD3_mapped", [40, 21172, 41]], [[12857, 12857], "disallowed_STD3_mapped", [40, 20195, 41]], [[12858, 12858], "disallowed_STD3_mapped", [40, 21628, 41]], [[12859, 12859], "disallowed_STD3_mapped", [40, 23398, 41]], [[12860, 12860], "disallowed_STD3_mapped", [40, 30435, 41]], [[12861, 12861], "disallowed_STD3_mapped", [40, 20225, 41]], [[12862, 12862], "disallowed_STD3_mapped", [40, 36039, 41]], [[12863, 12863], "disallowed_STD3_mapped", [40, 21332, 41]], [[12864, 12864], "disallowed_STD3_mapped", [40, 31085, 41]], [[12865, 12865], "disallowed_STD3_mapped", [40, 20241, 41]], [[12866, 12866], "disallowed_STD3_mapped", [40, 33258, 41]], [[12867, 12867], "disallowed_STD3_mapped", [40, 33267, 41]], [[12868, 12868], "mapped", [21839]], [[12869, 12869], "mapped", [24188]], [[12870, 12870], "mapped", [25991]], [[12871, 12871], "mapped", [31631]], [[12872, 12879], "valid", [], "NV8"], [[12880, 12880], "mapped", [112, 116, 101]], [[12881, 12881], "mapped", [50, 49]], [[12882, 12882], "mapped", [50, 50]], [[12883, 12883], "mapped", [50, 51]], [[12884, 12884], "mapped", [50, 52]], [[12885, 12885], "mapped", [50, 53]], [[12886, 12886], "mapped", [50, 54]], [[12887, 12887], "mapped", [50, 55]], [[12888, 12888], "mapped", [50, 56]], [[12889, 12889], "mapped", [50, 57]], [[12890, 12890], "mapped", [51, 48]], [[12891, 12891], "mapped", [51, 49]], [[12892, 12892], "mapped", [51, 50]], [[12893, 12893], "mapped", [51, 51]], [[12894, 12894], "mapped", [51, 52]], [[12895, 12895], "mapped", [51, 53]], [[12896, 12896], "mapped", [4352]], [[12897, 12897], "mapped", [4354]], [[12898, 12898], "mapped", [4355]], [[12899, 12899], "mapped", [4357]], [[12900, 12900], "mapped", [4358]], [[12901, 12901], "mapped", [4359]], [[12902, 12902], "mapped", [4361]], [[12903, 12903], "mapped", [4363]], [[12904, 12904], "mapped", [4364]], [[12905, 12905], "mapped", [4366]], [[12906, 12906], "mapped", [4367]], [[12907, 12907], "mapped", [4368]], [[12908, 12908], "mapped", [4369]], [[12909, 12909], "mapped", [4370]], [[12910, 12910], "mapped", [44032]], [[12911, 12911], "mapped", [45208]], [[12912, 12912], "mapped", [45796]], [[12913, 12913], "mapped", [46972]], [[12914, 12914], "mapped", [47560]], [[12915, 12915], "mapped", [48148]], [[12916, 12916], "mapped", [49324]], [[12917, 12917], "mapped", [50500]], [[12918, 12918], "mapped", [51088]], [[12919, 12919], "mapped", [52264]], [[12920, 12920], "mapped", [52852]], [[12921, 12921], "mapped", [53440]], [[12922, 12922], "mapped", [54028]], [[12923, 12923], "mapped", [54616]], [[12924, 12924], "mapped", [52280, 44256]], [[12925, 12925], "mapped", [51452, 51032]], [[12926, 12926], "mapped", [50864]], [[12927, 12927], "valid", [], "NV8"], [[12928, 12928], "mapped", [19968]], [[12929, 12929], "mapped", [20108]], [[12930, 12930], "mapped", [19977]], [[12931, 12931], "mapped", [22235]], [[12932, 12932], "mapped", [20116]], [[12933, 12933], "mapped", [20845]], [[12934, 12934], "mapped", [19971]], [[12935, 12935], "mapped", [20843]], [[12936, 12936], "mapped", [20061]], [[12937, 12937], "mapped", [21313]], [[12938, 12938], "mapped", [26376]], [[12939, 12939], "mapped", [28779]], [[12940, 12940], "mapped", [27700]], [[12941, 12941], "mapped", [26408]], [[12942, 12942], "mapped", [37329]], [[12943, 12943], "mapped", [22303]], [[12944, 12944], "mapped", [26085]], [[12945, 12945], "mapped", [26666]], [[12946, 12946], "mapped", [26377]], [[12947, 12947], "mapped", [31038]], [[12948, 12948], "mapped", [21517]], [[12949, 12949], "mapped", [29305]], [[12950, 12950], "mapped", [36001]], [[12951, 12951], "mapped", [31069]], [[12952, 12952], "mapped", [21172]], [[12953, 12953], "mapped", [31192]], [[12954, 12954], "mapped", [30007]], [[12955, 12955], "mapped", [22899]], [[12956, 12956], "mapped", [36969]], [[12957, 12957], "mapped", [20778]], [[12958, 12958], "mapped", [21360]], [[12959, 12959], "mapped", [27880]], [[12960, 12960], "mapped", [38917]], [[12961, 12961], "mapped", [20241]], [[12962, 12962], "mapped", [20889]], [[12963, 12963], "mapped", [27491]], [[12964, 12964], "mapped", [19978]], [[12965, 12965], "mapped", [20013]], [[12966, 12966], "mapped", [19979]], [[12967, 12967], "mapped", [24038]], [[12968, 12968], "mapped", [21491]], [[12969, 12969], "mapped", [21307]], [[12970, 12970], "mapped", [23447]], [[12971, 12971], "mapped", [23398]], [[12972, 12972], "mapped", [30435]], [[12973, 12973], "mapped", [20225]], [[12974, 12974], "mapped", [36039]], [[12975, 12975], "mapped", [21332]], [[12976, 12976], "mapped", [22812]], [[12977, 12977], "mapped", [51, 54]], [[12978, 12978], "mapped", [51, 55]], [[12979, 12979], "mapped", [51, 56]], [[12980, 12980], "mapped", [51, 57]], [[12981, 12981], "mapped", [52, 48]], [[12982, 12982], "mapped", [52, 49]], [[12983, 12983], "mapped", [52, 50]], [[12984, 12984], "mapped", [52, 51]], [[12985, 12985], "mapped", [52, 52]], [[12986, 12986], "mapped", [52, 53]], [[12987, 12987], "mapped", [52, 54]], [[12988, 12988], "mapped", [52, 55]], [[12989, 12989], "mapped", [52, 56]], [[12990, 12990], "mapped", [52, 57]], [[12991, 12991], "mapped", [53, 48]], [[12992, 12992], "mapped", [49, 26376]], [[12993, 12993], "mapped", [50, 26376]], [[12994, 12994], "mapped", [51, 26376]], [[12995, 12995], "mapped", [52, 26376]], [[12996, 12996], "mapped", [53, 26376]], [[12997, 12997], "mapped", [54, 26376]], [[12998, 12998], "mapped", [55, 26376]], [[12999, 12999], "mapped", [56, 26376]], [[13e3, 13e3], "mapped", [57, 26376]], [[13001, 13001], "mapped", [49, 48, 26376]], [[13002, 13002], "mapped", [49, 49, 26376]], [[13003, 13003], "mapped", [49, 50, 26376]], [[13004, 13004], "mapped", [104, 103]], [[13005, 13005], "mapped", [101, 114, 103]], [[13006, 13006], "mapped", [101, 118]], [[13007, 13007], "mapped", [108, 116, 100]], [[13008, 13008], "mapped", [12450]], [[13009, 13009], "mapped", [12452]], [[13010, 13010], "mapped", [12454]], [[13011, 13011], "mapped", [12456]], [[13012, 13012], "mapped", [12458]], [[13013, 13013], "mapped", [12459]], [[13014, 13014], "mapped", [12461]], [[13015, 13015], "mapped", [12463]], [[13016, 13016], "mapped", [12465]], [[13017, 13017], "mapped", [12467]], [[13018, 13018], "mapped", [12469]], [[13019, 13019], "mapped", [12471]], [[13020, 13020], "mapped", [12473]], [[13021, 13021], "mapped", [12475]], [[13022, 13022], "mapped", [12477]], [[13023, 13023], "mapped", [12479]], [[13024, 13024], "mapped", [12481]], [[13025, 13025], "mapped", [12484]], [[13026, 13026], "mapped", [12486]], [[13027, 13027], "mapped", [12488]], [[13028, 13028], "mapped", [12490]], [[13029, 13029], "mapped", [12491]], [[13030, 13030], "mapped", [12492]], [[13031, 13031], "mapped", [12493]], [[13032, 13032], "mapped", [12494]], [[13033, 13033], "mapped", [12495]], [[13034, 13034], "mapped", [12498]], [[13035, 13035], "mapped", [12501]], [[13036, 13036], "mapped", [12504]], [[13037, 13037], "mapped", [12507]], [[13038, 13038], "mapped", [12510]], [[13039, 13039], "mapped", [12511]], [[13040, 13040], "mapped", [12512]], [[13041, 13041], "mapped", [12513]], [[13042, 13042], "mapped", [12514]], [[13043, 13043], "mapped", [12516]], [[13044, 13044], "mapped", [12518]], [[13045, 13045], "mapped", [12520]], [[13046, 13046], "mapped", [12521]], [[13047, 13047], "mapped", [12522]], [[13048, 13048], "mapped", [12523]], [[13049, 13049], "mapped", [12524]], [[13050, 13050], "mapped", [12525]], [[13051, 13051], "mapped", [12527]], [[13052, 13052], "mapped", [12528]], [[13053, 13053], "mapped", [12529]], [[13054, 13054], "mapped", [12530]], [[13055, 13055], "disallowed"], [[13056, 13056], "mapped", [12450, 12497, 12540, 12488]], [[13057, 13057], "mapped", [12450, 12523, 12501, 12449]], [[13058, 13058], "mapped", [12450, 12531, 12506, 12450]], [[13059, 13059], "mapped", [12450, 12540, 12523]], [[13060, 13060], "mapped", [12452, 12491, 12531, 12464]], [[13061, 13061], "mapped", [12452, 12531, 12481]], [[13062, 13062], "mapped", [12454, 12457, 12531]], [[13063, 13063], "mapped", [12456, 12473, 12463, 12540, 12489]], [[13064, 13064], "mapped", [12456, 12540, 12459, 12540]], [[13065, 13065], "mapped", [12458, 12531, 12473]], [[13066, 13066], "mapped", [12458, 12540, 12512]], [[13067, 13067], "mapped", [12459, 12452, 12522]], [[13068, 13068], "mapped", [12459, 12521, 12483, 12488]], [[13069, 13069], "mapped", [12459, 12525, 12522, 12540]], [[13070, 13070], "mapped", [12460, 12525, 12531]], [[13071, 13071], "mapped", [12460, 12531, 12510]], [[13072, 13072], "mapped", [12462, 12460]], [[13073, 13073], "mapped", [12462, 12491, 12540]], [[13074, 13074], "mapped", [12461, 12517, 12522, 12540]], [[13075, 13075], "mapped", [12462, 12523, 12480, 12540]], [[13076, 13076], "mapped", [12461, 12525]], [[13077, 13077], "mapped", [12461, 12525, 12464, 12521, 12512]], [[13078, 13078], "mapped", [12461, 12525, 12513, 12540, 12488, 12523]], [[13079, 13079], "mapped", [12461, 12525, 12527, 12483, 12488]], [[13080, 13080], "mapped", [12464, 12521, 12512]], [[13081, 13081], "mapped", [12464, 12521, 12512, 12488, 12531]], [[13082, 13082], "mapped", [12463, 12523, 12476, 12452, 12525]], [[13083, 13083], "mapped", [12463, 12525, 12540, 12493]], [[13084, 13084], "mapped", [12465, 12540, 12473]], [[13085, 13085], "mapped", [12467, 12523, 12490]], [[13086, 13086], "mapped", [12467, 12540, 12509]], [[13087, 13087], "mapped", [12469, 12452, 12463, 12523]], [[13088, 13088], "mapped", [12469, 12531, 12481, 12540, 12512]], [[13089, 13089], "mapped", [12471, 12522, 12531, 12464]], [[13090, 13090], "mapped", [12475, 12531, 12481]], [[13091, 13091], "mapped", [12475, 12531, 12488]], [[13092, 13092], "mapped", [12480, 12540, 12473]], [[13093, 13093], "mapped", [12487, 12471]], [[13094, 13094], "mapped", [12489, 12523]], [[13095, 13095], "mapped", [12488, 12531]], [[13096, 13096], "mapped", [12490, 12494]], [[13097, 13097], "mapped", [12494, 12483, 12488]], [[13098, 13098], "mapped", [12495, 12452, 12484]], [[13099, 13099], "mapped", [12497, 12540, 12475, 12531, 12488]], [[13100, 13100], "mapped", [12497, 12540, 12484]], [[13101, 13101], "mapped", [12496, 12540, 12524, 12523]], [[13102, 13102], "mapped", [12500, 12450, 12473, 12488, 12523]], [[13103, 13103], "mapped", [12500, 12463, 12523]], [[13104, 13104], "mapped", [12500, 12467]], [[13105, 13105], "mapped", [12499, 12523]], [[13106, 13106], "mapped", [12501, 12449, 12521, 12483, 12489]], [[13107, 13107], "mapped", [12501, 12451, 12540, 12488]], [[13108, 13108], "mapped", [12502, 12483, 12471, 12455, 12523]], [[13109, 13109], "mapped", [12501, 12521, 12531]], [[13110, 13110], "mapped", [12504, 12463, 12479, 12540, 12523]], [[13111, 13111], "mapped", [12506, 12477]], [[13112, 13112], "mapped", [12506, 12491, 12498]], [[13113, 13113], "mapped", [12504, 12523, 12484]], [[13114, 13114], "mapped", [12506, 12531, 12473]], [[13115, 13115], "mapped", [12506, 12540, 12472]], [[13116, 13116], "mapped", [12505, 12540, 12479]], [[13117, 13117], "mapped", [12509, 12452, 12531, 12488]], [[13118, 13118], "mapped", [12508, 12523, 12488]], [[13119, 13119], "mapped", [12507, 12531]], [[13120, 13120], "mapped", [12509, 12531, 12489]], [[13121, 13121], "mapped", [12507, 12540, 12523]], [[13122, 13122], "mapped", [12507, 12540, 12531]], [[13123, 13123], "mapped", [12510, 12452, 12463, 12525]], [[13124, 13124], "mapped", [12510, 12452, 12523]], [[13125, 13125], "mapped", [12510, 12483, 12495]], [[13126, 13126], "mapped", [12510, 12523, 12463]], [[13127, 13127], "mapped", [12510, 12531, 12471, 12519, 12531]], [[13128, 13128], "mapped", [12511, 12463, 12525, 12531]], [[13129, 13129], "mapped", [12511, 12522]], [[13130, 13130], "mapped", [12511, 12522, 12496, 12540, 12523]], [[13131, 13131], "mapped", [12513, 12460]], [[13132, 13132], "mapped", [12513, 12460, 12488, 12531]], [[13133, 13133], "mapped", [12513, 12540, 12488, 12523]], [[13134, 13134], "mapped", [12516, 12540, 12489]], [[13135, 13135], "mapped", [12516, 12540, 12523]], [[13136, 13136], "mapped", [12518, 12450, 12531]], [[13137, 13137], "mapped", [12522, 12483, 12488, 12523]], [[13138, 13138], "mapped", [12522, 12521]], [[13139, 13139], "mapped", [12523, 12500, 12540]], [[13140, 13140], "mapped", [12523, 12540, 12502, 12523]], [[13141, 13141], "mapped", [12524, 12512]], [[13142, 13142], "mapped", [12524, 12531, 12488, 12466, 12531]], [[13143, 13143], "mapped", [12527, 12483, 12488]], [[13144, 13144], "mapped", [48, 28857]], [[13145, 13145], "mapped", [49, 28857]], [[13146, 13146], "mapped", [50, 28857]], [[13147, 13147], "mapped", [51, 28857]], [[13148, 13148], "mapped", [52, 28857]], [[13149, 13149], "mapped", [53, 28857]], [[13150, 13150], "mapped", [54, 28857]], [[13151, 13151], "mapped", [55, 28857]], [[13152, 13152], "mapped", [56, 28857]], [[13153, 13153], "mapped", [57, 28857]], [[13154, 13154], "mapped", [49, 48, 28857]], [[13155, 13155], "mapped", [49, 49, 28857]], [[13156, 13156], "mapped", [49, 50, 28857]], [[13157, 13157], "mapped", [49, 51, 28857]], [[13158, 13158], "mapped", [49, 52, 28857]], [[13159, 13159], "mapped", [49, 53, 28857]], [[13160, 13160], "mapped", [49, 54, 28857]], [[13161, 13161], "mapped", [49, 55, 28857]], [[13162, 13162], "mapped", [49, 56, 28857]], [[13163, 13163], "mapped", [49, 57, 28857]], [[13164, 13164], "mapped", [50, 48, 28857]], [[13165, 13165], "mapped", [50, 49, 28857]], [[13166, 13166], "mapped", [50, 50, 28857]], [[13167, 13167], "mapped", [50, 51, 28857]], [[13168, 13168], "mapped", [50, 52, 28857]], [[13169, 13169], "mapped", [104, 112, 97]], [[13170, 13170], "mapped", [100, 97]], [[13171, 13171], "mapped", [97, 117]], [[13172, 13172], "mapped", [98, 97, 114]], [[13173, 13173], "mapped", [111, 118]], [[13174, 13174], "mapped", [112, 99]], [[13175, 13175], "mapped", [100, 109]], [[13176, 13176], "mapped", [100, 109, 50]], [[13177, 13177], "mapped", [100, 109, 51]], [[13178, 13178], "mapped", [105, 117]], [[13179, 13179], "mapped", [24179, 25104]], [[13180, 13180], "mapped", [26157, 21644]], [[13181, 13181], "mapped", [22823, 27491]], [[13182, 13182], "mapped", [26126, 27835]], [[13183, 13183], "mapped", [26666, 24335, 20250, 31038]], [[13184, 13184], "mapped", [112, 97]], [[13185, 13185], "mapped", [110, 97]], [[13186, 13186], "mapped", [956, 97]], [[13187, 13187], "mapped", [109, 97]], [[13188, 13188], "mapped", [107, 97]], [[13189, 13189], "mapped", [107, 98]], [[13190, 13190], "mapped", [109, 98]], [[13191, 13191], "mapped", [103, 98]], [[13192, 13192], "mapped", [99, 97, 108]], [[13193, 13193], "mapped", [107, 99, 97, 108]], [[13194, 13194], "mapped", [112, 102]], [[13195, 13195], "mapped", [110, 102]], [[13196, 13196], "mapped", [956, 102]], [[13197, 13197], "mapped", [956, 103]], [[13198, 13198], "mapped", [109, 103]], [[13199, 13199], "mapped", [107, 103]], [[13200, 13200], "mapped", [104, 122]], [[13201, 13201], "mapped", [107, 104, 122]], [[13202, 13202], "mapped", [109, 104, 122]], [[13203, 13203], "mapped", [103, 104, 122]], [[13204, 13204], "mapped", [116, 104, 122]], [[13205, 13205], "mapped", [956, 108]], [[13206, 13206], "mapped", [109, 108]], [[13207, 13207], "mapped", [100, 108]], [[13208, 13208], "mapped", [107, 108]], [[13209, 13209], "mapped", [102, 109]], [[13210, 13210], "mapped", [110, 109]], [[13211, 13211], "mapped", [956, 109]], [[13212, 13212], "mapped", [109, 109]], [[13213, 13213], "mapped", [99, 109]], [[13214, 13214], "mapped", [107, 109]], [[13215, 13215], "mapped", [109, 109, 50]], [[13216, 13216], "mapped", [99, 109, 50]], [[13217, 13217], "mapped", [109, 50]], [[13218, 13218], "mapped", [107, 109, 50]], [[13219, 13219], "mapped", [109, 109, 51]], [[13220, 13220], "mapped", [99, 109, 51]], [[13221, 13221], "mapped", [109, 51]], [[13222, 13222], "mapped", [107, 109, 51]], [[13223, 13223], "mapped", [109, 8725, 115]], [[13224, 13224], "mapped", [109, 8725, 115, 50]], [[13225, 13225], "mapped", [112, 97]], [[13226, 13226], "mapped", [107, 112, 97]], [[13227, 13227], "mapped", [109, 112, 97]], [[13228, 13228], "mapped", [103, 112, 97]], [[13229, 13229], "mapped", [114, 97, 100]], [[13230, 13230], "mapped", [114, 97, 100, 8725, 115]], [[13231, 13231], "mapped", [114, 97, 100, 8725, 115, 50]], [[13232, 13232], "mapped", [112, 115]], [[13233, 13233], "mapped", [110, 115]], [[13234, 13234], "mapped", [956, 115]], [[13235, 13235], "mapped", [109, 115]], [[13236, 13236], "mapped", [112, 118]], [[13237, 13237], "mapped", [110, 118]], [[13238, 13238], "mapped", [956, 118]], [[13239, 13239], "mapped", [109, 118]], [[13240, 13240], "mapped", [107, 118]], [[13241, 13241], "mapped", [109, 118]], [[13242, 13242], "mapped", [112, 119]], [[13243, 13243], "mapped", [110, 119]], [[13244, 13244], "mapped", [956, 119]], [[13245, 13245], "mapped", [109, 119]], [[13246, 13246], "mapped", [107, 119]], [[13247, 13247], "mapped", [109, 119]], [[13248, 13248], "mapped", [107, 969]], [[13249, 13249], "mapped", [109, 969]], [[13250, 13250], "disallowed"], [[13251, 13251], "mapped", [98, 113]], [[13252, 13252], "mapped", [99, 99]], [[13253, 13253], "mapped", [99, 100]], [[13254, 13254], "mapped", [99, 8725, 107, 103]], [[13255, 13255], "disallowed"], [[13256, 13256], "mapped", [100, 98]], [[13257, 13257], "mapped", [103, 121]], [[13258, 13258], "mapped", [104, 97]], [[13259, 13259], "mapped", [104, 112]], [[13260, 13260], "mapped", [105, 110]], [[13261, 13261], "mapped", [107, 107]], [[13262, 13262], "mapped", [107, 109]], [[13263, 13263], "mapped", [107, 116]], [[13264, 13264], "mapped", [108, 109]], [[13265, 13265], "mapped", [108, 110]], [[13266, 13266], "mapped", [108, 111, 103]], [[13267, 13267], "mapped", [108, 120]], [[13268, 13268], "mapped", [109, 98]], [[13269, 13269], "mapped", [109, 105, 108]], [[13270, 13270], "mapped", [109, 111, 108]], [[13271, 13271], "mapped", [112, 104]], [[13272, 13272], "disallowed"], [[13273, 13273], "mapped", [112, 112, 109]], [[13274, 13274], "mapped", [112, 114]], [[13275, 13275], "mapped", [115, 114]], [[13276, 13276], "mapped", [115, 118]], [[13277, 13277], "mapped", [119, 98]], [[13278, 13278], "mapped", [118, 8725, 109]], [[13279, 13279], "mapped", [97, 8725, 109]], [[13280, 13280], "mapped", [49, 26085]], [[13281, 13281], "mapped", [50, 26085]], [[13282, 13282], "mapped", [51, 26085]], [[13283, 13283], "mapped", [52, 26085]], [[13284, 13284], "mapped", [53, 26085]], [[13285, 13285], "mapped", [54, 26085]], [[13286, 13286], "mapped", [55, 26085]], [[13287, 13287], "mapped", [56, 26085]], [[13288, 13288], "mapped", [57, 26085]], [[13289, 13289], "mapped", [49, 48, 26085]], [[13290, 13290], "mapped", [49, 49, 26085]], [[13291, 13291], "mapped", [49, 50, 26085]], [[13292, 13292], "mapped", [49, 51, 26085]], [[13293, 13293], "mapped", [49, 52, 26085]], [[13294, 13294], "mapped", [49, 53, 26085]], [[13295, 13295], "mapped", [49, 54, 26085]], [[13296, 13296], "mapped", [49, 55, 26085]], [[13297, 13297], "mapped", [49, 56, 26085]], [[13298, 13298], "mapped", [49, 57, 26085]], [[13299, 13299], "mapped", [50, 48, 26085]], [[13300, 13300], "mapped", [50, 49, 26085]], [[13301, 13301], "mapped", [50, 50, 26085]], [[13302, 13302], "mapped", [50, 51, 26085]], [[13303, 13303], "mapped", [50, 52, 26085]], [[13304, 13304], "mapped", [50, 53, 26085]], [[13305, 13305], "mapped", [50, 54, 26085]], [[13306, 13306], "mapped", [50, 55, 26085]], [[13307, 13307], "mapped", [50, 56, 26085]], [[13308, 13308], "mapped", [50, 57, 26085]], [[13309, 13309], "mapped", [51, 48, 26085]], [[13310, 13310], "mapped", [51, 49, 26085]], [[13311, 13311], "mapped", [103, 97, 108]], [[13312, 19893], "valid"], [[19894, 19903], "disallowed"], [[19904, 19967], "valid", [], "NV8"], [[19968, 40869], "valid"], [[40870, 40891], "valid"], [[40892, 40899], "valid"], [[40900, 40907], "valid"], [[40908, 40908], "valid"], [[40909, 40917], "valid"], [[40918, 40959], "disallowed"], [[40960, 42124], "valid"], [[42125, 42127], "disallowed"], [[42128, 42145], "valid", [], "NV8"], [[42146, 42147], "valid", [], "NV8"], [[42148, 42163], "valid", [], "NV8"], [[42164, 42164], "valid", [], "NV8"], [[42165, 42176], "valid", [], "NV8"], [[42177, 42177], "valid", [], "NV8"], [[42178, 42180], "valid", [], "NV8"], [[42181, 42181], "valid", [], "NV8"], [[42182, 42182], "valid", [], "NV8"], [[42183, 42191], "disallowed"], [[42192, 42237], "valid"], [[42238, 42239], "valid", [], "NV8"], [[42240, 42508], "valid"], [[42509, 42511], "valid", [], "NV8"], [[42512, 42539], "valid"], [[42540, 42559], "disallowed"], [[42560, 42560], "mapped", [42561]], [[42561, 42561], "valid"], [[42562, 42562], "mapped", [42563]], [[42563, 42563], "valid"], [[42564, 42564], "mapped", [42565]], [[42565, 42565], "valid"], [[42566, 42566], "mapped", [42567]], [[42567, 42567], "valid"], [[42568, 42568], "mapped", [42569]], [[42569, 42569], "valid"], [[42570, 42570], "mapped", [42571]], [[42571, 42571], "valid"], [[42572, 42572], "mapped", [42573]], [[42573, 42573], "valid"], [[42574, 42574], "mapped", [42575]], [[42575, 42575], "valid"], [[42576, 42576], "mapped", [42577]], [[42577, 42577], "valid"], [[42578, 42578], "mapped", [42579]], [[42579, 42579], "valid"], [[42580, 42580], "mapped", [42581]], [[42581, 42581], "valid"], [[42582, 42582], "mapped", [42583]], [[42583, 42583], "valid"], [[42584, 42584], "mapped", [42585]], [[42585, 42585], "valid"], [[42586, 42586], "mapped", [42587]], [[42587, 42587], "valid"], [[42588, 42588], "mapped", [42589]], [[42589, 42589], "valid"], [[42590, 42590], "mapped", [42591]], [[42591, 42591], "valid"], [[42592, 42592], "mapped", [42593]], [[42593, 42593], "valid"], [[42594, 42594], "mapped", [42595]], [[42595, 42595], "valid"], [[42596, 42596], "mapped", [42597]], [[42597, 42597], "valid"], [[42598, 42598], "mapped", [42599]], [[42599, 42599], "valid"], [[42600, 42600], "mapped", [42601]], [[42601, 42601], "valid"], [[42602, 42602], "mapped", [42603]], [[42603, 42603], "valid"], [[42604, 42604], "mapped", [42605]], [[42605, 42607], "valid"], [[42608, 42611], "valid", [], "NV8"], [[42612, 42619], "valid"], [[42620, 42621], "valid"], [[42622, 42622], "valid", [], "NV8"], [[42623, 42623], "valid"], [[42624, 42624], "mapped", [42625]], [[42625, 42625], "valid"], [[42626, 42626], "mapped", [42627]], [[42627, 42627], "valid"], [[42628, 42628], "mapped", [42629]], [[42629, 42629], "valid"], [[42630, 42630], "mapped", [42631]], [[42631, 42631], "valid"], [[42632, 42632], "mapped", [42633]], [[42633, 42633], "valid"], [[42634, 42634], "mapped", [42635]], [[42635, 42635], "valid"], [[42636, 42636], "mapped", [42637]], [[42637, 42637], "valid"], [[42638, 42638], "mapped", [42639]], [[42639, 42639], "valid"], [[42640, 42640], "mapped", [42641]], [[42641, 42641], "valid"], [[42642, 42642], "mapped", [42643]], [[42643, 42643], "valid"], [[42644, 42644], "mapped", [42645]], [[42645, 42645], "valid"], [[42646, 42646], "mapped", [42647]], [[42647, 42647], "valid"], [[42648, 42648], "mapped", [42649]], [[42649, 42649], "valid"], [[42650, 42650], "mapped", [42651]], [[42651, 42651], "valid"], [[42652, 42652], "mapped", [1098]], [[42653, 42653], "mapped", [1100]], [[42654, 42654], "valid"], [[42655, 42655], "valid"], [[42656, 42725], "valid"], [[42726, 42735], "valid", [], "NV8"], [[42736, 42737], "valid"], [[42738, 42743], "valid", [], "NV8"], [[42744, 42751], "disallowed"], [[42752, 42774], "valid", [], "NV8"], [[42775, 42778], "valid"], [[42779, 42783], "valid"], [[42784, 42785], "valid", [], "NV8"], [[42786, 42786], "mapped", [42787]], [[42787, 42787], "valid"], [[42788, 42788], "mapped", [42789]], [[42789, 42789], "valid"], [[42790, 42790], "mapped", [42791]], [[42791, 42791], "valid"], [[42792, 42792], "mapped", [42793]], [[42793, 42793], "valid"], [[42794, 42794], "mapped", [42795]], [[42795, 42795], "valid"], [[42796, 42796], "mapped", [42797]], [[42797, 42797], "valid"], [[42798, 42798], "mapped", [42799]], [[42799, 42801], "valid"], [[42802, 42802], "mapped", [42803]], [[42803, 42803], "valid"], [[42804, 42804], "mapped", [42805]], [[42805, 42805], "valid"], [[42806, 42806], "mapped", [42807]], [[42807, 42807], "valid"], [[42808, 42808], "mapped", [42809]], [[42809, 42809], "valid"], [[42810, 42810], "mapped", [42811]], [[42811, 42811], "valid"], [[42812, 42812], "mapped", [42813]], [[42813, 42813], "valid"], [[42814, 42814], "mapped", [42815]], [[42815, 42815], "valid"], [[42816, 42816], "mapped", [42817]], [[42817, 42817], "valid"], [[42818, 42818], "mapped", [42819]], [[42819, 42819], "valid"], [[42820, 42820], "mapped", [42821]], [[42821, 42821], "valid"], [[42822, 42822], "mapped", [42823]], [[42823, 42823], "valid"], [[42824, 42824], "mapped", [42825]], [[42825, 42825], "valid"], [[42826, 42826], "mapped", [42827]], [[42827, 42827], "valid"], [[42828, 42828], "mapped", [42829]], [[42829, 42829], "valid"], [[42830, 42830], "mapped", [42831]], [[42831, 42831], "valid"], [[42832, 42832], "mapped", [42833]], [[42833, 42833], "valid"], [[42834, 42834], "mapped", [42835]], [[42835, 42835], "valid"], [[42836, 42836], "mapped", [42837]], [[42837, 42837], "valid"], [[42838, 42838], "mapped", [42839]], [[42839, 42839], "valid"], [[42840, 42840], "mapped", [42841]], [[42841, 42841], "valid"], [[42842, 42842], "mapped", [42843]], [[42843, 42843], "valid"], [[42844, 42844], "mapped", [42845]], [[42845, 42845], "valid"], [[42846, 42846], "mapped", [42847]], [[42847, 42847], "valid"], [[42848, 42848], "mapped", [42849]], [[42849, 42849], "valid"], [[42850, 42850], "mapped", [42851]], [[42851, 42851], "valid"], [[42852, 42852], "mapped", [42853]], [[42853, 42853], "valid"], [[42854, 42854], "mapped", [42855]], [[42855, 42855], "valid"], [[42856, 42856], "mapped", [42857]], [[42857, 42857], "valid"], [[42858, 42858], "mapped", [42859]], [[42859, 42859], "valid"], [[42860, 42860], "mapped", [42861]], [[42861, 42861], "valid"], [[42862, 42862], "mapped", [42863]], [[42863, 42863], "valid"], [[42864, 42864], "mapped", [42863]], [[42865, 42872], "valid"], [[42873, 42873], "mapped", [42874]], [[42874, 42874], "valid"], [[42875, 42875], "mapped", [42876]], [[42876, 42876], "valid"], [[42877, 42877], "mapped", [7545]], [[42878, 42878], "mapped", [42879]], [[42879, 42879], "valid"], [[42880, 42880], "mapped", [42881]], [[42881, 42881], "valid"], [[42882, 42882], "mapped", [42883]], [[42883, 42883], "valid"], [[42884, 42884], "mapped", [42885]], [[42885, 42885], "valid"], [[42886, 42886], "mapped", [42887]], [[42887, 42888], "valid"], [[42889, 42890], "valid", [], "NV8"], [[42891, 42891], "mapped", [42892]], [[42892, 42892], "valid"], [[42893, 42893], "mapped", [613]], [[42894, 42894], "valid"], [[42895, 42895], "valid"], [[42896, 42896], "mapped", [42897]], [[42897, 42897], "valid"], [[42898, 42898], "mapped", [42899]], [[42899, 42899], "valid"], [[42900, 42901], "valid"], [[42902, 42902], "mapped", [42903]], [[42903, 42903], "valid"], [[42904, 42904], "mapped", [42905]], [[42905, 42905], "valid"], [[42906, 42906], "mapped", [42907]], [[42907, 42907], "valid"], [[42908, 42908], "mapped", [42909]], [[42909, 42909], "valid"], [[42910, 42910], "mapped", [42911]], [[42911, 42911], "valid"], [[42912, 42912], "mapped", [42913]], [[42913, 42913], "valid"], [[42914, 42914], "mapped", [42915]], [[42915, 42915], "valid"], [[42916, 42916], "mapped", [42917]], [[42917, 42917], "valid"], [[42918, 42918], "mapped", [42919]], [[42919, 42919], "valid"], [[42920, 42920], "mapped", [42921]], [[42921, 42921], "valid"], [[42922, 42922], "mapped", [614]], [[42923, 42923], "mapped", [604]], [[42924, 42924], "mapped", [609]], [[42925, 42925], "mapped", [620]], [[42926, 42927], "disallowed"], [[42928, 42928], "mapped", [670]], [[42929, 42929], "mapped", [647]], [[42930, 42930], "mapped", [669]], [[42931, 42931], "mapped", [43859]], [[42932, 42932], "mapped", [42933]], [[42933, 42933], "valid"], [[42934, 42934], "mapped", [42935]], [[42935, 42935], "valid"], [[42936, 42998], "disallowed"], [[42999, 42999], "valid"], [[43e3, 43e3], "mapped", [295]], [[43001, 43001], "mapped", [339]], [[43002, 43002], "valid"], [[43003, 43007], "valid"], [[43008, 43047], "valid"], [[43048, 43051], "valid", [], "NV8"], [[43052, 43055], "disallowed"], [[43056, 43065], "valid", [], "NV8"], [[43066, 43071], "disallowed"], [[43072, 43123], "valid"], [[43124, 43127], "valid", [], "NV8"], [[43128, 43135], "disallowed"], [[43136, 43204], "valid"], [[43205, 43213], "disallowed"], [[43214, 43215], "valid", [], "NV8"], [[43216, 43225], "valid"], [[43226, 43231], "disallowed"], [[43232, 43255], "valid"], [[43256, 43258], "valid", [], "NV8"], [[43259, 43259], "valid"], [[43260, 43260], "valid", [], "NV8"], [[43261, 43261], "valid"], [[43262, 43263], "disallowed"], [[43264, 43309], "valid"], [[43310, 43311], "valid", [], "NV8"], [[43312, 43347], "valid"], [[43348, 43358], "disallowed"], [[43359, 43359], "valid", [], "NV8"], [[43360, 43388], "valid", [], "NV8"], [[43389, 43391], "disallowed"], [[43392, 43456], "valid"], [[43457, 43469], "valid", [], "NV8"], [[43470, 43470], "disallowed"], [[43471, 43481], "valid"], [[43482, 43485], "disallowed"], [[43486, 43487], "valid", [], "NV8"], [[43488, 43518], "valid"], [[43519, 43519], "disallowed"], [[43520, 43574], "valid"], [[43575, 43583], "disallowed"], [[43584, 43597], "valid"], [[43598, 43599], "disallowed"], [[43600, 43609], "valid"], [[43610, 43611], "disallowed"], [[43612, 43615], "valid", [], "NV8"], [[43616, 43638], "valid"], [[43639, 43641], "valid", [], "NV8"], [[43642, 43643], "valid"], [[43644, 43647], "valid"], [[43648, 43714], "valid"], [[43715, 43738], "disallowed"], [[43739, 43741], "valid"], [[43742, 43743], "valid", [], "NV8"], [[43744, 43759], "valid"], [[43760, 43761], "valid", [], "NV8"], [[43762, 43766], "valid"], [[43767, 43776], "disallowed"], [[43777, 43782], "valid"], [[43783, 43784], "disallowed"], [[43785, 43790], "valid"], [[43791, 43792], "disallowed"], [[43793, 43798], "valid"], [[43799, 43807], "disallowed"], [[43808, 43814], "valid"], [[43815, 43815], "disallowed"], [[43816, 43822], "valid"], [[43823, 43823], "disallowed"], [[43824, 43866], "valid"], [[43867, 43867], "valid", [], "NV8"], [[43868, 43868], "mapped", [42791]], [[43869, 43869], "mapped", [43831]], [[43870, 43870], "mapped", [619]], [[43871, 43871], "mapped", [43858]], [[43872, 43875], "valid"], [[43876, 43877], "valid"], [[43878, 43887], "disallowed"], [[43888, 43888], "mapped", [5024]], [[43889, 43889], "mapped", [5025]], [[43890, 43890], "mapped", [5026]], [[43891, 43891], "mapped", [5027]], [[43892, 43892], "mapped", [5028]], [[43893, 43893], "mapped", [5029]], [[43894, 43894], "mapped", [5030]], [[43895, 43895], "mapped", [5031]], [[43896, 43896], "mapped", [5032]], [[43897, 43897], "mapped", [5033]], [[43898, 43898], "mapped", [5034]], [[43899, 43899], "mapped", [5035]], [[43900, 43900], "mapped", [5036]], [[43901, 43901], "mapped", [5037]], [[43902, 43902], "mapped", [5038]], [[43903, 43903], "mapped", [5039]], [[43904, 43904], "mapped", [5040]], [[43905, 43905], "mapped", [5041]], [[43906, 43906], "mapped", [5042]], [[43907, 43907], "mapped", [5043]], [[43908, 43908], "mapped", [5044]], [[43909, 43909], "mapped", [5045]], [[43910, 43910], "mapped", [5046]], [[43911, 43911], "mapped", [5047]], [[43912, 43912], "mapped", [5048]], [[43913, 43913], "mapped", [5049]], [[43914, 43914], "mapped", [5050]], [[43915, 43915], "mapped", [5051]], [[43916, 43916], "mapped", [5052]], [[43917, 43917], "mapped", [5053]], [[43918, 43918], "mapped", [5054]], [[43919, 43919], "mapped", [5055]], [[43920, 43920], "mapped", [5056]], [[43921, 43921], "mapped", [5057]], [[43922, 43922], "mapped", [5058]], [[43923, 43923], "mapped", [5059]], [[43924, 43924], "mapped", [5060]], [[43925, 43925], "mapped", [5061]], [[43926, 43926], "mapped", [5062]], [[43927, 43927], "mapped", [5063]], [[43928, 43928], "mapped", [5064]], [[43929, 43929], "mapped", [5065]], [[43930, 43930], "mapped", [5066]], [[43931, 43931], "mapped", [5067]], [[43932, 43932], "mapped", [5068]], [[43933, 43933], "mapped", [5069]], [[43934, 43934], "mapped", [5070]], [[43935, 43935], "mapped", [5071]], [[43936, 43936], "mapped", [5072]], [[43937, 43937], "mapped", [5073]], [[43938, 43938], "mapped", [5074]], [[43939, 43939], "mapped", [5075]], [[43940, 43940], "mapped", [5076]], [[43941, 43941], "mapped", [5077]], [[43942, 43942], "mapped", [5078]], [[43943, 43943], "mapped", [5079]], [[43944, 43944], "mapped", [5080]], [[43945, 43945], "mapped", [5081]], [[43946, 43946], "mapped", [5082]], [[43947, 43947], "mapped", [5083]], [[43948, 43948], "mapped", [5084]], [[43949, 43949], "mapped", [5085]], [[43950, 43950], "mapped", [5086]], [[43951, 43951], "mapped", [5087]], [[43952, 43952], "mapped", [5088]], [[43953, 43953], "mapped", [5089]], [[43954, 43954], "mapped", [5090]], [[43955, 43955], "mapped", [5091]], [[43956, 43956], "mapped", [5092]], [[43957, 43957], "mapped", [5093]], [[43958, 43958], "mapped", [5094]], [[43959, 43959], "mapped", [5095]], [[43960, 43960], "mapped", [5096]], [[43961, 43961], "mapped", [5097]], [[43962, 43962], "mapped", [5098]], [[43963, 43963], "mapped", [5099]], [[43964, 43964], "mapped", [5100]], [[43965, 43965], "mapped", [5101]], [[43966, 43966], "mapped", [5102]], [[43967, 43967], "mapped", [5103]], [[43968, 44010], "valid"], [[44011, 44011], "valid", [], "NV8"], [[44012, 44013], "valid"], [[44014, 44015], "disallowed"], [[44016, 44025], "valid"], [[44026, 44031], "disallowed"], [[44032, 55203], "valid"], [[55204, 55215], "disallowed"], [[55216, 55238], "valid", [], "NV8"], [[55239, 55242], "disallowed"], [[55243, 55291], "valid", [], "NV8"], [[55292, 55295], "disallowed"], [[55296, 57343], "disallowed"], [[57344, 63743], "disallowed"], [[63744, 63744], "mapped", [35912]], [[63745, 63745], "mapped", [26356]], [[63746, 63746], "mapped", [36554]], [[63747, 63747], "mapped", [36040]], [[63748, 63748], "mapped", [28369]], [[63749, 63749], "mapped", [20018]], [[63750, 63750], "mapped", [21477]], [[63751, 63752], "mapped", [40860]], [[63753, 63753], "mapped", [22865]], [[63754, 63754], "mapped", [37329]], [[63755, 63755], "mapped", [21895]], [[63756, 63756], "mapped", [22856]], [[63757, 63757], "mapped", [25078]], [[63758, 63758], "mapped", [30313]], [[63759, 63759], "mapped", [32645]], [[63760, 63760], "mapped", [34367]], [[63761, 63761], "mapped", [34746]], [[63762, 63762], "mapped", [35064]], [[63763, 63763], "mapped", [37007]], [[63764, 63764], "mapped", [27138]], [[63765, 63765], "mapped", [27931]], [[63766, 63766], "mapped", [28889]], [[63767, 63767], "mapped", [29662]], [[63768, 63768], "mapped", [33853]], [[63769, 63769], "mapped", [37226]], [[63770, 63770], "mapped", [39409]], [[63771, 63771], "mapped", [20098]], [[63772, 63772], "mapped", [21365]], [[63773, 63773], "mapped", [27396]], [[63774, 63774], "mapped", [29211]], [[63775, 63775], "mapped", [34349]], [[63776, 63776], "mapped", [40478]], [[63777, 63777], "mapped", [23888]], [[63778, 63778], "mapped", [28651]], [[63779, 63779], "mapped", [34253]], [[63780, 63780], "mapped", [35172]], [[63781, 63781], "mapped", [25289]], [[63782, 63782], "mapped", [33240]], [[63783, 63783], "mapped", [34847]], [[63784, 63784], "mapped", [24266]], [[63785, 63785], "mapped", [26391]], [[63786, 63786], "mapped", [28010]], [[63787, 63787], "mapped", [29436]], [[63788, 63788], "mapped", [37070]], [[63789, 63789], "mapped", [20358]], [[63790, 63790], "mapped", [20919]], [[63791, 63791], "mapped", [21214]], [[63792, 63792], "mapped", [25796]], [[63793, 63793], "mapped", [27347]], [[63794, 63794], "mapped", [29200]], [[63795, 63795], "mapped", [30439]], [[63796, 63796], "mapped", [32769]], [[63797, 63797], "mapped", [34310]], [[63798, 63798], "mapped", [34396]], [[63799, 63799], "mapped", [36335]], [[63800, 63800], "mapped", [38706]], [[63801, 63801], "mapped", [39791]], [[63802, 63802], "mapped", [40442]], [[63803, 63803], "mapped", [30860]], [[63804, 63804], "mapped", [31103]], [[63805, 63805], "mapped", [32160]], [[63806, 63806], "mapped", [33737]], [[63807, 63807], "mapped", [37636]], [[63808, 63808], "mapped", [40575]], [[63809, 63809], "mapped", [35542]], [[63810, 63810], "mapped", [22751]], [[63811, 63811], "mapped", [24324]], [[63812, 63812], "mapped", [31840]], [[63813, 63813], "mapped", [32894]], [[63814, 63814], "mapped", [29282]], [[63815, 63815], "mapped", [30922]], [[63816, 63816], "mapped", [36034]], [[63817, 63817], "mapped", [38647]], [[63818, 63818], "mapped", [22744]], [[63819, 63819], "mapped", [23650]], [[63820, 63820], "mapped", [27155]], [[63821, 63821], "mapped", [28122]], [[63822, 63822], "mapped", [28431]], [[63823, 63823], "mapped", [32047]], [[63824, 63824], "mapped", [32311]], [[63825, 63825], "mapped", [38475]], [[63826, 63826], "mapped", [21202]], [[63827, 63827], "mapped", [32907]], [[63828, 63828], "mapped", [20956]], [[63829, 63829], "mapped", [20940]], [[63830, 63830], "mapped", [31260]], [[63831, 63831], "mapped", [32190]], [[63832, 63832], "mapped", [33777]], [[63833, 63833], "mapped", [38517]], [[63834, 63834], "mapped", [35712]], [[63835, 63835], "mapped", [25295]], [[63836, 63836], "mapped", [27138]], [[63837, 63837], "mapped", [35582]], [[63838, 63838], "mapped", [20025]], [[63839, 63839], "mapped", [23527]], [[63840, 63840], "mapped", [24594]], [[63841, 63841], "mapped", [29575]], [[63842, 63842], "mapped", [30064]], [[63843, 63843], "mapped", [21271]], [[63844, 63844], "mapped", [30971]], [[63845, 63845], "mapped", [20415]], [[63846, 63846], "mapped", [24489]], [[63847, 63847], "mapped", [19981]], [[63848, 63848], "mapped", [27852]], [[63849, 63849], "mapped", [25976]], [[63850, 63850], "mapped", [32034]], [[63851, 63851], "mapped", [21443]], [[63852, 63852], "mapped", [22622]], [[63853, 63853], "mapped", [30465]], [[63854, 63854], "mapped", [33865]], [[63855, 63855], "mapped", [35498]], [[63856, 63856], "mapped", [27578]], [[63857, 63857], "mapped", [36784]], [[63858, 63858], "mapped", [27784]], [[63859, 63859], "mapped", [25342]], [[63860, 63860], "mapped", [33509]], [[63861, 63861], "mapped", [25504]], [[63862, 63862], "mapped", [30053]], [[63863, 63863], "mapped", [20142]], [[63864, 63864], "mapped", [20841]], [[63865, 63865], "mapped", [20937]], [[63866, 63866], "mapped", [26753]], [[63867, 63867], "mapped", [31975]], [[63868, 63868], "mapped", [33391]], [[63869, 63869], "mapped", [35538]], [[63870, 63870], "mapped", [37327]], [[63871, 63871], "mapped", [21237]], [[63872, 63872], "mapped", [21570]], [[63873, 63873], "mapped", [22899]], [[63874, 63874], "mapped", [24300]], [[63875, 63875], "mapped", [26053]], [[63876, 63876], "mapped", [28670]], [[63877, 63877], "mapped", [31018]], [[63878, 63878], "mapped", [38317]], [[63879, 63879], "mapped", [39530]], [[63880, 63880], "mapped", [40599]], [[63881, 63881], "mapped", [40654]], [[63882, 63882], "mapped", [21147]], [[63883, 63883], "mapped", [26310]], [[63884, 63884], "mapped", [27511]], [[63885, 63885], "mapped", [36706]], [[63886, 63886], "mapped", [24180]], [[63887, 63887], "mapped", [24976]], [[63888, 63888], "mapped", [25088]], [[63889, 63889], "mapped", [25754]], [[63890, 63890], "mapped", [28451]], [[63891, 63891], "mapped", [29001]], [[63892, 63892], "mapped", [29833]], [[63893, 63893], "mapped", [31178]], [[63894, 63894], "mapped", [32244]], [[63895, 63895], "mapped", [32879]], [[63896, 63896], "mapped", [36646]], [[63897, 63897], "mapped", [34030]], [[63898, 63898], "mapped", [36899]], [[63899, 63899], "mapped", [37706]], [[63900, 63900], "mapped", [21015]], [[63901, 63901], "mapped", [21155]], [[63902, 63902], "mapped", [21693]], [[63903, 63903], "mapped", [28872]], [[63904, 63904], "mapped", [35010]], [[63905, 63905], "mapped", [35498]], [[63906, 63906], "mapped", [24265]], [[63907, 63907], "mapped", [24565]], [[63908, 63908], "mapped", [25467]], [[63909, 63909], "mapped", [27566]], [[63910, 63910], "mapped", [31806]], [[63911, 63911], "mapped", [29557]], [[63912, 63912], "mapped", [20196]], [[63913, 63913], "mapped", [22265]], [[63914, 63914], "mapped", [23527]], [[63915, 63915], "mapped", [23994]], [[63916, 63916], "mapped", [24604]], [[63917, 63917], "mapped", [29618]], [[63918, 63918], "mapped", [29801]], [[63919, 63919], "mapped", [32666]], [[63920, 63920], "mapped", [32838]], [[63921, 63921], "mapped", [37428]], [[63922, 63922], "mapped", [38646]], [[63923, 63923], "mapped", [38728]], [[63924, 63924], "mapped", [38936]], [[63925, 63925], "mapped", [20363]], [[63926, 63926], "mapped", [31150]], [[63927, 63927], "mapped", [37300]], [[63928, 63928], "mapped", [38584]], [[63929, 63929], "mapped", [24801]], [[63930, 63930], "mapped", [20102]], [[63931, 63931], "mapped", [20698]], [[63932, 63932], "mapped", [23534]], [[63933, 63933], "mapped", [23615]], [[63934, 63934], "mapped", [26009]], [[63935, 63935], "mapped", [27138]], [[63936, 63936], "mapped", [29134]], [[63937, 63937], "mapped", [30274]], [[63938, 63938], "mapped", [34044]], [[63939, 63939], "mapped", [36988]], [[63940, 63940], "mapped", [40845]], [[63941, 63941], "mapped", [26248]], [[63942, 63942], "mapped", [38446]], [[63943, 63943], "mapped", [21129]], [[63944, 63944], "mapped", [26491]], [[63945, 63945], "mapped", [26611]], [[63946, 63946], "mapped", [27969]], [[63947, 63947], "mapped", [28316]], [[63948, 63948], "mapped", [29705]], [[63949, 63949], "mapped", [30041]], [[63950, 63950], "mapped", [30827]], [[63951, 63951], "mapped", [32016]], [[63952, 63952], "mapped", [39006]], [[63953, 63953], "mapped", [20845]], [[63954, 63954], "mapped", [25134]], [[63955, 63955], "mapped", [38520]], [[63956, 63956], "mapped", [20523]], [[63957, 63957], "mapped", [23833]], [[63958, 63958], "mapped", [28138]], [[63959, 63959], "mapped", [36650]], [[63960, 63960], "mapped", [24459]], [[63961, 63961], "mapped", [24900]], [[63962, 63962], "mapped", [26647]], [[63963, 63963], "mapped", [29575]], [[63964, 63964], "mapped", [38534]], [[63965, 63965], "mapped", [21033]], [[63966, 63966], "mapped", [21519]], [[63967, 63967], "mapped", [23653]], [[63968, 63968], "mapped", [26131]], [[63969, 63969], "mapped", [26446]], [[63970, 63970], "mapped", [26792]], [[63971, 63971], "mapped", [27877]], [[63972, 63972], "mapped", [29702]], [[63973, 63973], "mapped", [30178]], [[63974, 63974], "mapped", [32633]], [[63975, 63975], "mapped", [35023]], [[63976, 63976], "mapped", [35041]], [[63977, 63977], "mapped", [37324]], [[63978, 63978], "mapped", [38626]], [[63979, 63979], "mapped", [21311]], [[63980, 63980], "mapped", [28346]], [[63981, 63981], "mapped", [21533]], [[63982, 63982], "mapped", [29136]], [[63983, 63983], "mapped", [29848]], [[63984, 63984], "mapped", [34298]], [[63985, 63985], "mapped", [38563]], [[63986, 63986], "mapped", [40023]], [[63987, 63987], "mapped", [40607]], [[63988, 63988], "mapped", [26519]], [[63989, 63989], "mapped", [28107]], [[63990, 63990], "mapped", [33256]], [[63991, 63991], "mapped", [31435]], [[63992, 63992], "mapped", [31520]], [[63993, 63993], "mapped", [31890]], [[63994, 63994], "mapped", [29376]], [[63995, 63995], "mapped", [28825]], [[63996, 63996], "mapped", [35672]], [[63997, 63997], "mapped", [20160]], [[63998, 63998], "mapped", [33590]], [[63999, 63999], "mapped", [21050]], [[64e3, 64e3], "mapped", [20999]], [[64001, 64001], "mapped", [24230]], [[64002, 64002], "mapped", [25299]], [[64003, 64003], "mapped", [31958]], [[64004, 64004], "mapped", [23429]], [[64005, 64005], "mapped", [27934]], [[64006, 64006], "mapped", [26292]], [[64007, 64007], "mapped", [36667]], [[64008, 64008], "mapped", [34892]], [[64009, 64009], "mapped", [38477]], [[64010, 64010], "mapped", [35211]], [[64011, 64011], "mapped", [24275]], [[64012, 64012], "mapped", [20800]], [[64013, 64013], "mapped", [21952]], [[64014, 64015], "valid"], [[64016, 64016], "mapped", [22618]], [[64017, 64017], "valid"], [[64018, 64018], "mapped", [26228]], [[64019, 64020], "valid"], [[64021, 64021], "mapped", [20958]], [[64022, 64022], "mapped", [29482]], [[64023, 64023], "mapped", [30410]], [[64024, 64024], "mapped", [31036]], [[64025, 64025], "mapped", [31070]], [[64026, 64026], "mapped", [31077]], [[64027, 64027], "mapped", [31119]], [[64028, 64028], "mapped", [38742]], [[64029, 64029], "mapped", [31934]], [[64030, 64030], "mapped", [32701]], [[64031, 64031], "valid"], [[64032, 64032], "mapped", [34322]], [[64033, 64033], "valid"], [[64034, 64034], "mapped", [35576]], [[64035, 64036], "valid"], [[64037, 64037], "mapped", [36920]], [[64038, 64038], "mapped", [37117]], [[64039, 64041], "valid"], [[64042, 64042], "mapped", [39151]], [[64043, 64043], "mapped", [39164]], [[64044, 64044], "mapped", [39208]], [[64045, 64045], "mapped", [40372]], [[64046, 64046], "mapped", [37086]], [[64047, 64047], "mapped", [38583]], [[64048, 64048], "mapped", [20398]], [[64049, 64049], "mapped", [20711]], [[64050, 64050], "mapped", [20813]], [[64051, 64051], "mapped", [21193]], [[64052, 64052], "mapped", [21220]], [[64053, 64053], "mapped", [21329]], [[64054, 64054], "mapped", [21917]], [[64055, 64055], "mapped", [22022]], [[64056, 64056], "mapped", [22120]], [[64057, 64057], "mapped", [22592]], [[64058, 64058], "mapped", [22696]], [[64059, 64059], "mapped", [23652]], [[64060, 64060], "mapped", [23662]], [[64061, 64061], "mapped", [24724]], [[64062, 64062], "mapped", [24936]], [[64063, 64063], "mapped", [24974]], [[64064, 64064], "mapped", [25074]], [[64065, 64065], "mapped", [25935]], [[64066, 64066], "mapped", [26082]], [[64067, 64067], "mapped", [26257]], [[64068, 64068], "mapped", [26757]], [[64069, 64069], "mapped", [28023]], [[64070, 64070], "mapped", [28186]], [[64071, 64071], "mapped", [28450]], [[64072, 64072], "mapped", [29038]], [[64073, 64073], "mapped", [29227]], [[64074, 64074], "mapped", [29730]], [[64075, 64075], "mapped", [30865]], [[64076, 64076], "mapped", [31038]], [[64077, 64077], "mapped", [31049]], [[64078, 64078], "mapped", [31048]], [[64079, 64079], "mapped", [31056]], [[64080, 64080], "mapped", [31062]], [[64081, 64081], "mapped", [31069]], [[64082, 64082], "mapped", [31117]], [[64083, 64083], "mapped", [31118]], [[64084, 64084], "mapped", [31296]], [[64085, 64085], "mapped", [31361]], [[64086, 64086], "mapped", [31680]], [[64087, 64087], "mapped", [32244]], [[64088, 64088], "mapped", [32265]], [[64089, 64089], "mapped", [32321]], [[64090, 64090], "mapped", [32626]], [[64091, 64091], "mapped", [32773]], [[64092, 64092], "mapped", [33261]], [[64093, 64094], "mapped", [33401]], [[64095, 64095], "mapped", [33879]], [[64096, 64096], "mapped", [35088]], [[64097, 64097], "mapped", [35222]], [[64098, 64098], "mapped", [35585]], [[64099, 64099], "mapped", [35641]], [[64100, 64100], "mapped", [36051]], [[64101, 64101], "mapped", [36104]], [[64102, 64102], "mapped", [36790]], [[64103, 64103], "mapped", [36920]], [[64104, 64104], "mapped", [38627]], [[64105, 64105], "mapped", [38911]], [[64106, 64106], "mapped", [38971]], [[64107, 64107], "mapped", [24693]], [[64108, 64108], "mapped", [148206]], [[64109, 64109], "mapped", [33304]], [[64110, 64111], "disallowed"], [[64112, 64112], "mapped", [20006]], [[64113, 64113], "mapped", [20917]], [[64114, 64114], "mapped", [20840]], [[64115, 64115], "mapped", [20352]], [[64116, 64116], "mapped", [20805]], [[64117, 64117], "mapped", [20864]], [[64118, 64118], "mapped", [21191]], [[64119, 64119], "mapped", [21242]], [[64120, 64120], "mapped", [21917]], [[64121, 64121], "mapped", [21845]], [[64122, 64122], "mapped", [21913]], [[64123, 64123], "mapped", [21986]], [[64124, 64124], "mapped", [22618]], [[64125, 64125], "mapped", [22707]], [[64126, 64126], "mapped", [22852]], [[64127, 64127], "mapped", [22868]], [[64128, 64128], "mapped", [23138]], [[64129, 64129], "mapped", [23336]], [[64130, 64130], "mapped", [24274]], [[64131, 64131], "mapped", [24281]], [[64132, 64132], "mapped", [24425]], [[64133, 64133], "mapped", [24493]], [[64134, 64134], "mapped", [24792]], [[64135, 64135], "mapped", [24910]], [[64136, 64136], "mapped", [24840]], [[64137, 64137], "mapped", [24974]], [[64138, 64138], "mapped", [24928]], [[64139, 64139], "mapped", [25074]], [[64140, 64140], "mapped", [25140]], [[64141, 64141], "mapped", [25540]], [[64142, 64142], "mapped", [25628]], [[64143, 64143], "mapped", [25682]], [[64144, 64144], "mapped", [25942]], [[64145, 64145], "mapped", [26228]], [[64146, 64146], "mapped", [26391]], [[64147, 64147], "mapped", [26395]], [[64148, 64148], "mapped", [26454]], [[64149, 64149], "mapped", [27513]], [[64150, 64150], "mapped", [27578]], [[64151, 64151], "mapped", [27969]], [[64152, 64152], "mapped", [28379]], [[64153, 64153], "mapped", [28363]], [[64154, 64154], "mapped", [28450]], [[64155, 64155], "mapped", [28702]], [[64156, 64156], "mapped", [29038]], [[64157, 64157], "mapped", [30631]], [[64158, 64158], "mapped", [29237]], [[64159, 64159], "mapped", [29359]], [[64160, 64160], "mapped", [29482]], [[64161, 64161], "mapped", [29809]], [[64162, 64162], "mapped", [29958]], [[64163, 64163], "mapped", [30011]], [[64164, 64164], "mapped", [30237]], [[64165, 64165], "mapped", [30239]], [[64166, 64166], "mapped", [30410]], [[64167, 64167], "mapped", [30427]], [[64168, 64168], "mapped", [30452]], [[64169, 64169], "mapped", [30538]], [[64170, 64170], "mapped", [30528]], [[64171, 64171], "mapped", [30924]], [[64172, 64172], "mapped", [31409]], [[64173, 64173], "mapped", [31680]], [[64174, 64174], "mapped", [31867]], [[64175, 64175], "mapped", [32091]], [[64176, 64176], "mapped", [32244]], [[64177, 64177], "mapped", [32574]], [[64178, 64178], "mapped", [32773]], [[64179, 64179], "mapped", [33618]], [[64180, 64180], "mapped", [33775]], [[64181, 64181], "mapped", [34681]], [[64182, 64182], "mapped", [35137]], [[64183, 64183], "mapped", [35206]], [[64184, 64184], "mapped", [35222]], [[64185, 64185], "mapped", [35519]], [[64186, 64186], "mapped", [35576]], [[64187, 64187], "mapped", [35531]], [[64188, 64188], "mapped", [35585]], [[64189, 64189], "mapped", [35582]], [[64190, 64190], "mapped", [35565]], [[64191, 64191], "mapped", [35641]], [[64192, 64192], "mapped", [35722]], [[64193, 64193], "mapped", [36104]], [[64194, 64194], "mapped", [36664]], [[64195, 64195], "mapped", [36978]], [[64196, 64196], "mapped", [37273]], [[64197, 64197], "mapped", [37494]], [[64198, 64198], "mapped", [38524]], [[64199, 64199], "mapped", [38627]], [[64200, 64200], "mapped", [38742]], [[64201, 64201], "mapped", [38875]], [[64202, 64202], "mapped", [38911]], [[64203, 64203], "mapped", [38923]], [[64204, 64204], "mapped", [38971]], [[64205, 64205], "mapped", [39698]], [[64206, 64206], "mapped", [40860]], [[64207, 64207], "mapped", [141386]], [[64208, 64208], "mapped", [141380]], [[64209, 64209], "mapped", [144341]], [[64210, 64210], "mapped", [15261]], [[64211, 64211], "mapped", [16408]], [[64212, 64212], "mapped", [16441]], [[64213, 64213], "mapped", [152137]], [[64214, 64214], "mapped", [154832]], [[64215, 64215], "mapped", [163539]], [[64216, 64216], "mapped", [40771]], [[64217, 64217], "mapped", [40846]], [[64218, 64255], "disallowed"], [[64256, 64256], "mapped", [102, 102]], [[64257, 64257], "mapped", [102, 105]], [[64258, 64258], "mapped", [102, 108]], [[64259, 64259], "mapped", [102, 102, 105]], [[64260, 64260], "mapped", [102, 102, 108]], [[64261, 64262], "mapped", [115, 116]], [[64263, 64274], "disallowed"], [[64275, 64275], "mapped", [1396, 1398]], [[64276, 64276], "mapped", [1396, 1381]], [[64277, 64277], "mapped", [1396, 1387]], [[64278, 64278], "mapped", [1406, 1398]], [[64279, 64279], "mapped", [1396, 1389]], [[64280, 64284], "disallowed"], [[64285, 64285], "mapped", [1497, 1460]], [[64286, 64286], "valid"], [[64287, 64287], "mapped", [1522, 1463]], [[64288, 64288], "mapped", [1506]], [[64289, 64289], "mapped", [1488]], [[64290, 64290], "mapped", [1491]], [[64291, 64291], "mapped", [1492]], [[64292, 64292], "mapped", [1499]], [[64293, 64293], "mapped", [1500]], [[64294, 64294], "mapped", [1501]], [[64295, 64295], "mapped", [1512]], [[64296, 64296], "mapped", [1514]], [[64297, 64297], "disallowed_STD3_mapped", [43]], [[64298, 64298], "mapped", [1513, 1473]], [[64299, 64299], "mapped", [1513, 1474]], [[64300, 64300], "mapped", [1513, 1468, 1473]], [[64301, 64301], "mapped", [1513, 1468, 1474]], [[64302, 64302], "mapped", [1488, 1463]], [[64303, 64303], "mapped", [1488, 1464]], [[64304, 64304], "mapped", [1488, 1468]], [[64305, 64305], "mapped", [1489, 1468]], [[64306, 64306], "mapped", [1490, 1468]], [[64307, 64307], "mapped", [1491, 1468]], [[64308, 64308], "mapped", [1492, 1468]], [[64309, 64309], "mapped", [1493, 1468]], [[64310, 64310], "mapped", [1494, 1468]], [[64311, 64311], "disallowed"], [[64312, 64312], "mapped", [1496, 1468]], [[64313, 64313], "mapped", [1497, 1468]], [[64314, 64314], "mapped", [1498, 1468]], [[64315, 64315], "mapped", [1499, 1468]], [[64316, 64316], "mapped", [1500, 1468]], [[64317, 64317], "disallowed"], [[64318, 64318], "mapped", [1502, 1468]], [[64319, 64319], "disallowed"], [[64320, 64320], "mapped", [1504, 1468]], [[64321, 64321], "mapped", [1505, 1468]], [[64322, 64322], "disallowed"], [[64323, 64323], "mapped", [1507, 1468]], [[64324, 64324], "mapped", [1508, 1468]], [[64325, 64325], "disallowed"], [[64326, 64326], "mapped", [1510, 1468]], [[64327, 64327], "mapped", [1511, 1468]], [[64328, 64328], "mapped", [1512, 1468]], [[64329, 64329], "mapped", [1513, 1468]], [[64330, 64330], "mapped", [1514, 1468]], [[64331, 64331], "mapped", [1493, 1465]], [[64332, 64332], "mapped", [1489, 1471]], [[64333, 64333], "mapped", [1499, 1471]], [[64334, 64334], "mapped", [1508, 1471]], [[64335, 64335], "mapped", [1488, 1500]], [[64336, 64337], "mapped", [1649]], [[64338, 64341], "mapped", [1659]], [[64342, 64345], "mapped", [1662]], [[64346, 64349], "mapped", [1664]], [[64350, 64353], "mapped", [1658]], [[64354, 64357], "mapped", [1663]], [[64358, 64361], "mapped", [1657]], [[64362, 64365], "mapped", [1700]], [[64366, 64369], "mapped", [1702]], [[64370, 64373], "mapped", [1668]], [[64374, 64377], "mapped", [1667]], [[64378, 64381], "mapped", [1670]], [[64382, 64385], "mapped", [1671]], [[64386, 64387], "mapped", [1677]], [[64388, 64389], "mapped", [1676]], [[64390, 64391], "mapped", [1678]], [[64392, 64393], "mapped", [1672]], [[64394, 64395], "mapped", [1688]], [[64396, 64397], "mapped", [1681]], [[64398, 64401], "mapped", [1705]], [[64402, 64405], "mapped", [1711]], [[64406, 64409], "mapped", [1715]], [[64410, 64413], "mapped", [1713]], [[64414, 64415], "mapped", [1722]], [[64416, 64419], "mapped", [1723]], [[64420, 64421], "mapped", [1728]], [[64422, 64425], "mapped", [1729]], [[64426, 64429], "mapped", [1726]], [[64430, 64431], "mapped", [1746]], [[64432, 64433], "mapped", [1747]], [[64434, 64449], "valid", [], "NV8"], [[64450, 64466], "disallowed"], [[64467, 64470], "mapped", [1709]], [[64471, 64472], "mapped", [1735]], [[64473, 64474], "mapped", [1734]], [[64475, 64476], "mapped", [1736]], [[64477, 64477], "mapped", [1735, 1652]], [[64478, 64479], "mapped", [1739]], [[64480, 64481], "mapped", [1733]], [[64482, 64483], "mapped", [1737]], [[64484, 64487], "mapped", [1744]], [[64488, 64489], "mapped", [1609]], [[64490, 64491], "mapped", [1574, 1575]], [[64492, 64493], "mapped", [1574, 1749]], [[64494, 64495], "mapped", [1574, 1608]], [[64496, 64497], "mapped", [1574, 1735]], [[64498, 64499], "mapped", [1574, 1734]], [[64500, 64501], "mapped", [1574, 1736]], [[64502, 64504], "mapped", [1574, 1744]], [[64505, 64507], "mapped", [1574, 1609]], [[64508, 64511], "mapped", [1740]], [[64512, 64512], "mapped", [1574, 1580]], [[64513, 64513], "mapped", [1574, 1581]], [[64514, 64514], "mapped", [1574, 1605]], [[64515, 64515], "mapped", [1574, 1609]], [[64516, 64516], "mapped", [1574, 1610]], [[64517, 64517], "mapped", [1576, 1580]], [[64518, 64518], "mapped", [1576, 1581]], [[64519, 64519], "mapped", [1576, 1582]], [[64520, 64520], "mapped", [1576, 1605]], [[64521, 64521], "mapped", [1576, 1609]], [[64522, 64522], "mapped", [1576, 1610]], [[64523, 64523], "mapped", [1578, 1580]], [[64524, 64524], "mapped", [1578, 1581]], [[64525, 64525], "mapped", [1578, 1582]], [[64526, 64526], "mapped", [1578, 1605]], [[64527, 64527], "mapped", [1578, 1609]], [[64528, 64528], "mapped", [1578, 1610]], [[64529, 64529], "mapped", [1579, 1580]], [[64530, 64530], "mapped", [1579, 1605]], [[64531, 64531], "mapped", [1579, 1609]], [[64532, 64532], "mapped", [1579, 1610]], [[64533, 64533], "mapped", [1580, 1581]], [[64534, 64534], "mapped", [1580, 1605]], [[64535, 64535], "mapped", [1581, 1580]], [[64536, 64536], "mapped", [1581, 1605]], [[64537, 64537], "mapped", [1582, 1580]], [[64538, 64538], "mapped", [1582, 1581]], [[64539, 64539], "mapped", [1582, 1605]], [[64540, 64540], "mapped", [1587, 1580]], [[64541, 64541], "mapped", [1587, 1581]], [[64542, 64542], "mapped", [1587, 1582]], [[64543, 64543], "mapped", [1587, 1605]], [[64544, 64544], "mapped", [1589, 1581]], [[64545, 64545], "mapped", [1589, 1605]], [[64546, 64546], "mapped", [1590, 1580]], [[64547, 64547], "mapped", [1590, 1581]], [[64548, 64548], "mapped", [1590, 1582]], [[64549, 64549], "mapped", [1590, 1605]], [[64550, 64550], "mapped", [1591, 1581]], [[64551, 64551], "mapped", [1591, 1605]], [[64552, 64552], "mapped", [1592, 1605]], [[64553, 64553], "mapped", [1593, 1580]], [[64554, 64554], "mapped", [1593, 1605]], [[64555, 64555], "mapped", [1594, 1580]], [[64556, 64556], "mapped", [1594, 1605]], [[64557, 64557], "mapped", [1601, 1580]], [[64558, 64558], "mapped", [1601, 1581]], [[64559, 64559], "mapped", [1601, 1582]], [[64560, 64560], "mapped", [1601, 1605]], [[64561, 64561], "mapped", [1601, 1609]], [[64562, 64562], "mapped", [1601, 1610]], [[64563, 64563], "mapped", [1602, 1581]], [[64564, 64564], "mapped", [1602, 1605]], [[64565, 64565], "mapped", [1602, 1609]], [[64566, 64566], "mapped", [1602, 1610]], [[64567, 64567], "mapped", [1603, 1575]], [[64568, 64568], "mapped", [1603, 1580]], [[64569, 64569], "mapped", [1603, 1581]], [[64570, 64570], "mapped", [1603, 1582]], [[64571, 64571], "mapped", [1603, 1604]], [[64572, 64572], "mapped", [1603, 1605]], [[64573, 64573], "mapped", [1603, 1609]], [[64574, 64574], "mapped", [1603, 1610]], [[64575, 64575], "mapped", [1604, 1580]], [[64576, 64576], "mapped", [1604, 1581]], [[64577, 64577], "mapped", [1604, 1582]], [[64578, 64578], "mapped", [1604, 1605]], [[64579, 64579], "mapped", [1604, 1609]], [[64580, 64580], "mapped", [1604, 1610]], [[64581, 64581], "mapped", [1605, 1580]], [[64582, 64582], "mapped", [1605, 1581]], [[64583, 64583], "mapped", [1605, 1582]], [[64584, 64584], "mapped", [1605, 1605]], [[64585, 64585], "mapped", [1605, 1609]], [[64586, 64586], "mapped", [1605, 1610]], [[64587, 64587], "mapped", [1606, 1580]], [[64588, 64588], "mapped", [1606, 1581]], [[64589, 64589], "mapped", [1606, 1582]], [[64590, 64590], "mapped", [1606, 1605]], [[64591, 64591], "mapped", [1606, 1609]], [[64592, 64592], "mapped", [1606, 1610]], [[64593, 64593], "mapped", [1607, 1580]], [[64594, 64594], "mapped", [1607, 1605]], [[64595, 64595], "mapped", [1607, 1609]], [[64596, 64596], "mapped", [1607, 1610]], [[64597, 64597], "mapped", [1610, 1580]], [[64598, 64598], "mapped", [1610, 1581]], [[64599, 64599], "mapped", [1610, 1582]], [[64600, 64600], "mapped", [1610, 1605]], [[64601, 64601], "mapped", [1610, 1609]], [[64602, 64602], "mapped", [1610, 1610]], [[64603, 64603], "mapped", [1584, 1648]], [[64604, 64604], "mapped", [1585, 1648]], [[64605, 64605], "mapped", [1609, 1648]], [[64606, 64606], "disallowed_STD3_mapped", [32, 1612, 1617]], [[64607, 64607], "disallowed_STD3_mapped", [32, 1613, 1617]], [[64608, 64608], "disallowed_STD3_mapped", [32, 1614, 1617]], [[64609, 64609], "disallowed_STD3_mapped", [32, 1615, 1617]], [[64610, 64610], "disallowed_STD3_mapped", [32, 1616, 1617]], [[64611, 64611], "disallowed_STD3_mapped", [32, 1617, 1648]], [[64612, 64612], "mapped", [1574, 1585]], [[64613, 64613], "mapped", [1574, 1586]], [[64614, 64614], "mapped", [1574, 1605]], [[64615, 64615], "mapped", [1574, 1606]], [[64616, 64616], "mapped", [1574, 1609]], [[64617, 64617], "mapped", [1574, 1610]], [[64618, 64618], "mapped", [1576, 1585]], [[64619, 64619], "mapped", [1576, 1586]], [[64620, 64620], "mapped", [1576, 1605]], [[64621, 64621], "mapped", [1576, 1606]], [[64622, 64622], "mapped", [1576, 1609]], [[64623, 64623], "mapped", [1576, 1610]], [[64624, 64624], "mapped", [1578, 1585]], [[64625, 64625], "mapped", [1578, 1586]], [[64626, 64626], "mapped", [1578, 1605]], [[64627, 64627], "mapped", [1578, 1606]], [[64628, 64628], "mapped", [1578, 1609]], [[64629, 64629], "mapped", [1578, 1610]], [[64630, 64630], "mapped", [1579, 1585]], [[64631, 64631], "mapped", [1579, 1586]], [[64632, 64632], "mapped", [1579, 1605]], [[64633, 64633], "mapped", [1579, 1606]], [[64634, 64634], "mapped", [1579, 1609]], [[64635, 64635], "mapped", [1579, 1610]], [[64636, 64636], "mapped", [1601, 1609]], [[64637, 64637], "mapped", [1601, 1610]], [[64638, 64638], "mapped", [1602, 1609]], [[64639, 64639], "mapped", [1602, 1610]], [[64640, 64640], "mapped", [1603, 1575]], [[64641, 64641], "mapped", [1603, 1604]], [[64642, 64642], "mapped", [1603, 1605]], [[64643, 64643], "mapped", [1603, 1609]], [[64644, 64644], "mapped", [1603, 1610]], [[64645, 64645], "mapped", [1604, 1605]], [[64646, 64646], "mapped", [1604, 1609]], [[64647, 64647], "mapped", [1604, 1610]], [[64648, 64648], "mapped", [1605, 1575]], [[64649, 64649], "mapped", [1605, 1605]], [[64650, 64650], "mapped", [1606, 1585]], [[64651, 64651], "mapped", [1606, 1586]], [[64652, 64652], "mapped", [1606, 1605]], [[64653, 64653], "mapped", [1606, 1606]], [[64654, 64654], "mapped", [1606, 1609]], [[64655, 64655], "mapped", [1606, 1610]], [[64656, 64656], "mapped", [1609, 1648]], [[64657, 64657], "mapped", [1610, 1585]], [[64658, 64658], "mapped", [1610, 1586]], [[64659, 64659], "mapped", [1610, 1605]], [[64660, 64660], "mapped", [1610, 1606]], [[64661, 64661], "mapped", [1610, 1609]], [[64662, 64662], "mapped", [1610, 1610]], [[64663, 64663], "mapped", [1574, 1580]], [[64664, 64664], "mapped", [1574, 1581]], [[64665, 64665], "mapped", [1574, 1582]], [[64666, 64666], "mapped", [1574, 1605]], [[64667, 64667], "mapped", [1574, 1607]], [[64668, 64668], "mapped", [1576, 1580]], [[64669, 64669], "mapped", [1576, 1581]], [[64670, 64670], "mapped", [1576, 1582]], [[64671, 64671], "mapped", [1576, 1605]], [[64672, 64672], "mapped", [1576, 1607]], [[64673, 64673], "mapped", [1578, 1580]], [[64674, 64674], "mapped", [1578, 1581]], [[64675, 64675], "mapped", [1578, 1582]], [[64676, 64676], "mapped", [1578, 1605]], [[64677, 64677], "mapped", [1578, 1607]], [[64678, 64678], "mapped", [1579, 1605]], [[64679, 64679], "mapped", [1580, 1581]], [[64680, 64680], "mapped", [1580, 1605]], [[64681, 64681], "mapped", [1581, 1580]], [[64682, 64682], "mapped", [1581, 1605]], [[64683, 64683], "mapped", [1582, 1580]], [[64684, 64684], "mapped", [1582, 1605]], [[64685, 64685], "mapped", [1587, 1580]], [[64686, 64686], "mapped", [1587, 1581]], [[64687, 64687], "mapped", [1587, 1582]], [[64688, 64688], "mapped", [1587, 1605]], [[64689, 64689], "mapped", [1589, 1581]], [[64690, 64690], "mapped", [1589, 1582]], [[64691, 64691], "mapped", [1589, 1605]], [[64692, 64692], "mapped", [1590, 1580]], [[64693, 64693], "mapped", [1590, 1581]], [[64694, 64694], "mapped", [1590, 1582]], [[64695, 64695], "mapped", [1590, 1605]], [[64696, 64696], "mapped", [1591, 1581]], [[64697, 64697], "mapped", [1592, 1605]], [[64698, 64698], "mapped", [1593, 1580]], [[64699, 64699], "mapped", [1593, 1605]], [[64700, 64700], "mapped", [1594, 1580]], [[64701, 64701], "mapped", [1594, 1605]], [[64702, 64702], "mapped", [1601, 1580]], [[64703, 64703], "mapped", [1601, 1581]], [[64704, 64704], "mapped", [1601, 1582]], [[64705, 64705], "mapped", [1601, 1605]], [[64706, 64706], "mapped", [1602, 1581]], [[64707, 64707], "mapped", [1602, 1605]], [[64708, 64708], "mapped", [1603, 1580]], [[64709, 64709], "mapped", [1603, 1581]], [[64710, 64710], "mapped", [1603, 1582]], [[64711, 64711], "mapped", [1603, 1604]], [[64712, 64712], "mapped", [1603, 1605]], [[64713, 64713], "mapped", [1604, 1580]], [[64714, 64714], "mapped", [1604, 1581]], [[64715, 64715], "mapped", [1604, 1582]], [[64716, 64716], "mapped", [1604, 1605]], [[64717, 64717], "mapped", [1604, 1607]], [[64718, 64718], "mapped", [1605, 1580]], [[64719, 64719], "mapped", [1605, 1581]], [[64720, 64720], "mapped", [1605, 1582]], [[64721, 64721], "mapped", [1605, 1605]], [[64722, 64722], "mapped", [1606, 1580]], [[64723, 64723], "mapped", [1606, 1581]], [[64724, 64724], "mapped", [1606, 1582]], [[64725, 64725], "mapped", [1606, 1605]], [[64726, 64726], "mapped", [1606, 1607]], [[64727, 64727], "mapped", [1607, 1580]], [[64728, 64728], "mapped", [1607, 1605]], [[64729, 64729], "mapped", [1607, 1648]], [[64730, 64730], "mapped", [1610, 1580]], [[64731, 64731], "mapped", [1610, 1581]], [[64732, 64732], "mapped", [1610, 1582]], [[64733, 64733], "mapped", [1610, 1605]], [[64734, 64734], "mapped", [1610, 1607]], [[64735, 64735], "mapped", [1574, 1605]], [[64736, 64736], "mapped", [1574, 1607]], [[64737, 64737], "mapped", [1576, 1605]], [[64738, 64738], "mapped", [1576, 1607]], [[64739, 64739], "mapped", [1578, 1605]], [[64740, 64740], "mapped", [1578, 1607]], [[64741, 64741], "mapped", [1579, 1605]], [[64742, 64742], "mapped", [1579, 1607]], [[64743, 64743], "mapped", [1587, 1605]], [[64744, 64744], "mapped", [1587, 1607]], [[64745, 64745], "mapped", [1588, 1605]], [[64746, 64746], "mapped", [1588, 1607]], [[64747, 64747], "mapped", [1603, 1604]], [[64748, 64748], "mapped", [1603, 1605]], [[64749, 64749], "mapped", [1604, 1605]], [[64750, 64750], "mapped", [1606, 1605]], [[64751, 64751], "mapped", [1606, 1607]], [[64752, 64752], "mapped", [1610, 1605]], [[64753, 64753], "mapped", [1610, 1607]], [[64754, 64754], "mapped", [1600, 1614, 1617]], [[64755, 64755], "mapped", [1600, 1615, 1617]], [[64756, 64756], "mapped", [1600, 1616, 1617]], [[64757, 64757], "mapped", [1591, 1609]], [[64758, 64758], "mapped", [1591, 1610]], [[64759, 64759], "mapped", [1593, 1609]], [[64760, 64760], "mapped", [1593, 1610]], [[64761, 64761], "mapped", [1594, 1609]], [[64762, 64762], "mapped", [1594, 1610]], [[64763, 64763], "mapped", [1587, 1609]], [[64764, 64764], "mapped", [1587, 1610]], [[64765, 64765], "mapped", [1588, 1609]], [[64766, 64766], "mapped", [1588, 1610]], [[64767, 64767], "mapped", [1581, 1609]], [[64768, 64768], "mapped", [1581, 1610]], [[64769, 64769], "mapped", [1580, 1609]], [[64770, 64770], "mapped", [1580, 1610]], [[64771, 64771], "mapped", [1582, 1609]], [[64772, 64772], "mapped", [1582, 1610]], [[64773, 64773], "mapped", [1589, 1609]], [[64774, 64774], "mapped", [1589, 1610]], [[64775, 64775], "mapped", [1590, 1609]], [[64776, 64776], "mapped", [1590, 1610]], [[64777, 64777], "mapped", [1588, 1580]], [[64778, 64778], "mapped", [1588, 1581]], [[64779, 64779], "mapped", [1588, 1582]], [[64780, 64780], "mapped", [1588, 1605]], [[64781, 64781], "mapped", [1588, 1585]], [[64782, 64782], "mapped", [1587, 1585]], [[64783, 64783], "mapped", [1589, 1585]], [[64784, 64784], "mapped", [1590, 1585]], [[64785, 64785], "mapped", [1591, 1609]], [[64786, 64786], "mapped", [1591, 1610]], [[64787, 64787], "mapped", [1593, 1609]], [[64788, 64788], "mapped", [1593, 1610]], [[64789, 64789], "mapped", [1594, 1609]], [[64790, 64790], "mapped", [1594, 1610]], [[64791, 64791], "mapped", [1587, 1609]], [[64792, 64792], "mapped", [1587, 1610]], [[64793, 64793], "mapped", [1588, 1609]], [[64794, 64794], "mapped", [1588, 1610]], [[64795, 64795], "mapped", [1581, 1609]], [[64796, 64796], "mapped", [1581, 1610]], [[64797, 64797], "mapped", [1580, 1609]], [[64798, 64798], "mapped", [1580, 1610]], [[64799, 64799], "mapped", [1582, 1609]], [[64800, 64800], "mapped", [1582, 1610]], [[64801, 64801], "mapped", [1589, 1609]], [[64802, 64802], "mapped", [1589, 1610]], [[64803, 64803], "mapped", [1590, 1609]], [[64804, 64804], "mapped", [1590, 1610]], [[64805, 64805], "mapped", [1588, 1580]], [[64806, 64806], "mapped", [1588, 1581]], [[64807, 64807], "mapped", [1588, 1582]], [[64808, 64808], "mapped", [1588, 1605]], [[64809, 64809], "mapped", [1588, 1585]], [[64810, 64810], "mapped", [1587, 1585]], [[64811, 64811], "mapped", [1589, 1585]], [[64812, 64812], "mapped", [1590, 1585]], [[64813, 64813], "mapped", [1588, 1580]], [[64814, 64814], "mapped", [1588, 1581]], [[64815, 64815], "mapped", [1588, 1582]], [[64816, 64816], "mapped", [1588, 1605]], [[64817, 64817], "mapped", [1587, 1607]], [[64818, 64818], "mapped", [1588, 1607]], [[64819, 64819], "mapped", [1591, 1605]], [[64820, 64820], "mapped", [1587, 1580]], [[64821, 64821], "mapped", [1587, 1581]], [[64822, 64822], "mapped", [1587, 1582]], [[64823, 64823], "mapped", [1588, 1580]], [[64824, 64824], "mapped", [1588, 1581]], [[64825, 64825], "mapped", [1588, 1582]], [[64826, 64826], "mapped", [1591, 1605]], [[64827, 64827], "mapped", [1592, 1605]], [[64828, 64829], "mapped", [1575, 1611]], [[64830, 64831], "valid", [], "NV8"], [[64832, 64847], "disallowed"], [[64848, 64848], "mapped", [1578, 1580, 1605]], [[64849, 64850], "mapped", [1578, 1581, 1580]], [[64851, 64851], "mapped", [1578, 1581, 1605]], [[64852, 64852], "mapped", [1578, 1582, 1605]], [[64853, 64853], "mapped", [1578, 1605, 1580]], [[64854, 64854], "mapped", [1578, 1605, 1581]], [[64855, 64855], "mapped", [1578, 1605, 1582]], [[64856, 64857], "mapped", [1580, 1605, 1581]], [[64858, 64858], "mapped", [1581, 1605, 1610]], [[64859, 64859], "mapped", [1581, 1605, 1609]], [[64860, 64860], "mapped", [1587, 1581, 1580]], [[64861, 64861], "mapped", [1587, 1580, 1581]], [[64862, 64862], "mapped", [1587, 1580, 1609]], [[64863, 64864], "mapped", [1587, 1605, 1581]], [[64865, 64865], "mapped", [1587, 1605, 1580]], [[64866, 64867], "mapped", [1587, 1605, 1605]], [[64868, 64869], "mapped", [1589, 1581, 1581]], [[64870, 64870], "mapped", [1589, 1605, 1605]], [[64871, 64872], "mapped", [1588, 1581, 1605]], [[64873, 64873], "mapped", [1588, 1580, 1610]], [[64874, 64875], "mapped", [1588, 1605, 1582]], [[64876, 64877], "mapped", [1588, 1605, 1605]], [[64878, 64878], "mapped", [1590, 1581, 1609]], [[64879, 64880], "mapped", [1590, 1582, 1605]], [[64881, 64882], "mapped", [1591, 1605, 1581]], [[64883, 64883], "mapped", [1591, 1605, 1605]], [[64884, 64884], "mapped", [1591, 1605, 1610]], [[64885, 64885], "mapped", [1593, 1580, 1605]], [[64886, 64887], "mapped", [1593, 1605, 1605]], [[64888, 64888], "mapped", [1593, 1605, 1609]], [[64889, 64889], "mapped", [1594, 1605, 1605]], [[64890, 64890], "mapped", [1594, 1605, 1610]], [[64891, 64891], "mapped", [1594, 1605, 1609]], [[64892, 64893], "mapped", [1601, 1582, 1605]], [[64894, 64894], "mapped", [1602, 1605, 1581]], [[64895, 64895], "mapped", [1602, 1605, 1605]], [[64896, 64896], "mapped", [1604, 1581, 1605]], [[64897, 64897], "mapped", [1604, 1581, 1610]], [[64898, 64898], "mapped", [1604, 1581, 1609]], [[64899, 64900], "mapped", [1604, 1580, 1580]], [[64901, 64902], "mapped", [1604, 1582, 1605]], [[64903, 64904], "mapped", [1604, 1605, 1581]], [[64905, 64905], "mapped", [1605, 1581, 1580]], [[64906, 64906], "mapped", [1605, 1581, 1605]], [[64907, 64907], "mapped", [1605, 1581, 1610]], [[64908, 64908], "mapped", [1605, 1580, 1581]], [[64909, 64909], "mapped", [1605, 1580, 1605]], [[64910, 64910], "mapped", [1605, 1582, 1580]], [[64911, 64911], "mapped", [1605, 1582, 1605]], [[64912, 64913], "disallowed"], [[64914, 64914], "mapped", [1605, 1580, 1582]], [[64915, 64915], "mapped", [1607, 1605, 1580]], [[64916, 64916], "mapped", [1607, 1605, 1605]], [[64917, 64917], "mapped", [1606, 1581, 1605]], [[64918, 64918], "mapped", [1606, 1581, 1609]], [[64919, 64920], "mapped", [1606, 1580, 1605]], [[64921, 64921], "mapped", [1606, 1580, 1609]], [[64922, 64922], "mapped", [1606, 1605, 1610]], [[64923, 64923], "mapped", [1606, 1605, 1609]], [[64924, 64925], "mapped", [1610, 1605, 1605]], [[64926, 64926], "mapped", [1576, 1582, 1610]], [[64927, 64927], "mapped", [1578, 1580, 1610]], [[64928, 64928], "mapped", [1578, 1580, 1609]], [[64929, 64929], "mapped", [1578, 1582, 1610]], [[64930, 64930], "mapped", [1578, 1582, 1609]], [[64931, 64931], "mapped", [1578, 1605, 1610]], [[64932, 64932], "mapped", [1578, 1605, 1609]], [[64933, 64933], "mapped", [1580, 1605, 1610]], [[64934, 64934], "mapped", [1580, 1581, 1609]], [[64935, 64935], "mapped", [1580, 1605, 1609]], [[64936, 64936], "mapped", [1587, 1582, 1609]], [[64937, 64937], "mapped", [1589, 1581, 1610]], [[64938, 64938], "mapped", [1588, 1581, 1610]], [[64939, 64939], "mapped", [1590, 1581, 1610]], [[64940, 64940], "mapped", [1604, 1580, 1610]], [[64941, 64941], "mapped", [1604, 1605, 1610]], [[64942, 64942], "mapped", [1610, 1581, 1610]], [[64943, 64943], "mapped", [1610, 1580, 1610]], [[64944, 64944], "mapped", [1610, 1605, 1610]], [[64945, 64945], "mapped", [1605, 1605, 1610]], [[64946, 64946], "mapped", [1602, 1605, 1610]], [[64947, 64947], "mapped", [1606, 1581, 1610]], [[64948, 64948], "mapped", [1602, 1605, 1581]], [[64949, 64949], "mapped", [1604, 1581, 1605]], [[64950, 64950], "mapped", [1593, 1605, 1610]], [[64951, 64951], "mapped", [1603, 1605, 1610]], [[64952, 64952], "mapped", [1606, 1580, 1581]], [[64953, 64953], "mapped", [1605, 1582, 1610]], [[64954, 64954], "mapped", [1604, 1580, 1605]], [[64955, 64955], "mapped", [1603, 1605, 1605]], [[64956, 64956], "mapped", [1604, 1580, 1605]], [[64957, 64957], "mapped", [1606, 1580, 1581]], [[64958, 64958], "mapped", [1580, 1581, 1610]], [[64959, 64959], "mapped", [1581, 1580, 1610]], [[64960, 64960], "mapped", [1605, 1580, 1610]], [[64961, 64961], "mapped", [1601, 1605, 1610]], [[64962, 64962], "mapped", [1576, 1581, 1610]], [[64963, 64963], "mapped", [1603, 1605, 1605]], [[64964, 64964], "mapped", [1593, 1580, 1605]], [[64965, 64965], "mapped", [1589, 1605, 1605]], [[64966, 64966], "mapped", [1587, 1582, 1610]], [[64967, 64967], "mapped", [1606, 1580, 1610]], [[64968, 64975], "disallowed"], [[64976, 65007], "disallowed"], [[65008, 65008], "mapped", [1589, 1604, 1746]], [[65009, 65009], "mapped", [1602, 1604, 1746]], [[65010, 65010], "mapped", [1575, 1604, 1604, 1607]], [[65011, 65011], "mapped", [1575, 1603, 1576, 1585]], [[65012, 65012], "mapped", [1605, 1581, 1605, 1583]], [[65013, 65013], "mapped", [1589, 1604, 1593, 1605]], [[65014, 65014], "mapped", [1585, 1587, 1608, 1604]], [[65015, 65015], "mapped", [1593, 1604, 1610, 1607]], [[65016, 65016], "mapped", [1608, 1587, 1604, 1605]], [[65017, 65017], "mapped", [1589, 1604, 1609]], [[65018, 65018], "disallowed_STD3_mapped", [1589, 1604, 1609, 32, 1575, 1604, 1604, 1607, 32, 1593, 1604, 1610, 1607, 32, 1608, 1587, 1604, 1605]], [[65019, 65019], "disallowed_STD3_mapped", [1580, 1604, 32, 1580, 1604, 1575, 1604, 1607]], [[65020, 65020], "mapped", [1585, 1740, 1575, 1604]], [[65021, 65021], "valid", [], "NV8"], [[65022, 65023], "disallowed"], [[65024, 65039], "ignored"], [[65040, 65040], "disallowed_STD3_mapped", [44]], [[65041, 65041], "mapped", [12289]], [[65042, 65042], "disallowed"], [[65043, 65043], "disallowed_STD3_mapped", [58]], [[65044, 65044], "disallowed_STD3_mapped", [59]], [[65045, 65045], "disallowed_STD3_mapped", [33]], [[65046, 65046], "disallowed_STD3_mapped", [63]], [[65047, 65047], "mapped", [12310]], [[65048, 65048], "mapped", [12311]], [[65049, 65049], "disallowed"], [[65050, 65055], "disallowed"], [[65056, 65059], "valid"], [[65060, 65062], "valid"], [[65063, 65069], "valid"], [[65070, 65071], "valid"], [[65072, 65072], "disallowed"], [[65073, 65073], "mapped", [8212]], [[65074, 65074], "mapped", [8211]], [[65075, 65076], "disallowed_STD3_mapped", [95]], [[65077, 65077], "disallowed_STD3_mapped", [40]], [[65078, 65078], "disallowed_STD3_mapped", [41]], [[65079, 65079], "disallowed_STD3_mapped", [123]], [[65080, 65080], "disallowed_STD3_mapped", [125]], [[65081, 65081], "mapped", [12308]], [[65082, 65082], "mapped", [12309]], [[65083, 65083], "mapped", [12304]], [[65084, 65084], "mapped", [12305]], [[65085, 65085], "mapped", [12298]], [[65086, 65086], "mapped", [12299]], [[65087, 65087], "mapped", [12296]], [[65088, 65088], "mapped", [12297]], [[65089, 65089], "mapped", [12300]], [[65090, 65090], "mapped", [12301]], [[65091, 65091], "mapped", [12302]], [[65092, 65092], "mapped", [12303]], [[65093, 65094], "valid", [], "NV8"], [[65095, 65095], "disallowed_STD3_mapped", [91]], [[65096, 65096], "disallowed_STD3_mapped", [93]], [[65097, 65100], "disallowed_STD3_mapped", [32, 773]], [[65101, 65103], "disallowed_STD3_mapped", [95]], [[65104, 65104], "disallowed_STD3_mapped", [44]], [[65105, 65105], "mapped", [12289]], [[65106, 65106], "disallowed"], [[65107, 65107], "disallowed"], [[65108, 65108], "disallowed_STD3_mapped", [59]], [[65109, 65109], "disallowed_STD3_mapped", [58]], [[65110, 65110], "disallowed_STD3_mapped", [63]], [[65111, 65111], "disallowed_STD3_mapped", [33]], [[65112, 65112], "mapped", [8212]], [[65113, 65113], "disallowed_STD3_mapped", [40]], [[65114, 65114], "disallowed_STD3_mapped", [41]], [[65115, 65115], "disallowed_STD3_mapped", [123]], [[65116, 65116], "disallowed_STD3_mapped", [125]], [[65117, 65117], "mapped", [12308]], [[65118, 65118], "mapped", [12309]], [[65119, 65119], "disallowed_STD3_mapped", [35]], [[65120, 65120], "disallowed_STD3_mapped", [38]], [[65121, 65121], "disallowed_STD3_mapped", [42]], [[65122, 65122], "disallowed_STD3_mapped", [43]], [[65123, 65123], "mapped", [45]], [[65124, 65124], "disallowed_STD3_mapped", [60]], [[65125, 65125], "disallowed_STD3_mapped", [62]], [[65126, 65126], "disallowed_STD3_mapped", [61]], [[65127, 65127], "disallowed"], [[65128, 65128], "disallowed_STD3_mapped", [92]], [[65129, 65129], "disallowed_STD3_mapped", [36]], [[65130, 65130], "disallowed_STD3_mapped", [37]], [[65131, 65131], "disallowed_STD3_mapped", [64]], [[65132, 65135], "disallowed"], [[65136, 65136], "disallowed_STD3_mapped", [32, 1611]], [[65137, 65137], "mapped", [1600, 1611]], [[65138, 65138], "disallowed_STD3_mapped", [32, 1612]], [[65139, 65139], "valid"], [[65140, 65140], "disallowed_STD3_mapped", [32, 1613]], [[65141, 65141], "disallowed"], [[65142, 65142], "disallowed_STD3_mapped", [32, 1614]], [[65143, 65143], "mapped", [1600, 1614]], [[65144, 65144], "disallowed_STD3_mapped", [32, 1615]], [[65145, 65145], "mapped", [1600, 1615]], [[65146, 65146], "disallowed_STD3_mapped", [32, 1616]], [[65147, 65147], "mapped", [1600, 1616]], [[65148, 65148], "disallowed_STD3_mapped", [32, 1617]], [[65149, 65149], "mapped", [1600, 1617]], [[65150, 65150], "disallowed_STD3_mapped", [32, 1618]], [[65151, 65151], "mapped", [1600, 1618]], [[65152, 65152], "mapped", [1569]], [[65153, 65154], "mapped", [1570]], [[65155, 65156], "mapped", [1571]], [[65157, 65158], "mapped", [1572]], [[65159, 65160], "mapped", [1573]], [[65161, 65164], "mapped", [1574]], [[65165, 65166], "mapped", [1575]], [[65167, 65170], "mapped", [1576]], [[65171, 65172], "mapped", [1577]], [[65173, 65176], "mapped", [1578]], [[65177, 65180], "mapped", [1579]], [[65181, 65184], "mapped", [1580]], [[65185, 65188], "mapped", [1581]], [[65189, 65192], "mapped", [1582]], [[65193, 65194], "mapped", [1583]], [[65195, 65196], "mapped", [1584]], [[65197, 65198], "mapped", [1585]], [[65199, 65200], "mapped", [1586]], [[65201, 65204], "mapped", [1587]], [[65205, 65208], "mapped", [1588]], [[65209, 65212], "mapped", [1589]], [[65213, 65216], "mapped", [1590]], [[65217, 65220], "mapped", [1591]], [[65221, 65224], "mapped", [1592]], [[65225, 65228], "mapped", [1593]], [[65229, 65232], "mapped", [1594]], [[65233, 65236], "mapped", [1601]], [[65237, 65240], "mapped", [1602]], [[65241, 65244], "mapped", [1603]], [[65245, 65248], "mapped", [1604]], [[65249, 65252], "mapped", [1605]], [[65253, 65256], "mapped", [1606]], [[65257, 65260], "mapped", [1607]], [[65261, 65262], "mapped", [1608]], [[65263, 65264], "mapped", [1609]], [[65265, 65268], "mapped", [1610]], [[65269, 65270], "mapped", [1604, 1570]], [[65271, 65272], "mapped", [1604, 1571]], [[65273, 65274], "mapped", [1604, 1573]], [[65275, 65276], "mapped", [1604, 1575]], [[65277, 65278], "disallowed"], [[65279, 65279], "ignored"], [[65280, 65280], "disallowed"], [[65281, 65281], "disallowed_STD3_mapped", [33]], [[65282, 65282], "disallowed_STD3_mapped", [34]], [[65283, 65283], "disallowed_STD3_mapped", [35]], [[65284, 65284], "disallowed_STD3_mapped", [36]], [[65285, 65285], "disallowed_STD3_mapped", [37]], [[65286, 65286], "disallowed_STD3_mapped", [38]], [[65287, 65287], "disallowed_STD3_mapped", [39]], [[65288, 65288], "disallowed_STD3_mapped", [40]], [[65289, 65289], "disallowed_STD3_mapped", [41]], [[65290, 65290], "disallowed_STD3_mapped", [42]], [[65291, 65291], "disallowed_STD3_mapped", [43]], [[65292, 65292], "disallowed_STD3_mapped", [44]], [[65293, 65293], "mapped", [45]], [[65294, 65294], "mapped", [46]], [[65295, 65295], "disallowed_STD3_mapped", [47]], [[65296, 65296], "mapped", [48]], [[65297, 65297], "mapped", [49]], [[65298, 65298], "mapped", [50]], [[65299, 65299], "mapped", [51]], [[65300, 65300], "mapped", [52]], [[65301, 65301], "mapped", [53]], [[65302, 65302], "mapped", [54]], [[65303, 65303], "mapped", [55]], [[65304, 65304], "mapped", [56]], [[65305, 65305], "mapped", [57]], [[65306, 65306], "disallowed_STD3_mapped", [58]], [[65307, 65307], "disallowed_STD3_mapped", [59]], [[65308, 65308], "disallowed_STD3_mapped", [60]], [[65309, 65309], "disallowed_STD3_mapped", [61]], [[65310, 65310], "disallowed_STD3_mapped", [62]], [[65311, 65311], "disallowed_STD3_mapped", [63]], [[65312, 65312], "disallowed_STD3_mapped", [64]], [[65313, 65313], "mapped", [97]], [[65314, 65314], "mapped", [98]], [[65315, 65315], "mapped", [99]], [[65316, 65316], "mapped", [100]], [[65317, 65317], "mapped", [101]], [[65318, 65318], "mapped", [102]], [[65319, 65319], "mapped", [103]], [[65320, 65320], "mapped", [104]], [[65321, 65321], "mapped", [105]], [[65322, 65322], "mapped", [106]], [[65323, 65323], "mapped", [107]], [[65324, 65324], "mapped", [108]], [[65325, 65325], "mapped", [109]], [[65326, 65326], "mapped", [110]], [[65327, 65327], "mapped", [111]], [[65328, 65328], "mapped", [112]], [[65329, 65329], "mapped", [113]], [[65330, 65330], "mapped", [114]], [[65331, 65331], "mapped", [115]], [[65332, 65332], "mapped", [116]], [[65333, 65333], "mapped", [117]], [[65334, 65334], "mapped", [118]], [[65335, 65335], "mapped", [119]], [[65336, 65336], "mapped", [120]], [[65337, 65337], "mapped", [121]], [[65338, 65338], "mapped", [122]], [[65339, 65339], "disallowed_STD3_mapped", [91]], [[65340, 65340], "disallowed_STD3_mapped", [92]], [[65341, 65341], "disallowed_STD3_mapped", [93]], [[65342, 65342], "disallowed_STD3_mapped", [94]], [[65343, 65343], "disallowed_STD3_mapped", [95]], [[65344, 65344], "disallowed_STD3_mapped", [96]], [[65345, 65345], "mapped", [97]], [[65346, 65346], "mapped", [98]], [[65347, 65347], "mapped", [99]], [[65348, 65348], "mapped", [100]], [[65349, 65349], "mapped", [101]], [[65350, 65350], "mapped", [102]], [[65351, 65351], "mapped", [103]], [[65352, 65352], "mapped", [104]], [[65353, 65353], "mapped", [105]], [[65354, 65354], "mapped", [106]], [[65355, 65355], "mapped", [107]], [[65356, 65356], "mapped", [108]], [[65357, 65357], "mapped", [109]], [[65358, 65358], "mapped", [110]], [[65359, 65359], "mapped", [111]], [[65360, 65360], "mapped", [112]], [[65361, 65361], "mapped", [113]], [[65362, 65362], "mapped", [114]], [[65363, 65363], "mapped", [115]], [[65364, 65364], "mapped", [116]], [[65365, 65365], "mapped", [117]], [[65366, 65366], "mapped", [118]], [[65367, 65367], "mapped", [119]], [[65368, 65368], "mapped", [120]], [[65369, 65369], "mapped", [121]], [[65370, 65370], "mapped", [122]], [[65371, 65371], "disallowed_STD3_mapped", [123]], [[65372, 65372], "disallowed_STD3_mapped", [124]], [[65373, 65373], "disallowed_STD3_mapped", [125]], [[65374, 65374], "disallowed_STD3_mapped", [126]], [[65375, 65375], "mapped", [10629]], [[65376, 65376], "mapped", [10630]], [[65377, 65377], "mapped", [46]], [[65378, 65378], "mapped", [12300]], [[65379, 65379], "mapped", [12301]], [[65380, 65380], "mapped", [12289]], [[65381, 65381], "mapped", [12539]], [[65382, 65382], "mapped", [12530]], [[65383, 65383], "mapped", [12449]], [[65384, 65384], "mapped", [12451]], [[65385, 65385], "mapped", [12453]], [[65386, 65386], "mapped", [12455]], [[65387, 65387], "mapped", [12457]], [[65388, 65388], "mapped", [12515]], [[65389, 65389], "mapped", [12517]], [[65390, 65390], "mapped", [12519]], [[65391, 65391], "mapped", [12483]], [[65392, 65392], "mapped", [12540]], [[65393, 65393], "mapped", [12450]], [[65394, 65394], "mapped", [12452]], [[65395, 65395], "mapped", [12454]], [[65396, 65396], "mapped", [12456]], [[65397, 65397], "mapped", [12458]], [[65398, 65398], "mapped", [12459]], [[65399, 65399], "mapped", [12461]], [[65400, 65400], "mapped", [12463]], [[65401, 65401], "mapped", [12465]], [[65402, 65402], "mapped", [12467]], [[65403, 65403], "mapped", [12469]], [[65404, 65404], "mapped", [12471]], [[65405, 65405], "mapped", [12473]], [[65406, 65406], "mapped", [12475]], [[65407, 65407], "mapped", [12477]], [[65408, 65408], "mapped", [12479]], [[65409, 65409], "mapped", [12481]], [[65410, 65410], "mapped", [12484]], [[65411, 65411], "mapped", [12486]], [[65412, 65412], "mapped", [12488]], [[65413, 65413], "mapped", [12490]], [[65414, 65414], "mapped", [12491]], [[65415, 65415], "mapped", [12492]], [[65416, 65416], "mapped", [12493]], [[65417, 65417], "mapped", [12494]], [[65418, 65418], "mapped", [12495]], [[65419, 65419], "mapped", [12498]], [[65420, 65420], "mapped", [12501]], [[65421, 65421], "mapped", [12504]], [[65422, 65422], "mapped", [12507]], [[65423, 65423], "mapped", [12510]], [[65424, 65424], "mapped", [12511]], [[65425, 65425], "mapped", [12512]], [[65426, 65426], "mapped", [12513]], [[65427, 65427], "mapped", [12514]], [[65428, 65428], "mapped", [12516]], [[65429, 65429], "mapped", [12518]], [[65430, 65430], "mapped", [12520]], [[65431, 65431], "mapped", [12521]], [[65432, 65432], "mapped", [12522]], [[65433, 65433], "mapped", [12523]], [[65434, 65434], "mapped", [12524]], [[65435, 65435], "mapped", [12525]], [[65436, 65436], "mapped", [12527]], [[65437, 65437], "mapped", [12531]], [[65438, 65438], "mapped", [12441]], [[65439, 65439], "mapped", [12442]], [[65440, 65440], "disallowed"], [[65441, 65441], "mapped", [4352]], [[65442, 65442], "mapped", [4353]], [[65443, 65443], "mapped", [4522]], [[65444, 65444], "mapped", [4354]], [[65445, 65445], "mapped", [4524]], [[65446, 65446], "mapped", [4525]], [[65447, 65447], "mapped", [4355]], [[65448, 65448], "mapped", [4356]], [[65449, 65449], "mapped", [4357]], [[65450, 65450], "mapped", [4528]], [[65451, 65451], "mapped", [4529]], [[65452, 65452], "mapped", [4530]], [[65453, 65453], "mapped", [4531]], [[65454, 65454], "mapped", [4532]], [[65455, 65455], "mapped", [4533]], [[65456, 65456], "mapped", [4378]], [[65457, 65457], "mapped", [4358]], [[65458, 65458], "mapped", [4359]], [[65459, 65459], "mapped", [4360]], [[65460, 65460], "mapped", [4385]], [[65461, 65461], "mapped", [4361]], [[65462, 65462], "mapped", [4362]], [[65463, 65463], "mapped", [4363]], [[65464, 65464], "mapped", [4364]], [[65465, 65465], "mapped", [4365]], [[65466, 65466], "mapped", [4366]], [[65467, 65467], "mapped", [4367]], [[65468, 65468], "mapped", [4368]], [[65469, 65469], "mapped", [4369]], [[65470, 65470], "mapped", [4370]], [[65471, 65473], "disallowed"], [[65474, 65474], "mapped", [4449]], [[65475, 65475], "mapped", [4450]], [[65476, 65476], "mapped", [4451]], [[65477, 65477], "mapped", [4452]], [[65478, 65478], "mapped", [4453]], [[65479, 65479], "mapped", [4454]], [[65480, 65481], "disallowed"], [[65482, 65482], "mapped", [4455]], [[65483, 65483], "mapped", [4456]], [[65484, 65484], "mapped", [4457]], [[65485, 65485], "mapped", [4458]], [[65486, 65486], "mapped", [4459]], [[65487, 65487], "mapped", [4460]], [[65488, 65489], "disallowed"], [[65490, 65490], "mapped", [4461]], [[65491, 65491], "mapped", [4462]], [[65492, 65492], "mapped", [4463]], [[65493, 65493], "mapped", [4464]], [[65494, 65494], "mapped", [4465]], [[65495, 65495], "mapped", [4466]], [[65496, 65497], "disallowed"], [[65498, 65498], "mapped", [4467]], [[65499, 65499], "mapped", [4468]], [[65500, 65500], "mapped", [4469]], [[65501, 65503], "disallowed"], [[65504, 65504], "mapped", [162]], [[65505, 65505], "mapped", [163]], [[65506, 65506], "mapped", [172]], [[65507, 65507], "disallowed_STD3_mapped", [32, 772]], [[65508, 65508], "mapped", [166]], [[65509, 65509], "mapped", [165]], [[65510, 65510], "mapped", [8361]], [[65511, 65511], "disallowed"], [[65512, 65512], "mapped", [9474]], [[65513, 65513], "mapped", [8592]], [[65514, 65514], "mapped", [8593]], [[65515, 65515], "mapped", [8594]], [[65516, 65516], "mapped", [8595]], [[65517, 65517], "mapped", [9632]], [[65518, 65518], "mapped", [9675]], [[65519, 65528], "disallowed"], [[65529, 65531], "disallowed"], [[65532, 65532], "disallowed"], [[65533, 65533], "disallowed"], [[65534, 65535], "disallowed"], [[65536, 65547], "valid"], [[65548, 65548], "disallowed"], [[65549, 65574], "valid"], [[65575, 65575], "disallowed"], [[65576, 65594], "valid"], [[65595, 65595], "disallowed"], [[65596, 65597], "valid"], [[65598, 65598], "disallowed"], [[65599, 65613], "valid"], [[65614, 65615], "disallowed"], [[65616, 65629], "valid"], [[65630, 65663], "disallowed"], [[65664, 65786], "valid"], [[65787, 65791], "disallowed"], [[65792, 65794], "valid", [], "NV8"], [[65795, 65798], "disallowed"], [[65799, 65843], "valid", [], "NV8"], [[65844, 65846], "disallowed"], [[65847, 65855], "valid", [], "NV8"], [[65856, 65930], "valid", [], "NV8"], [[65931, 65932], "valid", [], "NV8"], [[65933, 65935], "disallowed"], [[65936, 65947], "valid", [], "NV8"], [[65948, 65951], "disallowed"], [[65952, 65952], "valid", [], "NV8"], [[65953, 65999], "disallowed"], [[66e3, 66044], "valid", [], "NV8"], [[66045, 66045], "valid"], [[66046, 66175], "disallowed"], [[66176, 66204], "valid"], [[66205, 66207], "disallowed"], [[66208, 66256], "valid"], [[66257, 66271], "disallowed"], [[66272, 66272], "valid"], [[66273, 66299], "valid", [], "NV8"], [[66300, 66303], "disallowed"], [[66304, 66334], "valid"], [[66335, 66335], "valid"], [[66336, 66339], "valid", [], "NV8"], [[66340, 66351], "disallowed"], [[66352, 66368], "valid"], [[66369, 66369], "valid", [], "NV8"], [[66370, 66377], "valid"], [[66378, 66378], "valid", [], "NV8"], [[66379, 66383], "disallowed"], [[66384, 66426], "valid"], [[66427, 66431], "disallowed"], [[66432, 66461], "valid"], [[66462, 66462], "disallowed"], [[66463, 66463], "valid", [], "NV8"], [[66464, 66499], "valid"], [[66500, 66503], "disallowed"], [[66504, 66511], "valid"], [[66512, 66517], "valid", [], "NV8"], [[66518, 66559], "disallowed"], [[66560, 66560], "mapped", [66600]], [[66561, 66561], "mapped", [66601]], [[66562, 66562], "mapped", [66602]], [[66563, 66563], "mapped", [66603]], [[66564, 66564], "mapped", [66604]], [[66565, 66565], "mapped", [66605]], [[66566, 66566], "mapped", [66606]], [[66567, 66567], "mapped", [66607]], [[66568, 66568], "mapped", [66608]], [[66569, 66569], "mapped", [66609]], [[66570, 66570], "mapped", [66610]], [[66571, 66571], "mapped", [66611]], [[66572, 66572], "mapped", [66612]], [[66573, 66573], "mapped", [66613]], [[66574, 66574], "mapped", [66614]], [[66575, 66575], "mapped", [66615]], [[66576, 66576], "mapped", [66616]], [[66577, 66577], "mapped", [66617]], [[66578, 66578], "mapped", [66618]], [[66579, 66579], "mapped", [66619]], [[66580, 66580], "mapped", [66620]], [[66581, 66581], "mapped", [66621]], [[66582, 66582], "mapped", [66622]], [[66583, 66583], "mapped", [66623]], [[66584, 66584], "mapped", [66624]], [[66585, 66585], "mapped", [66625]], [[66586, 66586], "mapped", [66626]], [[66587, 66587], "mapped", [66627]], [[66588, 66588], "mapped", [66628]], [[66589, 66589], "mapped", [66629]], [[66590, 66590], "mapped", [66630]], [[66591, 66591], "mapped", [66631]], [[66592, 66592], "mapped", [66632]], [[66593, 66593], "mapped", [66633]], [[66594, 66594], "mapped", [66634]], [[66595, 66595], "mapped", [66635]], [[66596, 66596], "mapped", [66636]], [[66597, 66597], "mapped", [66637]], [[66598, 66598], "mapped", [66638]], [[66599, 66599], "mapped", [66639]], [[66600, 66637], "valid"], [[66638, 66717], "valid"], [[66718, 66719], "disallowed"], [[66720, 66729], "valid"], [[66730, 66815], "disallowed"], [[66816, 66855], "valid"], [[66856, 66863], "disallowed"], [[66864, 66915], "valid"], [[66916, 66926], "disallowed"], [[66927, 66927], "valid", [], "NV8"], [[66928, 67071], "disallowed"], [[67072, 67382], "valid"], [[67383, 67391], "disallowed"], [[67392, 67413], "valid"], [[67414, 67423], "disallowed"], [[67424, 67431], "valid"], [[67432, 67583], "disallowed"], [[67584, 67589], "valid"], [[67590, 67591], "disallowed"], [[67592, 67592], "valid"], [[67593, 67593], "disallowed"], [[67594, 67637], "valid"], [[67638, 67638], "disallowed"], [[67639, 67640], "valid"], [[67641, 67643], "disallowed"], [[67644, 67644], "valid"], [[67645, 67646], "disallowed"], [[67647, 67647], "valid"], [[67648, 67669], "valid"], [[67670, 67670], "disallowed"], [[67671, 67679], "valid", [], "NV8"], [[67680, 67702], "valid"], [[67703, 67711], "valid", [], "NV8"], [[67712, 67742], "valid"], [[67743, 67750], "disallowed"], [[67751, 67759], "valid", [], "NV8"], [[67760, 67807], "disallowed"], [[67808, 67826], "valid"], [[67827, 67827], "disallowed"], [[67828, 67829], "valid"], [[67830, 67834], "disallowed"], [[67835, 67839], "valid", [], "NV8"], [[67840, 67861], "valid"], [[67862, 67865], "valid", [], "NV8"], [[67866, 67867], "valid", [], "NV8"], [[67868, 67870], "disallowed"], [[67871, 67871], "valid", [], "NV8"], [[67872, 67897], "valid"], [[67898, 67902], "disallowed"], [[67903, 67903], "valid", [], "NV8"], [[67904, 67967], "disallowed"], [[67968, 68023], "valid"], [[68024, 68027], "disallowed"], [[68028, 68029], "valid", [], "NV8"], [[68030, 68031], "valid"], [[68032, 68047], "valid", [], "NV8"], [[68048, 68049], "disallowed"], [[68050, 68095], "valid", [], "NV8"], [[68096, 68099], "valid"], [[68100, 68100], "disallowed"], [[68101, 68102], "valid"], [[68103, 68107], "disallowed"], [[68108, 68115], "valid"], [[68116, 68116], "disallowed"], [[68117, 68119], "valid"], [[68120, 68120], "disallowed"], [[68121, 68147], "valid"], [[68148, 68151], "disallowed"], [[68152, 68154], "valid"], [[68155, 68158], "disallowed"], [[68159, 68159], "valid"], [[68160, 68167], "valid", [], "NV8"], [[68168, 68175], "disallowed"], [[68176, 68184], "valid", [], "NV8"], [[68185, 68191], "disallowed"], [[68192, 68220], "valid"], [[68221, 68223], "valid", [], "NV8"], [[68224, 68252], "valid"], [[68253, 68255], "valid", [], "NV8"], [[68256, 68287], "disallowed"], [[68288, 68295], "valid"], [[68296, 68296], "valid", [], "NV8"], [[68297, 68326], "valid"], [[68327, 68330], "disallowed"], [[68331, 68342], "valid", [], "NV8"], [[68343, 68351], "disallowed"], [[68352, 68405], "valid"], [[68406, 68408], "disallowed"], [[68409, 68415], "valid", [], "NV8"], [[68416, 68437], "valid"], [[68438, 68439], "disallowed"], [[68440, 68447], "valid", [], "NV8"], [[68448, 68466], "valid"], [[68467, 68471], "disallowed"], [[68472, 68479], "valid", [], "NV8"], [[68480, 68497], "valid"], [[68498, 68504], "disallowed"], [[68505, 68508], "valid", [], "NV8"], [[68509, 68520], "disallowed"], [[68521, 68527], "valid", [], "NV8"], [[68528, 68607], "disallowed"], [[68608, 68680], "valid"], [[68681, 68735], "disallowed"], [[68736, 68736], "mapped", [68800]], [[68737, 68737], "mapped", [68801]], [[68738, 68738], "mapped", [68802]], [[68739, 68739], "mapped", [68803]], [[68740, 68740], "mapped", [68804]], [[68741, 68741], "mapped", [68805]], [[68742, 68742], "mapped", [68806]], [[68743, 68743], "mapped", [68807]], [[68744, 68744], "mapped", [68808]], [[68745, 68745], "mapped", [68809]], [[68746, 68746], "mapped", [68810]], [[68747, 68747], "mapped", [68811]], [[68748, 68748], "mapped", [68812]], [[68749, 68749], "mapped", [68813]], [[68750, 68750], "mapped", [68814]], [[68751, 68751], "mapped", [68815]], [[68752, 68752], "mapped", [68816]], [[68753, 68753], "mapped", [68817]], [[68754, 68754], "mapped", [68818]], [[68755, 68755], "mapped", [68819]], [[68756, 68756], "mapped", [68820]], [[68757, 68757], "mapped", [68821]], [[68758, 68758], "mapped", [68822]], [[68759, 68759], "mapped", [68823]], [[68760, 68760], "mapped", [68824]], [[68761, 68761], "mapped", [68825]], [[68762, 68762], "mapped", [68826]], [[68763, 68763], "mapped", [68827]], [[68764, 68764], "mapped", [68828]], [[68765, 68765], "mapped", [68829]], [[68766, 68766], "mapped", [68830]], [[68767, 68767], "mapped", [68831]], [[68768, 68768], "mapped", [68832]], [[68769, 68769], "mapped", [68833]], [[68770, 68770], "mapped", [68834]], [[68771, 68771], "mapped", [68835]], [[68772, 68772], "mapped", [68836]], [[68773, 68773], "mapped", [68837]], [[68774, 68774], "mapped", [68838]], [[68775, 68775], "mapped", [68839]], [[68776, 68776], "mapped", [68840]], [[68777, 68777], "mapped", [68841]], [[68778, 68778], "mapped", [68842]], [[68779, 68779], "mapped", [68843]], [[68780, 68780], "mapped", [68844]], [[68781, 68781], "mapped", [68845]], [[68782, 68782], "mapped", [68846]], [[68783, 68783], "mapped", [68847]], [[68784, 68784], "mapped", [68848]], [[68785, 68785], "mapped", [68849]], [[68786, 68786], "mapped", [68850]], [[68787, 68799], "disallowed"], [[68800, 68850], "valid"], [[68851, 68857], "disallowed"], [[68858, 68863], "valid", [], "NV8"], [[68864, 69215], "disallowed"], [[69216, 69246], "valid", [], "NV8"], [[69247, 69631], "disallowed"], [[69632, 69702], "valid"], [[69703, 69709], "valid", [], "NV8"], [[69710, 69713], "disallowed"], [[69714, 69733], "valid", [], "NV8"], [[69734, 69743], "valid"], [[69744, 69758], "disallowed"], [[69759, 69759], "valid"], [[69760, 69818], "valid"], [[69819, 69820], "valid", [], "NV8"], [[69821, 69821], "disallowed"], [[69822, 69825], "valid", [], "NV8"], [[69826, 69839], "disallowed"], [[69840, 69864], "valid"], [[69865, 69871], "disallowed"], [[69872, 69881], "valid"], [[69882, 69887], "disallowed"], [[69888, 69940], "valid"], [[69941, 69941], "disallowed"], [[69942, 69951], "valid"], [[69952, 69955], "valid", [], "NV8"], [[69956, 69967], "disallowed"], [[69968, 70003], "valid"], [[70004, 70005], "valid", [], "NV8"], [[70006, 70006], "valid"], [[70007, 70015], "disallowed"], [[70016, 70084], "valid"], [[70085, 70088], "valid", [], "NV8"], [[70089, 70089], "valid", [], "NV8"], [[70090, 70092], "valid"], [[70093, 70093], "valid", [], "NV8"], [[70094, 70095], "disallowed"], [[70096, 70105], "valid"], [[70106, 70106], "valid"], [[70107, 70107], "valid", [], "NV8"], [[70108, 70108], "valid"], [[70109, 70111], "valid", [], "NV8"], [[70112, 70112], "disallowed"], [[70113, 70132], "valid", [], "NV8"], [[70133, 70143], "disallowed"], [[70144, 70161], "valid"], [[70162, 70162], "disallowed"], [[70163, 70199], "valid"], [[70200, 70205], "valid", [], "NV8"], [[70206, 70271], "disallowed"], [[70272, 70278], "valid"], [[70279, 70279], "disallowed"], [[70280, 70280], "valid"], [[70281, 70281], "disallowed"], [[70282, 70285], "valid"], [[70286, 70286], "disallowed"], [[70287, 70301], "valid"], [[70302, 70302], "disallowed"], [[70303, 70312], "valid"], [[70313, 70313], "valid", [], "NV8"], [[70314, 70319], "disallowed"], [[70320, 70378], "valid"], [[70379, 70383], "disallowed"], [[70384, 70393], "valid"], [[70394, 70399], "disallowed"], [[70400, 70400], "valid"], [[70401, 70403], "valid"], [[70404, 70404], "disallowed"], [[70405, 70412], "valid"], [[70413, 70414], "disallowed"], [[70415, 70416], "valid"], [[70417, 70418], "disallowed"], [[70419, 70440], "valid"], [[70441, 70441], "disallowed"], [[70442, 70448], "valid"], [[70449, 70449], "disallowed"], [[70450, 70451], "valid"], [[70452, 70452], "disallowed"], [[70453, 70457], "valid"], [[70458, 70459], "disallowed"], [[70460, 70468], "valid"], [[70469, 70470], "disallowed"], [[70471, 70472], "valid"], [[70473, 70474], "disallowed"], [[70475, 70477], "valid"], [[70478, 70479], "disallowed"], [[70480, 70480], "valid"], [[70481, 70486], "disallowed"], [[70487, 70487], "valid"], [[70488, 70492], "disallowed"], [[70493, 70499], "valid"], [[70500, 70501], "disallowed"], [[70502, 70508], "valid"], [[70509, 70511], "disallowed"], [[70512, 70516], "valid"], [[70517, 70783], "disallowed"], [[70784, 70853], "valid"], [[70854, 70854], "valid", [], "NV8"], [[70855, 70855], "valid"], [[70856, 70863], "disallowed"], [[70864, 70873], "valid"], [[70874, 71039], "disallowed"], [[71040, 71093], "valid"], [[71094, 71095], "disallowed"], [[71096, 71104], "valid"], [[71105, 71113], "valid", [], "NV8"], [[71114, 71127], "valid", [], "NV8"], [[71128, 71133], "valid"], [[71134, 71167], "disallowed"], [[71168, 71232], "valid"], [[71233, 71235], "valid", [], "NV8"], [[71236, 71236], "valid"], [[71237, 71247], "disallowed"], [[71248, 71257], "valid"], [[71258, 71295], "disallowed"], [[71296, 71351], "valid"], [[71352, 71359], "disallowed"], [[71360, 71369], "valid"], [[71370, 71423], "disallowed"], [[71424, 71449], "valid"], [[71450, 71452], "disallowed"], [[71453, 71467], "valid"], [[71468, 71471], "disallowed"], [[71472, 71481], "valid"], [[71482, 71487], "valid", [], "NV8"], [[71488, 71839], "disallowed"], [[71840, 71840], "mapped", [71872]], [[71841, 71841], "mapped", [71873]], [[71842, 71842], "mapped", [71874]], [[71843, 71843], "mapped", [71875]], [[71844, 71844], "mapped", [71876]], [[71845, 71845], "mapped", [71877]], [[71846, 71846], "mapped", [71878]], [[71847, 71847], "mapped", [71879]], [[71848, 71848], "mapped", [71880]], [[71849, 71849], "mapped", [71881]], [[71850, 71850], "mapped", [71882]], [[71851, 71851], "mapped", [71883]], [[71852, 71852], "mapped", [71884]], [[71853, 71853], "mapped", [71885]], [[71854, 71854], "mapped", [71886]], [[71855, 71855], "mapped", [71887]], [[71856, 71856], "mapped", [71888]], [[71857, 71857], "mapped", [71889]], [[71858, 71858], "mapped", [71890]], [[71859, 71859], "mapped", [71891]], [[71860, 71860], "mapped", [71892]], [[71861, 71861], "mapped", [71893]], [[71862, 71862], "mapped", [71894]], [[71863, 71863], "mapped", [71895]], [[71864, 71864], "mapped", [71896]], [[71865, 71865], "mapped", [71897]], [[71866, 71866], "mapped", [71898]], [[71867, 71867], "mapped", [71899]], [[71868, 71868], "mapped", [71900]], [[71869, 71869], "mapped", [71901]], [[71870, 71870], "mapped", [71902]], [[71871, 71871], "mapped", [71903]], [[71872, 71913], "valid"], [[71914, 71922], "valid", [], "NV8"], [[71923, 71934], "disallowed"], [[71935, 71935], "valid"], [[71936, 72383], "disallowed"], [[72384, 72440], "valid"], [[72441, 73727], "disallowed"], [[73728, 74606], "valid"], [[74607, 74648], "valid"], [[74649, 74649], "valid"], [[74650, 74751], "disallowed"], [[74752, 74850], "valid", [], "NV8"], [[74851, 74862], "valid", [], "NV8"], [[74863, 74863], "disallowed"], [[74864, 74867], "valid", [], "NV8"], [[74868, 74868], "valid", [], "NV8"], [[74869, 74879], "disallowed"], [[74880, 75075], "valid"], [[75076, 77823], "disallowed"], [[77824, 78894], "valid"], [[78895, 82943], "disallowed"], [[82944, 83526], "valid"], [[83527, 92159], "disallowed"], [[92160, 92728], "valid"], [[92729, 92735], "disallowed"], [[92736, 92766], "valid"], [[92767, 92767], "disallowed"], [[92768, 92777], "valid"], [[92778, 92781], "disallowed"], [[92782, 92783], "valid", [], "NV8"], [[92784, 92879], "disallowed"], [[92880, 92909], "valid"], [[92910, 92911], "disallowed"], [[92912, 92916], "valid"], [[92917, 92917], "valid", [], "NV8"], [[92918, 92927], "disallowed"], [[92928, 92982], "valid"], [[92983, 92991], "valid", [], "NV8"], [[92992, 92995], "valid"], [[92996, 92997], "valid", [], "NV8"], [[92998, 93007], "disallowed"], [[93008, 93017], "valid"], [[93018, 93018], "disallowed"], [[93019, 93025], "valid", [], "NV8"], [[93026, 93026], "disallowed"], [[93027, 93047], "valid"], [[93048, 93052], "disallowed"], [[93053, 93071], "valid"], [[93072, 93951], "disallowed"], [[93952, 94020], "valid"], [[94021, 94031], "disallowed"], [[94032, 94078], "valid"], [[94079, 94094], "disallowed"], [[94095, 94111], "valid"], [[94112, 110591], "disallowed"], [[110592, 110593], "valid"], [[110594, 113663], "disallowed"], [[113664, 113770], "valid"], [[113771, 113775], "disallowed"], [[113776, 113788], "valid"], [[113789, 113791], "disallowed"], [[113792, 113800], "valid"], [[113801, 113807], "disallowed"], [[113808, 113817], "valid"], [[113818, 113819], "disallowed"], [[113820, 113820], "valid", [], "NV8"], [[113821, 113822], "valid"], [[113823, 113823], "valid", [], "NV8"], [[113824, 113827], "ignored"], [[113828, 118783], "disallowed"], [[118784, 119029], "valid", [], "NV8"], [[119030, 119039], "disallowed"], [[119040, 119078], "valid", [], "NV8"], [[119079, 119080], "disallowed"], [[119081, 119081], "valid", [], "NV8"], [[119082, 119133], "valid", [], "NV8"], [[119134, 119134], "mapped", [119127, 119141]], [[119135, 119135], "mapped", [119128, 119141]], [[119136, 119136], "mapped", [119128, 119141, 119150]], [[119137, 119137], "mapped", [119128, 119141, 119151]], [[119138, 119138], "mapped", [119128, 119141, 119152]], [[119139, 119139], "mapped", [119128, 119141, 119153]], [[119140, 119140], "mapped", [119128, 119141, 119154]], [[119141, 119154], "valid", [], "NV8"], [[119155, 119162], "disallowed"], [[119163, 119226], "valid", [], "NV8"], [[119227, 119227], "mapped", [119225, 119141]], [[119228, 119228], "mapped", [119226, 119141]], [[119229, 119229], "mapped", [119225, 119141, 119150]], [[119230, 119230], "mapped", [119226, 119141, 119150]], [[119231, 119231], "mapped", [119225, 119141, 119151]], [[119232, 119232], "mapped", [119226, 119141, 119151]], [[119233, 119261], "valid", [], "NV8"], [[119262, 119272], "valid", [], "NV8"], [[119273, 119295], "disallowed"], [[119296, 119365], "valid", [], "NV8"], [[119366, 119551], "disallowed"], [[119552, 119638], "valid", [], "NV8"], [[119639, 119647], "disallowed"], [[119648, 119665], "valid", [], "NV8"], [[119666, 119807], "disallowed"], [[119808, 119808], "mapped", [97]], [[119809, 119809], "mapped", [98]], [[119810, 119810], "mapped", [99]], [[119811, 119811], "mapped", [100]], [[119812, 119812], "mapped", [101]], [[119813, 119813], "mapped", [102]], [[119814, 119814], "mapped", [103]], [[119815, 119815], "mapped", [104]], [[119816, 119816], "mapped", [105]], [[119817, 119817], "mapped", [106]], [[119818, 119818], "mapped", [107]], [[119819, 119819], "mapped", [108]], [[119820, 119820], "mapped", [109]], [[119821, 119821], "mapped", [110]], [[119822, 119822], "mapped", [111]], [[119823, 119823], "mapped", [112]], [[119824, 119824], "mapped", [113]], [[119825, 119825], "mapped", [114]], [[119826, 119826], "mapped", [115]], [[119827, 119827], "mapped", [116]], [[119828, 119828], "mapped", [117]], [[119829, 119829], "mapped", [118]], [[119830, 119830], "mapped", [119]], [[119831, 119831], "mapped", [120]], [[119832, 119832], "mapped", [121]], [[119833, 119833], "mapped", [122]], [[119834, 119834], "mapped", [97]], [[119835, 119835], "mapped", [98]], [[119836, 119836], "mapped", [99]], [[119837, 119837], "mapped", [100]], [[119838, 119838], "mapped", [101]], [[119839, 119839], "mapped", [102]], [[119840, 119840], "mapped", [103]], [[119841, 119841], "mapped", [104]], [[119842, 119842], "mapped", [105]], [[119843, 119843], "mapped", [106]], [[119844, 119844], "mapped", [107]], [[119845, 119845], "mapped", [108]], [[119846, 119846], "mapped", [109]], [[119847, 119847], "mapped", [110]], [[119848, 119848], "mapped", [111]], [[119849, 119849], "mapped", [112]], [[119850, 119850], "mapped", [113]], [[119851, 119851], "mapped", [114]], [[119852, 119852], "mapped", [115]], [[119853, 119853], "mapped", [116]], [[119854, 119854], "mapped", [117]], [[119855, 119855], "mapped", [118]], [[119856, 119856], "mapped", [119]], [[119857, 119857], "mapped", [120]], [[119858, 119858], "mapped", [121]], [[119859, 119859], "mapped", [122]], [[119860, 119860], "mapped", [97]], [[119861, 119861], "mapped", [98]], [[119862, 119862], "mapped", [99]], [[119863, 119863], "mapped", [100]], [[119864, 119864], "mapped", [101]], [[119865, 119865], "mapped", [102]], [[119866, 119866], "mapped", [103]], [[119867, 119867], "mapped", [104]], [[119868, 119868], "mapped", [105]], [[119869, 119869], "mapped", [106]], [[119870, 119870], "mapped", [107]], [[119871, 119871], "mapped", [108]], [[119872, 119872], "mapped", [109]], [[119873, 119873], "mapped", [110]], [[119874, 119874], "mapped", [111]], [[119875, 119875], "mapped", [112]], [[119876, 119876], "mapped", [113]], [[119877, 119877], "mapped", [114]], [[119878, 119878], "mapped", [115]], [[119879, 119879], "mapped", [116]], [[119880, 119880], "mapped", [117]], [[119881, 119881], "mapped", [118]], [[119882, 119882], "mapped", [119]], [[119883, 119883], "mapped", [120]], [[119884, 119884], "mapped", [121]], [[119885, 119885], "mapped", [122]], [[119886, 119886], "mapped", [97]], [[119887, 119887], "mapped", [98]], [[119888, 119888], "mapped", [99]], [[119889, 119889], "mapped", [100]], [[119890, 119890], "mapped", [101]], [[119891, 119891], "mapped", [102]], [[119892, 119892], "mapped", [103]], [[119893, 119893], "disallowed"], [[119894, 119894], "mapped", [105]], [[119895, 119895], "mapped", [106]], [[119896, 119896], "mapped", [107]], [[119897, 119897], "mapped", [108]], [[119898, 119898], "mapped", [109]], [[119899, 119899], "mapped", [110]], [[119900, 119900], "mapped", [111]], [[119901, 119901], "mapped", [112]], [[119902, 119902], "mapped", [113]], [[119903, 119903], "mapped", [114]], [[119904, 119904], "mapped", [115]], [[119905, 119905], "mapped", [116]], [[119906, 119906], "mapped", [117]], [[119907, 119907], "mapped", [118]], [[119908, 119908], "mapped", [119]], [[119909, 119909], "mapped", [120]], [[119910, 119910], "mapped", [121]], [[119911, 119911], "mapped", [122]], [[119912, 119912], "mapped", [97]], [[119913, 119913], "mapped", [98]], [[119914, 119914], "mapped", [99]], [[119915, 119915], "mapped", [100]], [[119916, 119916], "mapped", [101]], [[119917, 119917], "mapped", [102]], [[119918, 119918], "mapped", [103]], [[119919, 119919], "mapped", [104]], [[119920, 119920], "mapped", [105]], [[119921, 119921], "mapped", [106]], [[119922, 119922], "mapped", [107]], [[119923, 119923], "mapped", [108]], [[119924, 119924], "mapped", [109]], [[119925, 119925], "mapped", [110]], [[119926, 119926], "mapped", [111]], [[119927, 119927], "mapped", [112]], [[119928, 119928], "mapped", [113]], [[119929, 119929], "mapped", [114]], [[119930, 119930], "mapped", [115]], [[119931, 119931], "mapped", [116]], [[119932, 119932], "mapped", [117]], [[119933, 119933], "mapped", [118]], [[119934, 119934], "mapped", [119]], [[119935, 119935], "mapped", [120]], [[119936, 119936], "mapped", [121]], [[119937, 119937], "mapped", [122]], [[119938, 119938], "mapped", [97]], [[119939, 119939], "mapped", [98]], [[119940, 119940], "mapped", [99]], [[119941, 119941], "mapped", [100]], [[119942, 119942], "mapped", [101]], [[119943, 119943], "mapped", [102]], [[119944, 119944], "mapped", [103]], [[119945, 119945], "mapped", [104]], [[119946, 119946], "mapped", [105]], [[119947, 119947], "mapped", [106]], [[119948, 119948], "mapped", [107]], [[119949, 119949], "mapped", [108]], [[119950, 119950], "mapped", [109]], [[119951, 119951], "mapped", [110]], [[119952, 119952], "mapped", [111]], [[119953, 119953], "mapped", [112]], [[119954, 119954], "mapped", [113]], [[119955, 119955], "mapped", [114]], [[119956, 119956], "mapped", [115]], [[119957, 119957], "mapped", [116]], [[119958, 119958], "mapped", [117]], [[119959, 119959], "mapped", [118]], [[119960, 119960], "mapped", [119]], [[119961, 119961], "mapped", [120]], [[119962, 119962], "mapped", [121]], [[119963, 119963], "mapped", [122]], [[119964, 119964], "mapped", [97]], [[119965, 119965], "disallowed"], [[119966, 119966], "mapped", [99]], [[119967, 119967], "mapped", [100]], [[119968, 119969], "disallowed"], [[119970, 119970], "mapped", [103]], [[119971, 119972], "disallowed"], [[119973, 119973], "mapped", [106]], [[119974, 119974], "mapped", [107]], [[119975, 119976], "disallowed"], [[119977, 119977], "mapped", [110]], [[119978, 119978], "mapped", [111]], [[119979, 119979], "mapped", [112]], [[119980, 119980], "mapped", [113]], [[119981, 119981], "disallowed"], [[119982, 119982], "mapped", [115]], [[119983, 119983], "mapped", [116]], [[119984, 119984], "mapped", [117]], [[119985, 119985], "mapped", [118]], [[119986, 119986], "mapped", [119]], [[119987, 119987], "mapped", [120]], [[119988, 119988], "mapped", [121]], [[119989, 119989], "mapped", [122]], [[119990, 119990], "mapped", [97]], [[119991, 119991], "mapped", [98]], [[119992, 119992], "mapped", [99]], [[119993, 119993], "mapped", [100]], [[119994, 119994], "disallowed"], [[119995, 119995], "mapped", [102]], [[119996, 119996], "disallowed"], [[119997, 119997], "mapped", [104]], [[119998, 119998], "mapped", [105]], [[119999, 119999], "mapped", [106]], [[12e4, 12e4], "mapped", [107]], [[120001, 120001], "mapped", [108]], [[120002, 120002], "mapped", [109]], [[120003, 120003], "mapped", [110]], [[120004, 120004], "disallowed"], [[120005, 120005], "mapped", [112]], [[120006, 120006], "mapped", [113]], [[120007, 120007], "mapped", [114]], [[120008, 120008], "mapped", [115]], [[120009, 120009], "mapped", [116]], [[120010, 120010], "mapped", [117]], [[120011, 120011], "mapped", [118]], [[120012, 120012], "mapped", [119]], [[120013, 120013], "mapped", [120]], [[120014, 120014], "mapped", [121]], [[120015, 120015], "mapped", [122]], [[120016, 120016], "mapped", [97]], [[120017, 120017], "mapped", [98]], [[120018, 120018], "mapped", [99]], [[120019, 120019], "mapped", [100]], [[120020, 120020], "mapped", [101]], [[120021, 120021], "mapped", [102]], [[120022, 120022], "mapped", [103]], [[120023, 120023], "mapped", [104]], [[120024, 120024], "mapped", [105]], [[120025, 120025], "mapped", [106]], [[120026, 120026], "mapped", [107]], [[120027, 120027], "mapped", [108]], [[120028, 120028], "mapped", [109]], [[120029, 120029], "mapped", [110]], [[120030, 120030], "mapped", [111]], [[120031, 120031], "mapped", [112]], [[120032, 120032], "mapped", [113]], [[120033, 120033], "mapped", [114]], [[120034, 120034], "mapped", [115]], [[120035, 120035], "mapped", [116]], [[120036, 120036], "mapped", [117]], [[120037, 120037], "mapped", [118]], [[120038, 120038], "mapped", [119]], [[120039, 120039], "mapped", [120]], [[120040, 120040], "mapped", [121]], [[120041, 120041], "mapped", [122]], [[120042, 120042], "mapped", [97]], [[120043, 120043], "mapped", [98]], [[120044, 120044], "mapped", [99]], [[120045, 120045], "mapped", [100]], [[120046, 120046], "mapped", [101]], [[120047, 120047], "mapped", [102]], [[120048, 120048], "mapped", [103]], [[120049, 120049], "mapped", [104]], [[120050, 120050], "mapped", [105]], [[120051, 120051], "mapped", [106]], [[120052, 120052], "mapped", [107]], [[120053, 120053], "mapped", [108]], [[120054, 120054], "mapped", [109]], [[120055, 120055], "mapped", [110]], [[120056, 120056], "mapped", [111]], [[120057, 120057], "mapped", [112]], [[120058, 120058], "mapped", [113]], [[120059, 120059], "mapped", [114]], [[120060, 120060], "mapped", [115]], [[120061, 120061], "mapped", [116]], [[120062, 120062], "mapped", [117]], [[120063, 120063], "mapped", [118]], [[120064, 120064], "mapped", [119]], [[120065, 120065], "mapped", [120]], [[120066, 120066], "mapped", [121]], [[120067, 120067], "mapped", [122]], [[120068, 120068], "mapped", [97]], [[120069, 120069], "mapped", [98]], [[120070, 120070], "disallowed"], [[120071, 120071], "mapped", [100]], [[120072, 120072], "mapped", [101]], [[120073, 120073], "mapped", [102]], [[120074, 120074], "mapped", [103]], [[120075, 120076], "disallowed"], [[120077, 120077], "mapped", [106]], [[120078, 120078], "mapped", [107]], [[120079, 120079], "mapped", [108]], [[120080, 120080], "mapped", [109]], [[120081, 120081], "mapped", [110]], [[120082, 120082], "mapped", [111]], [[120083, 120083], "mapped", [112]], [[120084, 120084], "mapped", [113]], [[120085, 120085], "disallowed"], [[120086, 120086], "mapped", [115]], [[120087, 120087], "mapped", [116]], [[120088, 120088], "mapped", [117]], [[120089, 120089], "mapped", [118]], [[120090, 120090], "mapped", [119]], [[120091, 120091], "mapped", [120]], [[120092, 120092], "mapped", [121]], [[120093, 120093], "disallowed"], [[120094, 120094], "mapped", [97]], [[120095, 120095], "mapped", [98]], [[120096, 120096], "mapped", [99]], [[120097, 120097], "mapped", [100]], [[120098, 120098], "mapped", [101]], [[120099, 120099], "mapped", [102]], [[120100, 120100], "mapped", [103]], [[120101, 120101], "mapped", [104]], [[120102, 120102], "mapped", [105]], [[120103, 120103], "mapped", [106]], [[120104, 120104], "mapped", [107]], [[120105, 120105], "mapped", [108]], [[120106, 120106], "mapped", [109]], [[120107, 120107], "mapped", [110]], [[120108, 120108], "mapped", [111]], [[120109, 120109], "mapped", [112]], [[120110, 120110], "mapped", [113]], [[120111, 120111], "mapped", [114]], [[120112, 120112], "mapped", [115]], [[120113, 120113], "mapped", [116]], [[120114, 120114], "mapped", [117]], [[120115, 120115], "mapped", [118]], [[120116, 120116], "mapped", [119]], [[120117, 120117], "mapped", [120]], [[120118, 120118], "mapped", [121]], [[120119, 120119], "mapped", [122]], [[120120, 120120], "mapped", [97]], [[120121, 120121], "mapped", [98]], [[120122, 120122], "disallowed"], [[120123, 120123], "mapped", [100]], [[120124, 120124], "mapped", [101]], [[120125, 120125], "mapped", [102]], [[120126, 120126], "mapped", [103]], [[120127, 120127], "disallowed"], [[120128, 120128], "mapped", [105]], [[120129, 120129], "mapped", [106]], [[120130, 120130], "mapped", [107]], [[120131, 120131], "mapped", [108]], [[120132, 120132], "mapped", [109]], [[120133, 120133], "disallowed"], [[120134, 120134], "mapped", [111]], [[120135, 120137], "disallowed"], [[120138, 120138], "mapped", [115]], [[120139, 120139], "mapped", [116]], [[120140, 120140], "mapped", [117]], [[120141, 120141], "mapped", [118]], [[120142, 120142], "mapped", [119]], [[120143, 120143], "mapped", [120]], [[120144, 120144], "mapped", [121]], [[120145, 120145], "disallowed"], [[120146, 120146], "mapped", [97]], [[120147, 120147], "mapped", [98]], [[120148, 120148], "mapped", [99]], [[120149, 120149], "mapped", [100]], [[120150, 120150], "mapped", [101]], [[120151, 120151], "mapped", [102]], [[120152, 120152], "mapped", [103]], [[120153, 120153], "mapped", [104]], [[120154, 120154], "mapped", [105]], [[120155, 120155], "mapped", [106]], [[120156, 120156], "mapped", [107]], [[120157, 120157], "mapped", [108]], [[120158, 120158], "mapped", [109]], [[120159, 120159], "mapped", [110]], [[120160, 120160], "mapped", [111]], [[120161, 120161], "mapped", [112]], [[120162, 120162], "mapped", [113]], [[120163, 120163], "mapped", [114]], [[120164, 120164], "mapped", [115]], [[120165, 120165], "mapped", [116]], [[120166, 120166], "mapped", [117]], [[120167, 120167], "mapped", [118]], [[120168, 120168], "mapped", [119]], [[120169, 120169], "mapped", [120]], [[120170, 120170], "mapped", [121]], [[120171, 120171], "mapped", [122]], [[120172, 120172], "mapped", [97]], [[120173, 120173], "mapped", [98]], [[120174, 120174], "mapped", [99]], [[120175, 120175], "mapped", [100]], [[120176, 120176], "mapped", [101]], [[120177, 120177], "mapped", [102]], [[120178, 120178], "mapped", [103]], [[120179, 120179], "mapped", [104]], [[120180, 120180], "mapped", [105]], [[120181, 120181], "mapped", [106]], [[120182, 120182], "mapped", [107]], [[120183, 120183], "mapped", [108]], [[120184, 120184], "mapped", [109]], [[120185, 120185], "mapped", [110]], [[120186, 120186], "mapped", [111]], [[120187, 120187], "mapped", [112]], [[120188, 120188], "mapped", [113]], [[120189, 120189], "mapped", [114]], [[120190, 120190], "mapped", [115]], [[120191, 120191], "mapped", [116]], [[120192, 120192], "mapped", [117]], [[120193, 120193], "mapped", [118]], [[120194, 120194], "mapped", [119]], [[120195, 120195], "mapped", [120]], [[120196, 120196], "mapped", [121]], [[120197, 120197], "mapped", [122]], [[120198, 120198], "mapped", [97]], [[120199, 120199], "mapped", [98]], [[120200, 120200], "mapped", [99]], [[120201, 120201], "mapped", [100]], [[120202, 120202], "mapped", [101]], [[120203, 120203], "mapped", [102]], [[120204, 120204], "mapped", [103]], [[120205, 120205], "mapped", [104]], [[120206, 120206], "mapped", [105]], [[120207, 120207], "mapped", [106]], [[120208, 120208], "mapped", [107]], [[120209, 120209], "mapped", [108]], [[120210, 120210], "mapped", [109]], [[120211, 120211], "mapped", [110]], [[120212, 120212], "mapped", [111]], [[120213, 120213], "mapped", [112]], [[120214, 120214], "mapped", [113]], [[120215, 120215], "mapped", [114]], [[120216, 120216], "mapped", [115]], [[120217, 120217], "mapped", [116]], [[120218, 120218], "mapped", [117]], [[120219, 120219], "mapped", [118]], [[120220, 120220], "mapped", [119]], [[120221, 120221], "mapped", [120]], [[120222, 120222], "mapped", [121]], [[120223, 120223], "mapped", [122]], [[120224, 120224], "mapped", [97]], [[120225, 120225], "mapped", [98]], [[120226, 120226], "mapped", [99]], [[120227, 120227], "mapped", [100]], [[120228, 120228], "mapped", [101]], [[120229, 120229], "mapped", [102]], [[120230, 120230], "mapped", [103]], [[120231, 120231], "mapped", [104]], [[120232, 120232], "mapped", [105]], [[120233, 120233], "mapped", [106]], [[120234, 120234], "mapped", [107]], [[120235, 120235], "mapped", [108]], [[120236, 120236], "mapped", [109]], [[120237, 120237], "mapped", [110]], [[120238, 120238], "mapped", [111]], [[120239, 120239], "mapped", [112]], [[120240, 120240], "mapped", [113]], [[120241, 120241], "mapped", [114]], [[120242, 120242], "mapped", [115]], [[120243, 120243], "mapped", [116]], [[120244, 120244], "mapped", [117]], [[120245, 120245], "mapped", [118]], [[120246, 120246], "mapped", [119]], [[120247, 120247], "mapped", [120]], [[120248, 120248], "mapped", [121]], [[120249, 120249], "mapped", [122]], [[120250, 120250], "mapped", [97]], [[120251, 120251], "mapped", [98]], [[120252, 120252], "mapped", [99]], [[120253, 120253], "mapped", [100]], [[120254, 120254], "mapped", [101]], [[120255, 120255], "mapped", [102]], [[120256, 120256], "mapped", [103]], [[120257, 120257], "mapped", [104]], [[120258, 120258], "mapped", [105]], [[120259, 120259], "mapped", [106]], [[120260, 120260], "mapped", [107]], [[120261, 120261], "mapped", [108]], [[120262, 120262], "mapped", [109]], [[120263, 120263], "mapped", [110]], [[120264, 120264], "mapped", [111]], [[120265, 120265], "mapped", [112]], [[120266, 120266], "mapped", [113]], [[120267, 120267], "mapped", [114]], [[120268, 120268], "mapped", [115]], [[120269, 120269], "mapped", [116]], [[120270, 120270], "mapped", [117]], [[120271, 120271], "mapped", [118]], [[120272, 120272], "mapped", [119]], [[120273, 120273], "mapped", [120]], [[120274, 120274], "mapped", [121]], [[120275, 120275], "mapped", [122]], [[120276, 120276], "mapped", [97]], [[120277, 120277], "mapped", [98]], [[120278, 120278], "mapped", [99]], [[120279, 120279], "mapped", [100]], [[120280, 120280], "mapped", [101]], [[120281, 120281], "mapped", [102]], [[120282, 120282], "mapped", [103]], [[120283, 120283], "mapped", [104]], [[120284, 120284], "mapped", [105]], [[120285, 120285], "mapped", [106]], [[120286, 120286], "mapped", [107]], [[120287, 120287], "mapped", [108]], [[120288, 120288], "mapped", [109]], [[120289, 120289], "mapped", [110]], [[120290, 120290], "mapped", [111]], [[120291, 120291], "mapped", [112]], [[120292, 120292], "mapped", [113]], [[120293, 120293], "mapped", [114]], [[120294, 120294], "mapped", [115]], [[120295, 120295], "mapped", [116]], [[120296, 120296], "mapped", [117]], [[120297, 120297], "mapped", [118]], [[120298, 120298], "mapped", [119]], [[120299, 120299], "mapped", [120]], [[120300, 120300], "mapped", [121]], [[120301, 120301], "mapped", [122]], [[120302, 120302], "mapped", [97]], [[120303, 120303], "mapped", [98]], [[120304, 120304], "mapped", [99]], [[120305, 120305], "mapped", [100]], [[120306, 120306], "mapped", [101]], [[120307, 120307], "mapped", [102]], [[120308, 120308], "mapped", [103]], [[120309, 120309], "mapped", [104]], [[120310, 120310], "mapped", [105]], [[120311, 120311], "mapped", [106]], [[120312, 120312], "mapped", [107]], [[120313, 120313], "mapped", [108]], [[120314, 120314], "mapped", [109]], [[120315, 120315], "mapped", [110]], [[120316, 120316], "mapped", [111]], [[120317, 120317], "mapped", [112]], [[120318, 120318], "mapped", [113]], [[120319, 120319], "mapped", [114]], [[120320, 120320], "mapped", [115]], [[120321, 120321], "mapped", [116]], [[120322, 120322], "mapped", [117]], [[120323, 120323], "mapped", [118]], [[120324, 120324], "mapped", [119]], [[120325, 120325], "mapped", [120]], [[120326, 120326], "mapped", [121]], [[120327, 120327], "mapped", [122]], [[120328, 120328], "mapped", [97]], [[120329, 120329], "mapped", [98]], [[120330, 120330], "mapped", [99]], [[120331, 120331], "mapped", [100]], [[120332, 120332], "mapped", [101]], [[120333, 120333], "mapped", [102]], [[120334, 120334], "mapped", [103]], [[120335, 120335], "mapped", [104]], [[120336, 120336], "mapped", [105]], [[120337, 120337], "mapped", [106]], [[120338, 120338], "mapped", [107]], [[120339, 120339], "mapped", [108]], [[120340, 120340], "mapped", [109]], [[120341, 120341], "mapped", [110]], [[120342, 120342], "mapped", [111]], [[120343, 120343], "mapped", [112]], [[120344, 120344], "mapped", [113]], [[120345, 120345], "mapped", [114]], [[120346, 120346], "mapped", [115]], [[120347, 120347], "mapped", [116]], [[120348, 120348], "mapped", [117]], [[120349, 120349], "mapped", [118]], [[120350, 120350], "mapped", [119]], [[120351, 120351], "mapped", [120]], [[120352, 120352], "mapped", [121]], [[120353, 120353], "mapped", [122]], [[120354, 120354], "mapped", [97]], [[120355, 120355], "mapped", [98]], [[120356, 120356], "mapped", [99]], [[120357, 120357], "mapped", [100]], [[120358, 120358], "mapped", [101]], [[120359, 120359], "mapped", [102]], [[120360, 120360], "mapped", [103]], [[120361, 120361], "mapped", [104]], [[120362, 120362], "mapped", [105]], [[120363, 120363], "mapped", [106]], [[120364, 120364], "mapped", [107]], [[120365, 120365], "mapped", [108]], [[120366, 120366], "mapped", [109]], [[120367, 120367], "mapped", [110]], [[120368, 120368], "mapped", [111]], [[120369, 120369], "mapped", [112]], [[120370, 120370], "mapped", [113]], [[120371, 120371], "mapped", [114]], [[120372, 120372], "mapped", [115]], [[120373, 120373], "mapped", [116]], [[120374, 120374], "mapped", [117]], [[120375, 120375], "mapped", [118]], [[120376, 120376], "mapped", [119]], [[120377, 120377], "mapped", [120]], [[120378, 120378], "mapped", [121]], [[120379, 120379], "mapped", [122]], [[120380, 120380], "mapped", [97]], [[120381, 120381], "mapped", [98]], [[120382, 120382], "mapped", [99]], [[120383, 120383], "mapped", [100]], [[120384, 120384], "mapped", [101]], [[120385, 120385], "mapped", [102]], [[120386, 120386], "mapped", [103]], [[120387, 120387], "mapped", [104]], [[120388, 120388], "mapped", [105]], [[120389, 120389], "mapped", [106]], [[120390, 120390], "mapped", [107]], [[120391, 120391], "mapped", [108]], [[120392, 120392], "mapped", [109]], [[120393, 120393], "mapped", [110]], [[120394, 120394], "mapped", [111]], [[120395, 120395], "mapped", [112]], [[120396, 120396], "mapped", [113]], [[120397, 120397], "mapped", [114]], [[120398, 120398], "mapped", [115]], [[120399, 120399], "mapped", [116]], [[120400, 120400], "mapped", [117]], [[120401, 120401], "mapped", [118]], [[120402, 120402], "mapped", [119]], [[120403, 120403], "mapped", [120]], [[120404, 120404], "mapped", [121]], [[120405, 120405], "mapped", [122]], [[120406, 120406], "mapped", [97]], [[120407, 120407], "mapped", [98]], [[120408, 120408], "mapped", [99]], [[120409, 120409], "mapped", [100]], [[120410, 120410], "mapped", [101]], [[120411, 120411], "mapped", [102]], [[120412, 120412], "mapped", [103]], [[120413, 120413], "mapped", [104]], [[120414, 120414], "mapped", [105]], [[120415, 120415], "mapped", [106]], [[120416, 120416], "mapped", [107]], [[120417, 120417], "mapped", [108]], [[120418, 120418], "mapped", [109]], [[120419, 120419], "mapped", [110]], [[120420, 120420], "mapped", [111]], [[120421, 120421], "mapped", [112]], [[120422, 120422], "mapped", [113]], [[120423, 120423], "mapped", [114]], [[120424, 120424], "mapped", [115]], [[120425, 120425], "mapped", [116]], [[120426, 120426], "mapped", [117]], [[120427, 120427], "mapped", [118]], [[120428, 120428], "mapped", [119]], [[120429, 120429], "mapped", [120]], [[120430, 120430], "mapped", [121]], [[120431, 120431], "mapped", [122]], [[120432, 120432], "mapped", [97]], [[120433, 120433], "mapped", [98]], [[120434, 120434], "mapped", [99]], [[120435, 120435], "mapped", [100]], [[120436, 120436], "mapped", [101]], [[120437, 120437], "mapped", [102]], [[120438, 120438], "mapped", [103]], [[120439, 120439], "mapped", [104]], [[120440, 120440], "mapped", [105]], [[120441, 120441], "mapped", [106]], [[120442, 120442], "mapped", [107]], [[120443, 120443], "mapped", [108]], [[120444, 120444], "mapped", [109]], [[120445, 120445], "mapped", [110]], [[120446, 120446], "mapped", [111]], [[120447, 120447], "mapped", [112]], [[120448, 120448], "mapped", [113]], [[120449, 120449], "mapped", [114]], [[120450, 120450], "mapped", [115]], [[120451, 120451], "mapped", [116]], [[120452, 120452], "mapped", [117]], [[120453, 120453], "mapped", [118]], [[120454, 120454], "mapped", [119]], [[120455, 120455], "mapped", [120]], [[120456, 120456], "mapped", [121]], [[120457, 120457], "mapped", [122]], [[120458, 120458], "mapped", [97]], [[120459, 120459], "mapped", [98]], [[120460, 120460], "mapped", [99]], [[120461, 120461], "mapped", [100]], [[120462, 120462], "mapped", [101]], [[120463, 120463], "mapped", [102]], [[120464, 120464], "mapped", [103]], [[120465, 120465], "mapped", [104]], [[120466, 120466], "mapped", [105]], [[120467, 120467], "mapped", [106]], [[120468, 120468], "mapped", [107]], [[120469, 120469], "mapped", [108]], [[120470, 120470], "mapped", [109]], [[120471, 120471], "mapped", [110]], [[120472, 120472], "mapped", [111]], [[120473, 120473], "mapped", [112]], [[120474, 120474], "mapped", [113]], [[120475, 120475], "mapped", [114]], [[120476, 120476], "mapped", [115]], [[120477, 120477], "mapped", [116]], [[120478, 120478], "mapped", [117]], [[120479, 120479], "mapped", [118]], [[120480, 120480], "mapped", [119]], [[120481, 120481], "mapped", [120]], [[120482, 120482], "mapped", [121]], [[120483, 120483], "mapped", [122]], [[120484, 120484], "mapped", [305]], [[120485, 120485], "mapped", [567]], [[120486, 120487], "disallowed"], [[120488, 120488], "mapped", [945]], [[120489, 120489], "mapped", [946]], [[120490, 120490], "mapped", [947]], [[120491, 120491], "mapped", [948]], [[120492, 120492], "mapped", [949]], [[120493, 120493], "mapped", [950]], [[120494, 120494], "mapped", [951]], [[120495, 120495], "mapped", [952]], [[120496, 120496], "mapped", [953]], [[120497, 120497], "mapped", [954]], [[120498, 120498], "mapped", [955]], [[120499, 120499], "mapped", [956]], [[120500, 120500], "mapped", [957]], [[120501, 120501], "mapped", [958]], [[120502, 120502], "mapped", [959]], [[120503, 120503], "mapped", [960]], [[120504, 120504], "mapped", [961]], [[120505, 120505], "mapped", [952]], [[120506, 120506], "mapped", [963]], [[120507, 120507], "mapped", [964]], [[120508, 120508], "mapped", [965]], [[120509, 120509], "mapped", [966]], [[120510, 120510], "mapped", [967]], [[120511, 120511], "mapped", [968]], [[120512, 120512], "mapped", [969]], [[120513, 120513], "mapped", [8711]], [[120514, 120514], "mapped", [945]], [[120515, 120515], "mapped", [946]], [[120516, 120516], "mapped", [947]], [[120517, 120517], "mapped", [948]], [[120518, 120518], "mapped", [949]], [[120519, 120519], "mapped", [950]], [[120520, 120520], "mapped", [951]], [[120521, 120521], "mapped", [952]], [[120522, 120522], "mapped", [953]], [[120523, 120523], "mapped", [954]], [[120524, 120524], "mapped", [955]], [[120525, 120525], "mapped", [956]], [[120526, 120526], "mapped", [957]], [[120527, 120527], "mapped", [958]], [[120528, 120528], "mapped", [959]], [[120529, 120529], "mapped", [960]], [[120530, 120530], "mapped", [961]], [[120531, 120532], "mapped", [963]], [[120533, 120533], "mapped", [964]], [[120534, 120534], "mapped", [965]], [[120535, 120535], "mapped", [966]], [[120536, 120536], "mapped", [967]], [[120537, 120537], "mapped", [968]], [[120538, 120538], "mapped", [969]], [[120539, 120539], "mapped", [8706]], [[120540, 120540], "mapped", [949]], [[120541, 120541], "mapped", [952]], [[120542, 120542], "mapped", [954]], [[120543, 120543], "mapped", [966]], [[120544, 120544], "mapped", [961]], [[120545, 120545], "mapped", [960]], [[120546, 120546], "mapped", [945]], [[120547, 120547], "mapped", [946]], [[120548, 120548], "mapped", [947]], [[120549, 120549], "mapped", [948]], [[120550, 120550], "mapped", [949]], [[120551, 120551], "mapped", [950]], [[120552, 120552], "mapped", [951]], [[120553, 120553], "mapped", [952]], [[120554, 120554], "mapped", [953]], [[120555, 120555], "mapped", [954]], [[120556, 120556], "mapped", [955]], [[120557, 120557], "mapped", [956]], [[120558, 120558], "mapped", [957]], [[120559, 120559], "mapped", [958]], [[120560, 120560], "mapped", [959]], [[120561, 120561], "mapped", [960]], [[120562, 120562], "mapped", [961]], [[120563, 120563], "mapped", [952]], [[120564, 120564], "mapped", [963]], [[120565, 120565], "mapped", [964]], [[120566, 120566], "mapped", [965]], [[120567, 120567], "mapped", [966]], [[120568, 120568], "mapped", [967]], [[120569, 120569], "mapped", [968]], [[120570, 120570], "mapped", [969]], [[120571, 120571], "mapped", [8711]], [[120572, 120572], "mapped", [945]], [[120573, 120573], "mapped", [946]], [[120574, 120574], "mapped", [947]], [[120575, 120575], "mapped", [948]], [[120576, 120576], "mapped", [949]], [[120577, 120577], "mapped", [950]], [[120578, 120578], "mapped", [951]], [[120579, 120579], "mapped", [952]], [[120580, 120580], "mapped", [953]], [[120581, 120581], "mapped", [954]], [[120582, 120582], "mapped", [955]], [[120583, 120583], "mapped", [956]], [[120584, 120584], "mapped", [957]], [[120585, 120585], "mapped", [958]], [[120586, 120586], "mapped", [959]], [[120587, 120587], "mapped", [960]], [[120588, 120588], "mapped", [961]], [[120589, 120590], "mapped", [963]], [[120591, 120591], "mapped", [964]], [[120592, 120592], "mapped", [965]], [[120593, 120593], "mapped", [966]], [[120594, 120594], "mapped", [967]], [[120595, 120595], "mapped", [968]], [[120596, 120596], "mapped", [969]], [[120597, 120597], "mapped", [8706]], [[120598, 120598], "mapped", [949]], [[120599, 120599], "mapped", [952]], [[120600, 120600], "mapped", [954]], [[120601, 120601], "mapped", [966]], [[120602, 120602], "mapped", [961]], [[120603, 120603], "mapped", [960]], [[120604, 120604], "mapped", [945]], [[120605, 120605], "mapped", [946]], [[120606, 120606], "mapped", [947]], [[120607, 120607], "mapped", [948]], [[120608, 120608], "mapped", [949]], [[120609, 120609], "mapped", [950]], [[120610, 120610], "mapped", [951]], [[120611, 120611], "mapped", [952]], [[120612, 120612], "mapped", [953]], [[120613, 120613], "mapped", [954]], [[120614, 120614], "mapped", [955]], [[120615, 120615], "mapped", [956]], [[120616, 120616], "mapped", [957]], [[120617, 120617], "mapped", [958]], [[120618, 120618], "mapped", [959]], [[120619, 120619], "mapped", [960]], [[120620, 120620], "mapped", [961]], [[120621, 120621], "mapped", [952]], [[120622, 120622], "mapped", [963]], [[120623, 120623], "mapped", [964]], [[120624, 120624], "mapped", [965]], [[120625, 120625], "mapped", [966]], [[120626, 120626], "mapped", [967]], [[120627, 120627], "mapped", [968]], [[120628, 120628], "mapped", [969]], [[120629, 120629], "mapped", [8711]], [[120630, 120630], "mapped", [945]], [[120631, 120631], "mapped", [946]], [[120632, 120632], "mapped", [947]], [[120633, 120633], "mapped", [948]], [[120634, 120634], "mapped", [949]], [[120635, 120635], "mapped", [950]], [[120636, 120636], "mapped", [951]], [[120637, 120637], "mapped", [952]], [[120638, 120638], "mapped", [953]], [[120639, 120639], "mapped", [954]], [[120640, 120640], "mapped", [955]], [[120641, 120641], "mapped", [956]], [[120642, 120642], "mapped", [957]], [[120643, 120643], "mapped", [958]], [[120644, 120644], "mapped", [959]], [[120645, 120645], "mapped", [960]], [[120646, 120646], "mapped", [961]], [[120647, 120648], "mapped", [963]], [[120649, 120649], "mapped", [964]], [[120650, 120650], "mapped", [965]], [[120651, 120651], "mapped", [966]], [[120652, 120652], "mapped", [967]], [[120653, 120653], "mapped", [968]], [[120654, 120654], "mapped", [969]], [[120655, 120655], "mapped", [8706]], [[120656, 120656], "mapped", [949]], [[120657, 120657], "mapped", [952]], [[120658, 120658], "mapped", [954]], [[120659, 120659], "mapped", [966]], [[120660, 120660], "mapped", [961]], [[120661, 120661], "mapped", [960]], [[120662, 120662], "mapped", [945]], [[120663, 120663], "mapped", [946]], [[120664, 120664], "mapped", [947]], [[120665, 120665], "mapped", [948]], [[120666, 120666], "mapped", [949]], [[120667, 120667], "mapped", [950]], [[120668, 120668], "mapped", [951]], [[120669, 120669], "mapped", [952]], [[120670, 120670], "mapped", [953]], [[120671, 120671], "mapped", [954]], [[120672, 120672], "mapped", [955]], [[120673, 120673], "mapped", [956]], [[120674, 120674], "mapped", [957]], [[120675, 120675], "mapped", [958]], [[120676, 120676], "mapped", [959]], [[120677, 120677], "mapped", [960]], [[120678, 120678], "mapped", [961]], [[120679, 120679], "mapped", [952]], [[120680, 120680], "mapped", [963]], [[120681, 120681], "mapped", [964]], [[120682, 120682], "mapped", [965]], [[120683, 120683], "mapped", [966]], [[120684, 120684], "mapped", [967]], [[120685, 120685], "mapped", [968]], [[120686, 120686], "mapped", [969]], [[120687, 120687], "mapped", [8711]], [[120688, 120688], "mapped", [945]], [[120689, 120689], "mapped", [946]], [[120690, 120690], "mapped", [947]], [[120691, 120691], "mapped", [948]], [[120692, 120692], "mapped", [949]], [[120693, 120693], "mapped", [950]], [[120694, 120694], "mapped", [951]], [[120695, 120695], "mapped", [952]], [[120696, 120696], "mapped", [953]], [[120697, 120697], "mapped", [954]], [[120698, 120698], "mapped", [955]], [[120699, 120699], "mapped", [956]], [[120700, 120700], "mapped", [957]], [[120701, 120701], "mapped", [958]], [[120702, 120702], "mapped", [959]], [[120703, 120703], "mapped", [960]], [[120704, 120704], "mapped", [961]], [[120705, 120706], "mapped", [963]], [[120707, 120707], "mapped", [964]], [[120708, 120708], "mapped", [965]], [[120709, 120709], "mapped", [966]], [[120710, 120710], "mapped", [967]], [[120711, 120711], "mapped", [968]], [[120712, 120712], "mapped", [969]], [[120713, 120713], "mapped", [8706]], [[120714, 120714], "mapped", [949]], [[120715, 120715], "mapped", [952]], [[120716, 120716], "mapped", [954]], [[120717, 120717], "mapped", [966]], [[120718, 120718], "mapped", [961]], [[120719, 120719], "mapped", [960]], [[120720, 120720], "mapped", [945]], [[120721, 120721], "mapped", [946]], [[120722, 120722], "mapped", [947]], [[120723, 120723], "mapped", [948]], [[120724, 120724], "mapped", [949]], [[120725, 120725], "mapped", [950]], [[120726, 120726], "mapped", [951]], [[120727, 120727], "mapped", [952]], [[120728, 120728], "mapped", [953]], [[120729, 120729], "mapped", [954]], [[120730, 120730], "mapped", [955]], [[120731, 120731], "mapped", [956]], [[120732, 120732], "mapped", [957]], [[120733, 120733], "mapped", [958]], [[120734, 120734], "mapped", [959]], [[120735, 120735], "mapped", [960]], [[120736, 120736], "mapped", [961]], [[120737, 120737], "mapped", [952]], [[120738, 120738], "mapped", [963]], [[120739, 120739], "mapped", [964]], [[120740, 120740], "mapped", [965]], [[120741, 120741], "mapped", [966]], [[120742, 120742], "mapped", [967]], [[120743, 120743], "mapped", [968]], [[120744, 120744], "mapped", [969]], [[120745, 120745], "mapped", [8711]], [[120746, 120746], "mapped", [945]], [[120747, 120747], "mapped", [946]], [[120748, 120748], "mapped", [947]], [[120749, 120749], "mapped", [948]], [[120750, 120750], "mapped", [949]], [[120751, 120751], "mapped", [950]], [[120752, 120752], "mapped", [951]], [[120753, 120753], "mapped", [952]], [[120754, 120754], "mapped", [953]], [[120755, 120755], "mapped", [954]], [[120756, 120756], "mapped", [955]], [[120757, 120757], "mapped", [956]], [[120758, 120758], "mapped", [957]], [[120759, 120759], "mapped", [958]], [[120760, 120760], "mapped", [959]], [[120761, 120761], "mapped", [960]], [[120762, 120762], "mapped", [961]], [[120763, 120764], "mapped", [963]], [[120765, 120765], "mapped", [964]], [[120766, 120766], "mapped", [965]], [[120767, 120767], "mapped", [966]], [[120768, 120768], "mapped", [967]], [[120769, 120769], "mapped", [968]], [[120770, 120770], "mapped", [969]], [[120771, 120771], "mapped", [8706]], [[120772, 120772], "mapped", [949]], [[120773, 120773], "mapped", [952]], [[120774, 120774], "mapped", [954]], [[120775, 120775], "mapped", [966]], [[120776, 120776], "mapped", [961]], [[120777, 120777], "mapped", [960]], [[120778, 120779], "mapped", [989]], [[120780, 120781], "disallowed"], [[120782, 120782], "mapped", [48]], [[120783, 120783], "mapped", [49]], [[120784, 120784], "mapped", [50]], [[120785, 120785], "mapped", [51]], [[120786, 120786], "mapped", [52]], [[120787, 120787], "mapped", [53]], [[120788, 120788], "mapped", [54]], [[120789, 120789], "mapped", [55]], [[120790, 120790], "mapped", [56]], [[120791, 120791], "mapped", [57]], [[120792, 120792], "mapped", [48]], [[120793, 120793], "mapped", [49]], [[120794, 120794], "mapped", [50]], [[120795, 120795], "mapped", [51]], [[120796, 120796], "mapped", [52]], [[120797, 120797], "mapped", [53]], [[120798, 120798], "mapped", [54]], [[120799, 120799], "mapped", [55]], [[120800, 120800], "mapped", [56]], [[120801, 120801], "mapped", [57]], [[120802, 120802], "mapped", [48]], [[120803, 120803], "mapped", [49]], [[120804, 120804], "mapped", [50]], [[120805, 120805], "mapped", [51]], [[120806, 120806], "mapped", [52]], [[120807, 120807], "mapped", [53]], [[120808, 120808], "mapped", [54]], [[120809, 120809], "mapped", [55]], [[120810, 120810], "mapped", [56]], [[120811, 120811], "mapped", [57]], [[120812, 120812], "mapped", [48]], [[120813, 120813], "mapped", [49]], [[120814, 120814], "mapped", [50]], [[120815, 120815], "mapped", [51]], [[120816, 120816], "mapped", [52]], [[120817, 120817], "mapped", [53]], [[120818, 120818], "mapped", [54]], [[120819, 120819], "mapped", [55]], [[120820, 120820], "mapped", [56]], [[120821, 120821], "mapped", [57]], [[120822, 120822], "mapped", [48]], [[120823, 120823], "mapped", [49]], [[120824, 120824], "mapped", [50]], [[120825, 120825], "mapped", [51]], [[120826, 120826], "mapped", [52]], [[120827, 120827], "mapped", [53]], [[120828, 120828], "mapped", [54]], [[120829, 120829], "mapped", [55]], [[120830, 120830], "mapped", [56]], [[120831, 120831], "mapped", [57]], [[120832, 121343], "valid", [], "NV8"], [[121344, 121398], "valid"], [[121399, 121402], "valid", [], "NV8"], [[121403, 121452], "valid"], [[121453, 121460], "valid", [], "NV8"], [[121461, 121461], "valid"], [[121462, 121475], "valid", [], "NV8"], [[121476, 121476], "valid"], [[121477, 121483], "valid", [], "NV8"], [[121484, 121498], "disallowed"], [[121499, 121503], "valid"], [[121504, 121504], "disallowed"], [[121505, 121519], "valid"], [[121520, 124927], "disallowed"], [[124928, 125124], "valid"], [[125125, 125126], "disallowed"], [[125127, 125135], "valid", [], "NV8"], [[125136, 125142], "valid"], [[125143, 126463], "disallowed"], [[126464, 126464], "mapped", [1575]], [[126465, 126465], "mapped", [1576]], [[126466, 126466], "mapped", [1580]], [[126467, 126467], "mapped", [1583]], [[126468, 126468], "disallowed"], [[126469, 126469], "mapped", [1608]], [[126470, 126470], "mapped", [1586]], [[126471, 126471], "mapped", [1581]], [[126472, 126472], "mapped", [1591]], [[126473, 126473], "mapped", [1610]], [[126474, 126474], "mapped", [1603]], [[126475, 126475], "mapped", [1604]], [[126476, 126476], "mapped", [1605]], [[126477, 126477], "mapped", [1606]], [[126478, 126478], "mapped", [1587]], [[126479, 126479], "mapped", [1593]], [[126480, 126480], "mapped", [1601]], [[126481, 126481], "mapped", [1589]], [[126482, 126482], "mapped", [1602]], [[126483, 126483], "mapped", [1585]], [[126484, 126484], "mapped", [1588]], [[126485, 126485], "mapped", [1578]], [[126486, 126486], "mapped", [1579]], [[126487, 126487], "mapped", [1582]], [[126488, 126488], "mapped", [1584]], [[126489, 126489], "mapped", [1590]], [[126490, 126490], "mapped", [1592]], [[126491, 126491], "mapped", [1594]], [[126492, 126492], "mapped", [1646]], [[126493, 126493], "mapped", [1722]], [[126494, 126494], "mapped", [1697]], [[126495, 126495], "mapped", [1647]], [[126496, 126496], "disallowed"], [[126497, 126497], "mapped", [1576]], [[126498, 126498], "mapped", [1580]], [[126499, 126499], "disallowed"], [[126500, 126500], "mapped", [1607]], [[126501, 126502], "disallowed"], [[126503, 126503], "mapped", [1581]], [[126504, 126504], "disallowed"], [[126505, 126505], "mapped", [1610]], [[126506, 126506], "mapped", [1603]], [[126507, 126507], "mapped", [1604]], [[126508, 126508], "mapped", [1605]], [[126509, 126509], "mapped", [1606]], [[126510, 126510], "mapped", [1587]], [[126511, 126511], "mapped", [1593]], [[126512, 126512], "mapped", [1601]], [[126513, 126513], "mapped", [1589]], [[126514, 126514], "mapped", [1602]], [[126515, 126515], "disallowed"], [[126516, 126516], "mapped", [1588]], [[126517, 126517], "mapped", [1578]], [[126518, 126518], "mapped", [1579]], [[126519, 126519], "mapped", [1582]], [[126520, 126520], "disallowed"], [[126521, 126521], "mapped", [1590]], [[126522, 126522], "disallowed"], [[126523, 126523], "mapped", [1594]], [[126524, 126529], "disallowed"], [[126530, 126530], "mapped", [1580]], [[126531, 126534], "disallowed"], [[126535, 126535], "mapped", [1581]], [[126536, 126536], "disallowed"], [[126537, 126537], "mapped", [1610]], [[126538, 126538], "disallowed"], [[126539, 126539], "mapped", [1604]], [[126540, 126540], "disallowed"], [[126541, 126541], "mapped", [1606]], [[126542, 126542], "mapped", [1587]], [[126543, 126543], "mapped", [1593]], [[126544, 126544], "disallowed"], [[126545, 126545], "mapped", [1589]], [[126546, 126546], "mapped", [1602]], [[126547, 126547], "disallowed"], [[126548, 126548], "mapped", [1588]], [[126549, 126550], "disallowed"], [[126551, 126551], "mapped", [1582]], [[126552, 126552], "disallowed"], [[126553, 126553], "mapped", [1590]], [[126554, 126554], "disallowed"], [[126555, 126555], "mapped", [1594]], [[126556, 126556], "disallowed"], [[126557, 126557], "mapped", [1722]], [[126558, 126558], "disallowed"], [[126559, 126559], "mapped", [1647]], [[126560, 126560], "disallowed"], [[126561, 126561], "mapped", [1576]], [[126562, 126562], "mapped", [1580]], [[126563, 126563], "disallowed"], [[126564, 126564], "mapped", [1607]], [[126565, 126566], "disallowed"], [[126567, 126567], "mapped", [1581]], [[126568, 126568], "mapped", [1591]], [[126569, 126569], "mapped", [1610]], [[126570, 126570], "mapped", [1603]], [[126571, 126571], "disallowed"], [[126572, 126572], "mapped", [1605]], [[126573, 126573], "mapped", [1606]], [[126574, 126574], "mapped", [1587]], [[126575, 126575], "mapped", [1593]], [[126576, 126576], "mapped", [1601]], [[126577, 126577], "mapped", [1589]], [[126578, 126578], "mapped", [1602]], [[126579, 126579], "disallowed"], [[126580, 126580], "mapped", [1588]], [[126581, 126581], "mapped", [1578]], [[126582, 126582], "mapped", [1579]], [[126583, 126583], "mapped", [1582]], [[126584, 126584], "disallowed"], [[126585, 126585], "mapped", [1590]], [[126586, 126586], "mapped", [1592]], [[126587, 126587], "mapped", [1594]], [[126588, 126588], "mapped", [1646]], [[126589, 126589], "disallowed"], [[126590, 126590], "mapped", [1697]], [[126591, 126591], "disallowed"], [[126592, 126592], "mapped", [1575]], [[126593, 126593], "mapped", [1576]], [[126594, 126594], "mapped", [1580]], [[126595, 126595], "mapped", [1583]], [[126596, 126596], "mapped", [1607]], [[126597, 126597], "mapped", [1608]], [[126598, 126598], "mapped", [1586]], [[126599, 126599], "mapped", [1581]], [[126600, 126600], "mapped", [1591]], [[126601, 126601], "mapped", [1610]], [[126602, 126602], "disallowed"], [[126603, 126603], "mapped", [1604]], [[126604, 126604], "mapped", [1605]], [[126605, 126605], "mapped", [1606]], [[126606, 126606], "mapped", [1587]], [[126607, 126607], "mapped", [1593]], [[126608, 126608], "mapped", [1601]], [[126609, 126609], "mapped", [1589]], [[126610, 126610], "mapped", [1602]], [[126611, 126611], "mapped", [1585]], [[126612, 126612], "mapped", [1588]], [[126613, 126613], "mapped", [1578]], [[126614, 126614], "mapped", [1579]], [[126615, 126615], "mapped", [1582]], [[126616, 126616], "mapped", [1584]], [[126617, 126617], "mapped", [1590]], [[126618, 126618], "mapped", [1592]], [[126619, 126619], "mapped", [1594]], [[126620, 126624], "disallowed"], [[126625, 126625], "mapped", [1576]], [[126626, 126626], "mapped", [1580]], [[126627, 126627], "mapped", [1583]], [[126628, 126628], "disallowed"], [[126629, 126629], "mapped", [1608]], [[126630, 126630], "mapped", [1586]], [[126631, 126631], "mapped", [1581]], [[126632, 126632], "mapped", [1591]], [[126633, 126633], "mapped", [1610]], [[126634, 126634], "disallowed"], [[126635, 126635], "mapped", [1604]], [[126636, 126636], "mapped", [1605]], [[126637, 126637], "mapped", [1606]], [[126638, 126638], "mapped", [1587]], [[126639, 126639], "mapped", [1593]], [[126640, 126640], "mapped", [1601]], [[126641, 126641], "mapped", [1589]], [[126642, 126642], "mapped", [1602]], [[126643, 126643], "mapped", [1585]], [[126644, 126644], "mapped", [1588]], [[126645, 126645], "mapped", [1578]], [[126646, 126646], "mapped", [1579]], [[126647, 126647], "mapped", [1582]], [[126648, 126648], "mapped", [1584]], [[126649, 126649], "mapped", [1590]], [[126650, 126650], "mapped", [1592]], [[126651, 126651], "mapped", [1594]], [[126652, 126703], "disallowed"], [[126704, 126705], "valid", [], "NV8"], [[126706, 126975], "disallowed"], [[126976, 127019], "valid", [], "NV8"], [[127020, 127023], "disallowed"], [[127024, 127123], "valid", [], "NV8"], [[127124, 127135], "disallowed"], [[127136, 127150], "valid", [], "NV8"], [[127151, 127152], "disallowed"], [[127153, 127166], "valid", [], "NV8"], [[127167, 127167], "valid", [], "NV8"], [[127168, 127168], "disallowed"], [[127169, 127183], "valid", [], "NV8"], [[127184, 127184], "disallowed"], [[127185, 127199], "valid", [], "NV8"], [[127200, 127221], "valid", [], "NV8"], [[127222, 127231], "disallowed"], [[127232, 127232], "disallowed"], [[127233, 127233], "disallowed_STD3_mapped", [48, 44]], [[127234, 127234], "disallowed_STD3_mapped", [49, 44]], [[127235, 127235], "disallowed_STD3_mapped", [50, 44]], [[127236, 127236], "disallowed_STD3_mapped", [51, 44]], [[127237, 127237], "disallowed_STD3_mapped", [52, 44]], [[127238, 127238], "disallowed_STD3_mapped", [53, 44]], [[127239, 127239], "disallowed_STD3_mapped", [54, 44]], [[127240, 127240], "disallowed_STD3_mapped", [55, 44]], [[127241, 127241], "disallowed_STD3_mapped", [56, 44]], [[127242, 127242], "disallowed_STD3_mapped", [57, 44]], [[127243, 127244], "valid", [], "NV8"], [[127245, 127247], "disallowed"], [[127248, 127248], "disallowed_STD3_mapped", [40, 97, 41]], [[127249, 127249], "disallowed_STD3_mapped", [40, 98, 41]], [[127250, 127250], "disallowed_STD3_mapped", [40, 99, 41]], [[127251, 127251], "disallowed_STD3_mapped", [40, 100, 41]], [[127252, 127252], "disallowed_STD3_mapped", [40, 101, 41]], [[127253, 127253], "disallowed_STD3_mapped", [40, 102, 41]], [[127254, 127254], "disallowed_STD3_mapped", [40, 103, 41]], [[127255, 127255], "disallowed_STD3_mapped", [40, 104, 41]], [[127256, 127256], "disallowed_STD3_mapped", [40, 105, 41]], [[127257, 127257], "disallowed_STD3_mapped", [40, 106, 41]], [[127258, 127258], "disallowed_STD3_mapped", [40, 107, 41]], [[127259, 127259], "disallowed_STD3_mapped", [40, 108, 41]], [[127260, 127260], "disallowed_STD3_mapped", [40, 109, 41]], [[127261, 127261], "disallowed_STD3_mapped", [40, 110, 41]], [[127262, 127262], "disallowed_STD3_mapped", [40, 111, 41]], [[127263, 127263], "disallowed_STD3_mapped", [40, 112, 41]], [[127264, 127264], "disallowed_STD3_mapped", [40, 113, 41]], [[127265, 127265], "disallowed_STD3_mapped", [40, 114, 41]], [[127266, 127266], "disallowed_STD3_mapped", [40, 115, 41]], [[127267, 127267], "disallowed_STD3_mapped", [40, 116, 41]], [[127268, 127268], "disallowed_STD3_mapped", [40, 117, 41]], [[127269, 127269], "disallowed_STD3_mapped", [40, 118, 41]], [[127270, 127270], "disallowed_STD3_mapped", [40, 119, 41]], [[127271, 127271], "disallowed_STD3_mapped", [40, 120, 41]], [[127272, 127272], "disallowed_STD3_mapped", [40, 121, 41]], [[127273, 127273], "disallowed_STD3_mapped", [40, 122, 41]], [[127274, 127274], "mapped", [12308, 115, 12309]], [[127275, 127275], "mapped", [99]], [[127276, 127276], "mapped", [114]], [[127277, 127277], "mapped", [99, 100]], [[127278, 127278], "mapped", [119, 122]], [[127279, 127279], "disallowed"], [[127280, 127280], "mapped", [97]], [[127281, 127281], "mapped", [98]], [[127282, 127282], "mapped", [99]], [[127283, 127283], "mapped", [100]], [[127284, 127284], "mapped", [101]], [[127285, 127285], "mapped", [102]], [[127286, 127286], "mapped", [103]], [[127287, 127287], "mapped", [104]], [[127288, 127288], "mapped", [105]], [[127289, 127289], "mapped", [106]], [[127290, 127290], "mapped", [107]], [[127291, 127291], "mapped", [108]], [[127292, 127292], "mapped", [109]], [[127293, 127293], "mapped", [110]], [[127294, 127294], "mapped", [111]], [[127295, 127295], "mapped", [112]], [[127296, 127296], "mapped", [113]], [[127297, 127297], "mapped", [114]], [[127298, 127298], "mapped", [115]], [[127299, 127299], "mapped", [116]], [[127300, 127300], "mapped", [117]], [[127301, 127301], "mapped", [118]], [[127302, 127302], "mapped", [119]], [[127303, 127303], "mapped", [120]], [[127304, 127304], "mapped", [121]], [[127305, 127305], "mapped", [122]], [[127306, 127306], "mapped", [104, 118]], [[127307, 127307], "mapped", [109, 118]], [[127308, 127308], "mapped", [115, 100]], [[127309, 127309], "mapped", [115, 115]], [[127310, 127310], "mapped", [112, 112, 118]], [[127311, 127311], "mapped", [119, 99]], [[127312, 127318], "valid", [], "NV8"], [[127319, 127319], "valid", [], "NV8"], [[127320, 127326], "valid", [], "NV8"], [[127327, 127327], "valid", [], "NV8"], [[127328, 127337], "valid", [], "NV8"], [[127338, 127338], "mapped", [109, 99]], [[127339, 127339], "mapped", [109, 100]], [[127340, 127343], "disallowed"], [[127344, 127352], "valid", [], "NV8"], [[127353, 127353], "valid", [], "NV8"], [[127354, 127354], "valid", [], "NV8"], [[127355, 127356], "valid", [], "NV8"], [[127357, 127358], "valid", [], "NV8"], [[127359, 127359], "valid", [], "NV8"], [[127360, 127369], "valid", [], "NV8"], [[127370, 127373], "valid", [], "NV8"], [[127374, 127375], "valid", [], "NV8"], [[127376, 127376], "mapped", [100, 106]], [[127377, 127386], "valid", [], "NV8"], [[127387, 127461], "disallowed"], [[127462, 127487], "valid", [], "NV8"], [[127488, 127488], "mapped", [12411, 12363]], [[127489, 127489], "mapped", [12467, 12467]], [[127490, 127490], "mapped", [12469]], [[127491, 127503], "disallowed"], [[127504, 127504], "mapped", [25163]], [[127505, 127505], "mapped", [23383]], [[127506, 127506], "mapped", [21452]], [[127507, 127507], "mapped", [12487]], [[127508, 127508], "mapped", [20108]], [[127509, 127509], "mapped", [22810]], [[127510, 127510], "mapped", [35299]], [[127511, 127511], "mapped", [22825]], [[127512, 127512], "mapped", [20132]], [[127513, 127513], "mapped", [26144]], [[127514, 127514], "mapped", [28961]], [[127515, 127515], "mapped", [26009]], [[127516, 127516], "mapped", [21069]], [[127517, 127517], "mapped", [24460]], [[127518, 127518], "mapped", [20877]], [[127519, 127519], "mapped", [26032]], [[127520, 127520], "mapped", [21021]], [[127521, 127521], "mapped", [32066]], [[127522, 127522], "mapped", [29983]], [[127523, 127523], "mapped", [36009]], [[127524, 127524], "mapped", [22768]], [[127525, 127525], "mapped", [21561]], [[127526, 127526], "mapped", [28436]], [[127527, 127527], "mapped", [25237]], [[127528, 127528], "mapped", [25429]], [[127529, 127529], "mapped", [19968]], [[127530, 127530], "mapped", [19977]], [[127531, 127531], "mapped", [36938]], [[127532, 127532], "mapped", [24038]], [[127533, 127533], "mapped", [20013]], [[127534, 127534], "mapped", [21491]], [[127535, 127535], "mapped", [25351]], [[127536, 127536], "mapped", [36208]], [[127537, 127537], "mapped", [25171]], [[127538, 127538], "mapped", [31105]], [[127539, 127539], "mapped", [31354]], [[127540, 127540], "mapped", [21512]], [[127541, 127541], "mapped", [28288]], [[127542, 127542], "mapped", [26377]], [[127543, 127543], "mapped", [26376]], [[127544, 127544], "mapped", [30003]], [[127545, 127545], "mapped", [21106]], [[127546, 127546], "mapped", [21942]], [[127547, 127551], "disallowed"], [[127552, 127552], "mapped", [12308, 26412, 12309]], [[127553, 127553], "mapped", [12308, 19977, 12309]], [[127554, 127554], "mapped", [12308, 20108, 12309]], [[127555, 127555], "mapped", [12308, 23433, 12309]], [[127556, 127556], "mapped", [12308, 28857, 12309]], [[127557, 127557], "mapped", [12308, 25171, 12309]], [[127558, 127558], "mapped", [12308, 30423, 12309]], [[127559, 127559], "mapped", [12308, 21213, 12309]], [[127560, 127560], "mapped", [12308, 25943, 12309]], [[127561, 127567], "disallowed"], [[127568, 127568], "mapped", [24471]], [[127569, 127569], "mapped", [21487]], [[127570, 127743], "disallowed"], [[127744, 127776], "valid", [], "NV8"], [[127777, 127788], "valid", [], "NV8"], [[127789, 127791], "valid", [], "NV8"], [[127792, 127797], "valid", [], "NV8"], [[127798, 127798], "valid", [], "NV8"], [[127799, 127868], "valid", [], "NV8"], [[127869, 127869], "valid", [], "NV8"], [[127870, 127871], "valid", [], "NV8"], [[127872, 127891], "valid", [], "NV8"], [[127892, 127903], "valid", [], "NV8"], [[127904, 127940], "valid", [], "NV8"], [[127941, 127941], "valid", [], "NV8"], [[127942, 127946], "valid", [], "NV8"], [[127947, 127950], "valid", [], "NV8"], [[127951, 127955], "valid", [], "NV8"], [[127956, 127967], "valid", [], "NV8"], [[127968, 127984], "valid", [], "NV8"], [[127985, 127991], "valid", [], "NV8"], [[127992, 127999], "valid", [], "NV8"], [[128e3, 128062], "valid", [], "NV8"], [[128063, 128063], "valid", [], "NV8"], [[128064, 128064], "valid", [], "NV8"], [[128065, 128065], "valid", [], "NV8"], [[128066, 128247], "valid", [], "NV8"], [[128248, 128248], "valid", [], "NV8"], [[128249, 128252], "valid", [], "NV8"], [[128253, 128254], "valid", [], "NV8"], [[128255, 128255], "valid", [], "NV8"], [[128256, 128317], "valid", [], "NV8"], [[128318, 128319], "valid", [], "NV8"], [[128320, 128323], "valid", [], "NV8"], [[128324, 128330], "valid", [], "NV8"], [[128331, 128335], "valid", [], "NV8"], [[128336, 128359], "valid", [], "NV8"], [[128360, 128377], "valid", [], "NV8"], [[128378, 128378], "disallowed"], [[128379, 128419], "valid", [], "NV8"], [[128420, 128420], "disallowed"], [[128421, 128506], "valid", [], "NV8"], [[128507, 128511], "valid", [], "NV8"], [[128512, 128512], "valid", [], "NV8"], [[128513, 128528], "valid", [], "NV8"], [[128529, 128529], "valid", [], "NV8"], [[128530, 128532], "valid", [], "NV8"], [[128533, 128533], "valid", [], "NV8"], [[128534, 128534], "valid", [], "NV8"], [[128535, 128535], "valid", [], "NV8"], [[128536, 128536], "valid", [], "NV8"], [[128537, 128537], "valid", [], "NV8"], [[128538, 128538], "valid", [], "NV8"], [[128539, 128539], "valid", [], "NV8"], [[128540, 128542], "valid", [], "NV8"], [[128543, 128543], "valid", [], "NV8"], [[128544, 128549], "valid", [], "NV8"], [[128550, 128551], "valid", [], "NV8"], [[128552, 128555], "valid", [], "NV8"], [[128556, 128556], "valid", [], "NV8"], [[128557, 128557], "valid", [], "NV8"], [[128558, 128559], "valid", [], "NV8"], [[128560, 128563], "valid", [], "NV8"], [[128564, 128564], "valid", [], "NV8"], [[128565, 128576], "valid", [], "NV8"], [[128577, 128578], "valid", [], "NV8"], [[128579, 128580], "valid", [], "NV8"], [[128581, 128591], "valid", [], "NV8"], [[128592, 128639], "valid", [], "NV8"], [[128640, 128709], "valid", [], "NV8"], [[128710, 128719], "valid", [], "NV8"], [[128720, 128720], "valid", [], "NV8"], [[128721, 128735], "disallowed"], [[128736, 128748], "valid", [], "NV8"], [[128749, 128751], "disallowed"], [[128752, 128755], "valid", [], "NV8"], [[128756, 128767], "disallowed"], [[128768, 128883], "valid", [], "NV8"], [[128884, 128895], "disallowed"], [[128896, 128980], "valid", [], "NV8"], [[128981, 129023], "disallowed"], [[129024, 129035], "valid", [], "NV8"], [[129036, 129039], "disallowed"], [[129040, 129095], "valid", [], "NV8"], [[129096, 129103], "disallowed"], [[129104, 129113], "valid", [], "NV8"], [[129114, 129119], "disallowed"], [[129120, 129159], "valid", [], "NV8"], [[129160, 129167], "disallowed"], [[129168, 129197], "valid", [], "NV8"], [[129198, 129295], "disallowed"], [[129296, 129304], "valid", [], "NV8"], [[129305, 129407], "disallowed"], [[129408, 129412], "valid", [], "NV8"], [[129413, 129471], "disallowed"], [[129472, 129472], "valid", [], "NV8"], [[129473, 131069], "disallowed"], [[131070, 131071], "disallowed"], [[131072, 173782], "valid"], [[173783, 173823], "disallowed"], [[173824, 177972], "valid"], [[177973, 177983], "disallowed"], [[177984, 178205], "valid"], [[178206, 178207], "disallowed"], [[178208, 183969], "valid"], [[183970, 194559], "disallowed"], [[194560, 194560], "mapped", [20029]], [[194561, 194561], "mapped", [20024]], [[194562, 194562], "mapped", [20033]], [[194563, 194563], "mapped", [131362]], [[194564, 194564], "mapped", [20320]], [[194565, 194565], "mapped", [20398]], [[194566, 194566], "mapped", [20411]], [[194567, 194567], "mapped", [20482]], [[194568, 194568], "mapped", [20602]], [[194569, 194569], "mapped", [20633]], [[194570, 194570], "mapped", [20711]], [[194571, 194571], "mapped", [20687]], [[194572, 194572], "mapped", [13470]], [[194573, 194573], "mapped", [132666]], [[194574, 194574], "mapped", [20813]], [[194575, 194575], "mapped", [20820]], [[194576, 194576], "mapped", [20836]], [[194577, 194577], "mapped", [20855]], [[194578, 194578], "mapped", [132380]], [[194579, 194579], "mapped", [13497]], [[194580, 194580], "mapped", [20839]], [[194581, 194581], "mapped", [20877]], [[194582, 194582], "mapped", [132427]], [[194583, 194583], "mapped", [20887]], [[194584, 194584], "mapped", [20900]], [[194585, 194585], "mapped", [20172]], [[194586, 194586], "mapped", [20908]], [[194587, 194587], "mapped", [20917]], [[194588, 194588], "mapped", [168415]], [[194589, 194589], "mapped", [20981]], [[194590, 194590], "mapped", [20995]], [[194591, 194591], "mapped", [13535]], [[194592, 194592], "mapped", [21051]], [[194593, 194593], "mapped", [21062]], [[194594, 194594], "mapped", [21106]], [[194595, 194595], "mapped", [21111]], [[194596, 194596], "mapped", [13589]], [[194597, 194597], "mapped", [21191]], [[194598, 194598], "mapped", [21193]], [[194599, 194599], "mapped", [21220]], [[194600, 194600], "mapped", [21242]], [[194601, 194601], "mapped", [21253]], [[194602, 194602], "mapped", [21254]], [[194603, 194603], "mapped", [21271]], [[194604, 194604], "mapped", [21321]], [[194605, 194605], "mapped", [21329]], [[194606, 194606], "mapped", [21338]], [[194607, 194607], "mapped", [21363]], [[194608, 194608], "mapped", [21373]], [[194609, 194611], "mapped", [21375]], [[194612, 194612], "mapped", [133676]], [[194613, 194613], "mapped", [28784]], [[194614, 194614], "mapped", [21450]], [[194615, 194615], "mapped", [21471]], [[194616, 194616], "mapped", [133987]], [[194617, 194617], "mapped", [21483]], [[194618, 194618], "mapped", [21489]], [[194619, 194619], "mapped", [21510]], [[194620, 194620], "mapped", [21662]], [[194621, 194621], "mapped", [21560]], [[194622, 194622], "mapped", [21576]], [[194623, 194623], "mapped", [21608]], [[194624, 194624], "mapped", [21666]], [[194625, 194625], "mapped", [21750]], [[194626, 194626], "mapped", [21776]], [[194627, 194627], "mapped", [21843]], [[194628, 194628], "mapped", [21859]], [[194629, 194630], "mapped", [21892]], [[194631, 194631], "mapped", [21913]], [[194632, 194632], "mapped", [21931]], [[194633, 194633], "mapped", [21939]], [[194634, 194634], "mapped", [21954]], [[194635, 194635], "mapped", [22294]], [[194636, 194636], "mapped", [22022]], [[194637, 194637], "mapped", [22295]], [[194638, 194638], "mapped", [22097]], [[194639, 194639], "mapped", [22132]], [[194640, 194640], "mapped", [20999]], [[194641, 194641], "mapped", [22766]], [[194642, 194642], "mapped", [22478]], [[194643, 194643], "mapped", [22516]], [[194644, 194644], "mapped", [22541]], [[194645, 194645], "mapped", [22411]], [[194646, 194646], "mapped", [22578]], [[194647, 194647], "mapped", [22577]], [[194648, 194648], "mapped", [22700]], [[194649, 194649], "mapped", [136420]], [[194650, 194650], "mapped", [22770]], [[194651, 194651], "mapped", [22775]], [[194652, 194652], "mapped", [22790]], [[194653, 194653], "mapped", [22810]], [[194654, 194654], "mapped", [22818]], [[194655, 194655], "mapped", [22882]], [[194656, 194656], "mapped", [136872]], [[194657, 194657], "mapped", [136938]], [[194658, 194658], "mapped", [23020]], [[194659, 194659], "mapped", [23067]], [[194660, 194660], "mapped", [23079]], [[194661, 194661], "mapped", [23e3]], [[194662, 194662], "mapped", [23142]], [[194663, 194663], "mapped", [14062]], [[194664, 194664], "disallowed"], [[194665, 194665], "mapped", [23304]], [[194666, 194667], "mapped", [23358]], [[194668, 194668], "mapped", [137672]], [[194669, 194669], "mapped", [23491]], [[194670, 194670], "mapped", [23512]], [[194671, 194671], "mapped", [23527]], [[194672, 194672], "mapped", [23539]], [[194673, 194673], "mapped", [138008]], [[194674, 194674], "mapped", [23551]], [[194675, 194675], "mapped", [23558]], [[194676, 194676], "disallowed"], [[194677, 194677], "mapped", [23586]], [[194678, 194678], "mapped", [14209]], [[194679, 194679], "mapped", [23648]], [[194680, 194680], "mapped", [23662]], [[194681, 194681], "mapped", [23744]], [[194682, 194682], "mapped", [23693]], [[194683, 194683], "mapped", [138724]], [[194684, 194684], "mapped", [23875]], [[194685, 194685], "mapped", [138726]], [[194686, 194686], "mapped", [23918]], [[194687, 194687], "mapped", [23915]], [[194688, 194688], "mapped", [23932]], [[194689, 194689], "mapped", [24033]], [[194690, 194690], "mapped", [24034]], [[194691, 194691], "mapped", [14383]], [[194692, 194692], "mapped", [24061]], [[194693, 194693], "mapped", [24104]], [[194694, 194694], "mapped", [24125]], [[194695, 194695], "mapped", [24169]], [[194696, 194696], "mapped", [14434]], [[194697, 194697], "mapped", [139651]], [[194698, 194698], "mapped", [14460]], [[194699, 194699], "mapped", [24240]], [[194700, 194700], "mapped", [24243]], [[194701, 194701], "mapped", [24246]], [[194702, 194702], "mapped", [24266]], [[194703, 194703], "mapped", [172946]], [[194704, 194704], "mapped", [24318]], [[194705, 194706], "mapped", [140081]], [[194707, 194707], "mapped", [33281]], [[194708, 194709], "mapped", [24354]], [[194710, 194710], "mapped", [14535]], [[194711, 194711], "mapped", [144056]], [[194712, 194712], "mapped", [156122]], [[194713, 194713], "mapped", [24418]], [[194714, 194714], "mapped", [24427]], [[194715, 194715], "mapped", [14563]], [[194716, 194716], "mapped", [24474]], [[194717, 194717], "mapped", [24525]], [[194718, 194718], "mapped", [24535]], [[194719, 194719], "mapped", [24569]], [[194720, 194720], "mapped", [24705]], [[194721, 194721], "mapped", [14650]], [[194722, 194722], "mapped", [14620]], [[194723, 194723], "mapped", [24724]], [[194724, 194724], "mapped", [141012]], [[194725, 194725], "mapped", [24775]], [[194726, 194726], "mapped", [24904]], [[194727, 194727], "mapped", [24908]], [[194728, 194728], "mapped", [24910]], [[194729, 194729], "mapped", [24908]], [[194730, 194730], "mapped", [24954]], [[194731, 194731], "mapped", [24974]], [[194732, 194732], "mapped", [25010]], [[194733, 194733], "mapped", [24996]], [[194734, 194734], "mapped", [25007]], [[194735, 194735], "mapped", [25054]], [[194736, 194736], "mapped", [25074]], [[194737, 194737], "mapped", [25078]], [[194738, 194738], "mapped", [25104]], [[194739, 194739], "mapped", [25115]], [[194740, 194740], "mapped", [25181]], [[194741, 194741], "mapped", [25265]], [[194742, 194742], "mapped", [25300]], [[194743, 194743], "mapped", [25424]], [[194744, 194744], "mapped", [142092]], [[194745, 194745], "mapped", [25405]], [[194746, 194746], "mapped", [25340]], [[194747, 194747], "mapped", [25448]], [[194748, 194748], "mapped", [25475]], [[194749, 194749], "mapped", [25572]], [[194750, 194750], "mapped", [142321]], [[194751, 194751], "mapped", [25634]], [[194752, 194752], "mapped", [25541]], [[194753, 194753], "mapped", [25513]], [[194754, 194754], "mapped", [14894]], [[194755, 194755], "mapped", [25705]], [[194756, 194756], "mapped", [25726]], [[194757, 194757], "mapped", [25757]], [[194758, 194758], "mapped", [25719]], [[194759, 194759], "mapped", [14956]], [[194760, 194760], "mapped", [25935]], [[194761, 194761], "mapped", [25964]], [[194762, 194762], "mapped", [143370]], [[194763, 194763], "mapped", [26083]], [[194764, 194764], "mapped", [26360]], [[194765, 194765], "mapped", [26185]], [[194766, 194766], "mapped", [15129]], [[194767, 194767], "mapped", [26257]], [[194768, 194768], "mapped", [15112]], [[194769, 194769], "mapped", [15076]], [[194770, 194770], "mapped", [20882]], [[194771, 194771], "mapped", [20885]], [[194772, 194772], "mapped", [26368]], [[194773, 194773], "mapped", [26268]], [[194774, 194774], "mapped", [32941]], [[194775, 194775], "mapped", [17369]], [[194776, 194776], "mapped", [26391]], [[194777, 194777], "mapped", [26395]], [[194778, 194778], "mapped", [26401]], [[194779, 194779], "mapped", [26462]], [[194780, 194780], "mapped", [26451]], [[194781, 194781], "mapped", [144323]], [[194782, 194782], "mapped", [15177]], [[194783, 194783], "mapped", [26618]], [[194784, 194784], "mapped", [26501]], [[194785, 194785], "mapped", [26706]], [[194786, 194786], "mapped", [26757]], [[194787, 194787], "mapped", [144493]], [[194788, 194788], "mapped", [26766]], [[194789, 194789], "mapped", [26655]], [[194790, 194790], "mapped", [26900]], [[194791, 194791], "mapped", [15261]], [[194792, 194792], "mapped", [26946]], [[194793, 194793], "mapped", [27043]], [[194794, 194794], "mapped", [27114]], [[194795, 194795], "mapped", [27304]], [[194796, 194796], "mapped", [145059]], [[194797, 194797], "mapped", [27355]], [[194798, 194798], "mapped", [15384]], [[194799, 194799], "mapped", [27425]], [[194800, 194800], "mapped", [145575]], [[194801, 194801], "mapped", [27476]], [[194802, 194802], "mapped", [15438]], [[194803, 194803], "mapped", [27506]], [[194804, 194804], "mapped", [27551]], [[194805, 194805], "mapped", [27578]], [[194806, 194806], "mapped", [27579]], [[194807, 194807], "mapped", [146061]], [[194808, 194808], "mapped", [138507]], [[194809, 194809], "mapped", [146170]], [[194810, 194810], "mapped", [27726]], [[194811, 194811], "mapped", [146620]], [[194812, 194812], "mapped", [27839]], [[194813, 194813], "mapped", [27853]], [[194814, 194814], "mapped", [27751]], [[194815, 194815], "mapped", [27926]], [[194816, 194816], "mapped", [27966]], [[194817, 194817], "mapped", [28023]], [[194818, 194818], "mapped", [27969]], [[194819, 194819], "mapped", [28009]], [[194820, 194820], "mapped", [28024]], [[194821, 194821], "mapped", [28037]], [[194822, 194822], "mapped", [146718]], [[194823, 194823], "mapped", [27956]], [[194824, 194824], "mapped", [28207]], [[194825, 194825], "mapped", [28270]], [[194826, 194826], "mapped", [15667]], [[194827, 194827], "mapped", [28363]], [[194828, 194828], "mapped", [28359]], [[194829, 194829], "mapped", [147153]], [[194830, 194830], "mapped", [28153]], [[194831, 194831], "mapped", [28526]], [[194832, 194832], "mapped", [147294]], [[194833, 194833], "mapped", [147342]], [[194834, 194834], "mapped", [28614]], [[194835, 194835], "mapped", [28729]], [[194836, 194836], "mapped", [28702]], [[194837, 194837], "mapped", [28699]], [[194838, 194838], "mapped", [15766]], [[194839, 194839], "mapped", [28746]], [[194840, 194840], "mapped", [28797]], [[194841, 194841], "mapped", [28791]], [[194842, 194842], "mapped", [28845]], [[194843, 194843], "mapped", [132389]], [[194844, 194844], "mapped", [28997]], [[194845, 194845], "mapped", [148067]], [[194846, 194846], "mapped", [29084]], [[194847, 194847], "disallowed"], [[194848, 194848], "mapped", [29224]], [[194849, 194849], "mapped", [29237]], [[194850, 194850], "mapped", [29264]], [[194851, 194851], "mapped", [149e3]], [[194852, 194852], "mapped", [29312]], [[194853, 194853], "mapped", [29333]], [[194854, 194854], "mapped", [149301]], [[194855, 194855], "mapped", [149524]], [[194856, 194856], "mapped", [29562]], [[194857, 194857], "mapped", [29579]], [[194858, 194858], "mapped", [16044]], [[194859, 194859], "mapped", [29605]], [[194860, 194861], "mapped", [16056]], [[194862, 194862], "mapped", [29767]], [[194863, 194863], "mapped", [29788]], [[194864, 194864], "mapped", [29809]], [[194865, 194865], "mapped", [29829]], [[194866, 194866], "mapped", [29898]], [[194867, 194867], "mapped", [16155]], [[194868, 194868], "mapped", [29988]], [[194869, 194869], "mapped", [150582]], [[194870, 194870], "mapped", [30014]], [[194871, 194871], "mapped", [150674]], [[194872, 194872], "mapped", [30064]], [[194873, 194873], "mapped", [139679]], [[194874, 194874], "mapped", [30224]], [[194875, 194875], "mapped", [151457]], [[194876, 194876], "mapped", [151480]], [[194877, 194877], "mapped", [151620]], [[194878, 194878], "mapped", [16380]], [[194879, 194879], "mapped", [16392]], [[194880, 194880], "mapped", [30452]], [[194881, 194881], "mapped", [151795]], [[194882, 194882], "mapped", [151794]], [[194883, 194883], "mapped", [151833]], [[194884, 194884], "mapped", [151859]], [[194885, 194885], "mapped", [30494]], [[194886, 194887], "mapped", [30495]], [[194888, 194888], "mapped", [30538]], [[194889, 194889], "mapped", [16441]], [[194890, 194890], "mapped", [30603]], [[194891, 194891], "mapped", [16454]], [[194892, 194892], "mapped", [16534]], [[194893, 194893], "mapped", [152605]], [[194894, 194894], "mapped", [30798]], [[194895, 194895], "mapped", [30860]], [[194896, 194896], "mapped", [30924]], [[194897, 194897], "mapped", [16611]], [[194898, 194898], "mapped", [153126]], [[194899, 194899], "mapped", [31062]], [[194900, 194900], "mapped", [153242]], [[194901, 194901], "mapped", [153285]], [[194902, 194902], "mapped", [31119]], [[194903, 194903], "mapped", [31211]], [[194904, 194904], "mapped", [16687]], [[194905, 194905], "mapped", [31296]], [[194906, 194906], "mapped", [31306]], [[194907, 194907], "mapped", [31311]], [[194908, 194908], "mapped", [153980]], [[194909, 194910], "mapped", [154279]], [[194911, 194911], "disallowed"], [[194912, 194912], "mapped", [16898]], [[194913, 194913], "mapped", [154539]], [[194914, 194914], "mapped", [31686]], [[194915, 194915], "mapped", [31689]], [[194916, 194916], "mapped", [16935]], [[194917, 194917], "mapped", [154752]], [[194918, 194918], "mapped", [31954]], [[194919, 194919], "mapped", [17056]], [[194920, 194920], "mapped", [31976]], [[194921, 194921], "mapped", [31971]], [[194922, 194922], "mapped", [32e3]], [[194923, 194923], "mapped", [155526]], [[194924, 194924], "mapped", [32099]], [[194925, 194925], "mapped", [17153]], [[194926, 194926], "mapped", [32199]], [[194927, 194927], "mapped", [32258]], [[194928, 194928], "mapped", [32325]], [[194929, 194929], "mapped", [17204]], [[194930, 194930], "mapped", [156200]], [[194931, 194931], "mapped", [156231]], [[194932, 194932], "mapped", [17241]], [[194933, 194933], "mapped", [156377]], [[194934, 194934], "mapped", [32634]], [[194935, 194935], "mapped", [156478]], [[194936, 194936], "mapped", [32661]], [[194937, 194937], "mapped", [32762]], [[194938, 194938], "mapped", [32773]], [[194939, 194939], "mapped", [156890]], [[194940, 194940], "mapped", [156963]], [[194941, 194941], "mapped", [32864]], [[194942, 194942], "mapped", [157096]], [[194943, 194943], "mapped", [32880]], [[194944, 194944], "mapped", [144223]], [[194945, 194945], "mapped", [17365]], [[194946, 194946], "mapped", [32946]], [[194947, 194947], "mapped", [33027]], [[194948, 194948], "mapped", [17419]], [[194949, 194949], "mapped", [33086]], [[194950, 194950], "mapped", [23221]], [[194951, 194951], "mapped", [157607]], [[194952, 194952], "mapped", [157621]], [[194953, 194953], "mapped", [144275]], [[194954, 194954], "mapped", [144284]], [[194955, 194955], "mapped", [33281]], [[194956, 194956], "mapped", [33284]], [[194957, 194957], "mapped", [36766]], [[194958, 194958], "mapped", [17515]], [[194959, 194959], "mapped", [33425]], [[194960, 194960], "mapped", [33419]], [[194961, 194961], "mapped", [33437]], [[194962, 194962], "mapped", [21171]], [[194963, 194963], "mapped", [33457]], [[194964, 194964], "mapped", [33459]], [[194965, 194965], "mapped", [33469]], [[194966, 194966], "mapped", [33510]], [[194967, 194967], "mapped", [158524]], [[194968, 194968], "mapped", [33509]], [[194969, 194969], "mapped", [33565]], [[194970, 194970], "mapped", [33635]], [[194971, 194971], "mapped", [33709]], [[194972, 194972], "mapped", [33571]], [[194973, 194973], "mapped", [33725]], [[194974, 194974], "mapped", [33767]], [[194975, 194975], "mapped", [33879]], [[194976, 194976], "mapped", [33619]], [[194977, 194977], "mapped", [33738]], [[194978, 194978], "mapped", [33740]], [[194979, 194979], "mapped", [33756]], [[194980, 194980], "mapped", [158774]], [[194981, 194981], "mapped", [159083]], [[194982, 194982], "mapped", [158933]], [[194983, 194983], "mapped", [17707]], [[194984, 194984], "mapped", [34033]], [[194985, 194985], "mapped", [34035]], [[194986, 194986], "mapped", [34070]], [[194987, 194987], "mapped", [160714]], [[194988, 194988], "mapped", [34148]], [[194989, 194989], "mapped", [159532]], [[194990, 194990], "mapped", [17757]], [[194991, 194991], "mapped", [17761]], [[194992, 194992], "mapped", [159665]], [[194993, 194993], "mapped", [159954]], [[194994, 194994], "mapped", [17771]], [[194995, 194995], "mapped", [34384]], [[194996, 194996], "mapped", [34396]], [[194997, 194997], "mapped", [34407]], [[194998, 194998], "mapped", [34409]], [[194999, 194999], "mapped", [34473]], [[195e3, 195e3], "mapped", [34440]], [[195001, 195001], "mapped", [34574]], [[195002, 195002], "mapped", [34530]], [[195003, 195003], "mapped", [34681]], [[195004, 195004], "mapped", [34600]], [[195005, 195005], "mapped", [34667]], [[195006, 195006], "mapped", [34694]], [[195007, 195007], "disallowed"], [[195008, 195008], "mapped", [34785]], [[195009, 195009], "mapped", [34817]], [[195010, 195010], "mapped", [17913]], [[195011, 195011], "mapped", [34912]], [[195012, 195012], "mapped", [34915]], [[195013, 195013], "mapped", [161383]], [[195014, 195014], "mapped", [35031]], [[195015, 195015], "mapped", [35038]], [[195016, 195016], "mapped", [17973]], [[195017, 195017], "mapped", [35066]], [[195018, 195018], "mapped", [13499]], [[195019, 195019], "mapped", [161966]], [[195020, 195020], "mapped", [162150]], [[195021, 195021], "mapped", [18110]], [[195022, 195022], "mapped", [18119]], [[195023, 195023], "mapped", [35488]], [[195024, 195024], "mapped", [35565]], [[195025, 195025], "mapped", [35722]], [[195026, 195026], "mapped", [35925]], [[195027, 195027], "mapped", [162984]], [[195028, 195028], "mapped", [36011]], [[195029, 195029], "mapped", [36033]], [[195030, 195030], "mapped", [36123]], [[195031, 195031], "mapped", [36215]], [[195032, 195032], "mapped", [163631]], [[195033, 195033], "mapped", [133124]], [[195034, 195034], "mapped", [36299]], [[195035, 195035], "mapped", [36284]], [[195036, 195036], "mapped", [36336]], [[195037, 195037], "mapped", [133342]], [[195038, 195038], "mapped", [36564]], [[195039, 195039], "mapped", [36664]], [[195040, 195040], "mapped", [165330]], [[195041, 195041], "mapped", [165357]], [[195042, 195042], "mapped", [37012]], [[195043, 195043], "mapped", [37105]], [[195044, 195044], "mapped", [37137]], [[195045, 195045], "mapped", [165678]], [[195046, 195046], "mapped", [37147]], [[195047, 195047], "mapped", [37432]], [[195048, 195048], "mapped", [37591]], [[195049, 195049], "mapped", [37592]], [[195050, 195050], "mapped", [37500]], [[195051, 195051], "mapped", [37881]], [[195052, 195052], "mapped", [37909]], [[195053, 195053], "mapped", [166906]], [[195054, 195054], "mapped", [38283]], [[195055, 195055], "mapped", [18837]], [[195056, 195056], "mapped", [38327]], [[195057, 195057], "mapped", [167287]], [[195058, 195058], "mapped", [18918]], [[195059, 195059], "mapped", [38595]], [[195060, 195060], "mapped", [23986]], [[195061, 195061], "mapped", [38691]], [[195062, 195062], "mapped", [168261]], [[195063, 195063], "mapped", [168474]], [[195064, 195064], "mapped", [19054]], [[195065, 195065], "mapped", [19062]], [[195066, 195066], "mapped", [38880]], [[195067, 195067], "mapped", [168970]], [[195068, 195068], "mapped", [19122]], [[195069, 195069], "mapped", [169110]], [[195070, 195071], "mapped", [38923]], [[195072, 195072], "mapped", [38953]], [[195073, 195073], "mapped", [169398]], [[195074, 195074], "mapped", [39138]], [[195075, 195075], "mapped", [19251]], [[195076, 195076], "mapped", [39209]], [[195077, 195077], "mapped", [39335]], [[195078, 195078], "mapped", [39362]], [[195079, 195079], "mapped", [39422]], [[195080, 195080], "mapped", [19406]], [[195081, 195081], "mapped", [170800]], [[195082, 195082], "mapped", [39698]], [[195083, 195083], "mapped", [4e4]], [[195084, 195084], "mapped", [40189]], [[195085, 195085], "mapped", [19662]], [[195086, 195086], "mapped", [19693]], [[195087, 195087], "mapped", [40295]], [[195088, 195088], "mapped", [172238]], [[195089, 195089], "mapped", [19704]], [[195090, 195090], "mapped", [172293]], [[195091, 195091], "mapped", [172558]], [[195092, 195092], "mapped", [172689]], [[195093, 195093], "mapped", [40635]], [[195094, 195094], "mapped", [19798]], [[195095, 195095], "mapped", [40697]], [[195096, 195096], "mapped", [40702]], [[195097, 195097], "mapped", [40709]], [[195098, 195098], "mapped", [40719]], [[195099, 195099], "mapped", [40726]], [[195100, 195100], "mapped", [40763]], [[195101, 195101], "mapped", [173568]], [[195102, 196605], "disallowed"], [[196606, 196607], "disallowed"], [[196608, 262141], "disallowed"], [[262142, 262143], "disallowed"], [[262144, 327677], "disallowed"], [[327678, 327679], "disallowed"], [[327680, 393213], "disallowed"], [[393214, 393215], "disallowed"], [[393216, 458749], "disallowed"], [[458750, 458751], "disallowed"], [[458752, 524285], "disallowed"], [[524286, 524287], "disallowed"], [[524288, 589821], "disallowed"], [[589822, 589823], "disallowed"], [[589824, 655357], "disallowed"], [[655358, 655359], "disallowed"], [[655360, 720893], "disallowed"], [[720894, 720895], "disallowed"], [[720896, 786429], "disallowed"], [[786430, 786431], "disallowed"], [[786432, 851965], "disallowed"], [[851966, 851967], "disallowed"], [[851968, 917501], "disallowed"], [[917502, 917503], "disallowed"], [[917504, 917504], "disallowed"], [[917505, 917505], "disallowed"], [[917506, 917535], "disallowed"], [[917536, 917631], "disallowed"], [[917632, 917759], "disallowed"], [[917760, 917999], "ignored"], [[918e3, 983037], "disallowed"], [[983038, 983039], "disallowed"], [[983040, 1048573], "disallowed"], [[1048574, 1048575], "disallowed"], [[1048576, 1114109], "disallowed"], [[1114110, 1114111], "disallowed"]];
      }
    });
    var require_tr46 = __commonJS2({
      "node_modules/node-fetch/node_modules/tr46/index.js"(exports2, module22) {
        "use strict";
        var punycode = require("punycode");
        var mappingTable = require_mappingTable();
        var PROCESSING_OPTIONS = {
          TRANSITIONAL: 0,
          NONTRANSITIONAL: 1
        };
        function normalize(str) {
          return str.split("\0").map(function(s) {
            return s.normalize("NFC");
          }).join("\0");
        }
        function findStatus(val) {
          var start = 0;
          var end = mappingTable.length - 1;
          while (start <= end) {
            var mid = Math.floor((start + end) / 2);
            var target = mappingTable[mid];
            if (target[0][0] <= val && target[0][1] >= val) {
              return target;
            } else if (target[0][0] > val) {
              end = mid - 1;
            } else {
              start = mid + 1;
            }
          }
          return null;
        }
        var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
        function countSymbols(string) {
          return string.replace(regexAstralSymbols, "_").length;
        }
        function mapChars(domain_name, useSTD3, processing_option) {
          var hasError = false;
          var processed = "";
          var len = countSymbols(domain_name);
          for (var i = 0; i < len; ++i) {
            var codePoint = domain_name.codePointAt(i);
            var status = findStatus(codePoint);
            switch (status[1]) {
              case "disallowed":
                hasError = true;
                processed += String.fromCodePoint(codePoint);
                break;
              case "ignored":
                break;
              case "mapped":
                processed += String.fromCodePoint.apply(String, status[2]);
                break;
              case "deviation":
                if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {
                  processed += String.fromCodePoint.apply(String, status[2]);
                } else {
                  processed += String.fromCodePoint(codePoint);
                }
                break;
              case "valid":
                processed += String.fromCodePoint(codePoint);
                break;
              case "disallowed_STD3_mapped":
                if (useSTD3) {
                  hasError = true;
                  processed += String.fromCodePoint(codePoint);
                } else {
                  processed += String.fromCodePoint.apply(String, status[2]);
                }
                break;
              case "disallowed_STD3_valid":
                if (useSTD3) {
                  hasError = true;
                }
                processed += String.fromCodePoint(codePoint);
                break;
            }
          }
          return {
            string: processed,
            error: hasError
          };
        }
        var combiningMarksRegex = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;
        function validateLabel(label, processing_option) {
          if (label.substr(0, 4) === "xn--") {
            label = punycode.toUnicode(label);
            processing_option = PROCESSING_OPTIONS.NONTRANSITIONAL;
          }
          var error = false;
          if (normalize(label) !== label || label[3] === "-" && label[4] === "-" || label[0] === "-" || label[label.length - 1] === "-" || label.indexOf(".") !== -1 || label.search(combiningMarksRegex) === 0) {
            error = true;
          }
          var len = countSymbols(label);
          for (var i = 0; i < len; ++i) {
            var status = findStatus(label.codePointAt(i));
            if (processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== "valid" || processing === PROCESSING_OPTIONS.NONTRANSITIONAL && status[1] !== "valid" && status[1] !== "deviation") {
              error = true;
              break;
            }
          }
          return {
            label,
            error
          };
        }
        function processing(domain_name, useSTD3, processing_option) {
          var result = mapChars(domain_name, useSTD3, processing_option);
          result.string = normalize(result.string);
          var labels = result.string.split(".");
          for (var i = 0; i < labels.length; ++i) {
            try {
              var validation = validateLabel(labels[i]);
              labels[i] = validation.label;
              result.error = result.error || validation.error;
            } catch (e) {
              result.error = true;
            }
          }
          return {
            string: labels.join("."),
            error: result.error
          };
        }
        module22.exports.toASCII = function(domain_name, useSTD3, processing_option, verifyDnsLength) {
          var result = processing(domain_name, useSTD3, processing_option);
          var labels = result.string.split(".");
          labels = labels.map(function(l) {
            try {
              return punycode.toASCII(l);
            } catch (e) {
              result.error = true;
              return l;
            }
          });
          if (verifyDnsLength) {
            var total = labels.slice(0, labels.length - 1).join(".").length;
            if (total.length > 253 || total.length === 0) {
              result.error = true;
            }
            for (var i = 0; i < labels.length; ++i) {
              if (labels.length > 63 || labels.length === 0) {
                result.error = true;
                break;
              }
            }
          }
          if (result.error)
            return null;
          return labels.join(".");
        };
        module22.exports.toUnicode = function(domain_name, useSTD3) {
          var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);
          return {
            domain: result.string,
            error: result.error
          };
        };
        module22.exports.PROCESSING_OPTIONS = PROCESSING_OPTIONS;
      }
    });
    var require_url_state_machine = __commonJS2({
      "node_modules/node-fetch/node_modules/whatwg-url/lib/url-state-machine.js"(exports2, module22) {
        "use strict";
        var punycode = require("punycode");
        var tr46 = require_tr46();
        var specialSchemes = {
          ftp: 21,
          file: null,
          gopher: 70,
          http: 80,
          https: 443,
          ws: 80,
          wss: 443
        };
        var failure = Symbol("failure");
        function countSymbols(str) {
          return punycode.ucs2.decode(str).length;
        }
        function at(input, idx) {
          const c = input[idx];
          return isNaN(c) ? void 0 : String.fromCodePoint(c);
        }
        function isASCIIDigit(c) {
          return c >= 48 && c <= 57;
        }
        function isASCIIAlpha(c) {
          return c >= 65 && c <= 90 || c >= 97 && c <= 122;
        }
        function isASCIIAlphanumeric(c) {
          return isASCIIAlpha(c) || isASCIIDigit(c);
        }
        function isASCIIHex(c) {
          return isASCIIDigit(c) || c >= 65 && c <= 70 || c >= 97 && c <= 102;
        }
        function isSingleDot(buffer) {
          return buffer === "." || buffer.toLowerCase() === "%2e";
        }
        function isDoubleDot(buffer) {
          buffer = buffer.toLowerCase();
          return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
        }
        function isWindowsDriveLetterCodePoints(cp1, cp2) {
          return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
        }
        function isWindowsDriveLetterString(string) {
          return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
        }
        function isNormalizedWindowsDriveLetterString(string) {
          return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
        }
        function containsForbiddenHostCodePoint(string) {
          return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
        }
        function containsForbiddenHostCodePointExcludingPercent(string) {
          return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
        }
        function isSpecialScheme(scheme) {
          return specialSchemes[scheme] !== void 0;
        }
        function isSpecial(url) {
          return isSpecialScheme(url.scheme);
        }
        function defaultPort(scheme) {
          return specialSchemes[scheme];
        }
        function percentEncode(c) {
          let hex = c.toString(16).toUpperCase();
          if (hex.length === 1) {
            hex = "0" + hex;
          }
          return "%" + hex;
        }
        function utf8PercentEncode(c) {
          const buf = new Buffer(c);
          let str = "";
          for (let i = 0; i < buf.length; ++i) {
            str += percentEncode(buf[i]);
          }
          return str;
        }
        function utf8PercentDecode(str) {
          const input = new Buffer(str);
          const output = [];
          for (let i = 0; i < input.length; ++i) {
            if (input[i] !== 37) {
              output.push(input[i]);
            } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {
              output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));
              i += 2;
            } else {
              output.push(input[i]);
            }
          }
          return new Buffer(output).toString();
        }
        function isC0ControlPercentEncode(c) {
          return c <= 31 || c > 126;
        }
        var extraPathPercentEncodeSet = /* @__PURE__ */ new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
        function isPathPercentEncode(c) {
          return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);
        }
        var extraUserinfoPercentEncodeSet = /* @__PURE__ */ new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
        function isUserinfoPercentEncode(c) {
          return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
        }
        function percentEncodeChar(c, encodeSetPredicate) {
          const cStr = String.fromCodePoint(c);
          if (encodeSetPredicate(c)) {
            return utf8PercentEncode(cStr);
          }
          return cStr;
        }
        function parseIPv4Number(input) {
          let R = 10;
          if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
            input = input.substring(2);
            R = 16;
          } else if (input.length >= 2 && input.charAt(0) === "0") {
            input = input.substring(1);
            R = 8;
          }
          if (input === "") {
            return 0;
          }
          const regex = R === 10 ? /[^0-9]/ : R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/;
          if (regex.test(input)) {
            return failure;
          }
          return parseInt(input, R);
        }
        function parseIPv4(input) {
          const parts = input.split(".");
          if (parts[parts.length - 1] === "") {
            if (parts.length > 1) {
              parts.pop();
            }
          }
          if (parts.length > 4) {
            return input;
          }
          const numbers = [];
          for (const part of parts) {
            if (part === "") {
              return input;
            }
            const n = parseIPv4Number(part);
            if (n === failure) {
              return input;
            }
            numbers.push(n);
          }
          for (let i = 0; i < numbers.length - 1; ++i) {
            if (numbers[i] > 255) {
              return failure;
            }
          }
          if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
            return failure;
          }
          let ipv4 = numbers.pop();
          let counter = 0;
          for (const n of numbers) {
            ipv4 += n * Math.pow(256, 3 - counter);
            ++counter;
          }
          return ipv4;
        }
        function serializeIPv4(address) {
          let output = "";
          let n = address;
          for (let i = 1; i <= 4; ++i) {
            output = String(n % 256) + output;
            if (i !== 4) {
              output = "." + output;
            }
            n = Math.floor(n / 256);
          }
          return output;
        }
        function parseIPv6(input) {
          const address = [0, 0, 0, 0, 0, 0, 0, 0];
          let pieceIndex = 0;
          let compress = null;
          let pointer = 0;
          input = punycode.ucs2.decode(input);
          if (input[pointer] === 58) {
            if (input[pointer + 1] !== 58) {
              return failure;
            }
            pointer += 2;
            ++pieceIndex;
            compress = pieceIndex;
          }
          while (pointer < input.length) {
            if (pieceIndex === 8) {
              return failure;
            }
            if (input[pointer] === 58) {
              if (compress !== null) {
                return failure;
              }
              ++pointer;
              ++pieceIndex;
              compress = pieceIndex;
              continue;
            }
            let value = 0;
            let length = 0;
            while (length < 4 && isASCIIHex(input[pointer])) {
              value = value * 16 + parseInt(at(input, pointer), 16);
              ++pointer;
              ++length;
            }
            if (input[pointer] === 46) {
              if (length === 0) {
                return failure;
              }
              pointer -= length;
              if (pieceIndex > 6) {
                return failure;
              }
              let numbersSeen = 0;
              while (input[pointer] !== void 0) {
                let ipv4Piece = null;
                if (numbersSeen > 0) {
                  if (input[pointer] === 46 && numbersSeen < 4) {
                    ++pointer;
                  } else {
                    return failure;
                  }
                }
                if (!isASCIIDigit(input[pointer])) {
                  return failure;
                }
                while (isASCIIDigit(input[pointer])) {
                  const number = parseInt(at(input, pointer));
                  if (ipv4Piece === null) {
                    ipv4Piece = number;
                  } else if (ipv4Piece === 0) {
                    return failure;
                  } else {
                    ipv4Piece = ipv4Piece * 10 + number;
                  }
                  if (ipv4Piece > 255) {
                    return failure;
                  }
                  ++pointer;
                }
                address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
                ++numbersSeen;
                if (numbersSeen === 2 || numbersSeen === 4) {
                  ++pieceIndex;
                }
              }
              if (numbersSeen !== 4) {
                return failure;
              }
              break;
            } else if (input[pointer] === 58) {
              ++pointer;
              if (input[pointer] === void 0) {
                return failure;
              }
            } else if (input[pointer] !== void 0) {
              return failure;
            }
            address[pieceIndex] = value;
            ++pieceIndex;
          }
          if (compress !== null) {
            let swaps = pieceIndex - compress;
            pieceIndex = 7;
            while (pieceIndex !== 0 && swaps > 0) {
              const temp = address[compress + swaps - 1];
              address[compress + swaps - 1] = address[pieceIndex];
              address[pieceIndex] = temp;
              --pieceIndex;
              --swaps;
            }
          } else if (compress === null && pieceIndex !== 8) {
            return failure;
          }
          return address;
        }
        function serializeIPv6(address) {
          let output = "";
          const seqResult = findLongestZeroSequence(address);
          const compress = seqResult.idx;
          let ignore0 = false;
          for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
            if (ignore0 && address[pieceIndex] === 0) {
              continue;
            } else if (ignore0) {
              ignore0 = false;
            }
            if (compress === pieceIndex) {
              const separator = pieceIndex === 0 ? "::" : ":";
              output += separator;
              ignore0 = true;
              continue;
            }
            output += address[pieceIndex].toString(16);
            if (pieceIndex !== 7) {
              output += ":";
            }
          }
          return output;
        }
        function parseHost(input, isSpecialArg) {
          if (input[0] === "[") {
            if (input[input.length - 1] !== "]") {
              return failure;
            }
            return parseIPv6(input.substring(1, input.length - 1));
          }
          if (!isSpecialArg) {
            return parseOpaqueHost(input);
          }
          const domain = utf8PercentDecode(input);
          const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
          if (asciiDomain === null) {
            return failure;
          }
          if (containsForbiddenHostCodePoint(asciiDomain)) {
            return failure;
          }
          const ipv4Host = parseIPv4(asciiDomain);
          if (typeof ipv4Host === "number" || ipv4Host === failure) {
            return ipv4Host;
          }
          return asciiDomain;
        }
        function parseOpaqueHost(input) {
          if (containsForbiddenHostCodePointExcludingPercent(input)) {
            return failure;
          }
          let output = "";
          const decoded = punycode.ucs2.decode(input);
          for (let i = 0; i < decoded.length; ++i) {
            output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);
          }
          return output;
        }
        function findLongestZeroSequence(arr) {
          let maxIdx = null;
          let maxLen = 1;
          let currStart = null;
          let currLen = 0;
          for (let i = 0; i < arr.length; ++i) {
            if (arr[i] !== 0) {
              if (currLen > maxLen) {
                maxIdx = currStart;
                maxLen = currLen;
              }
              currStart = null;
              currLen = 0;
            } else {
              if (currStart === null) {
                currStart = i;
              }
              ++currLen;
            }
          }
          if (currLen > maxLen) {
            maxIdx = currStart;
            maxLen = currLen;
          }
          return {
            idx: maxIdx,
            len: maxLen
          };
        }
        function serializeHost(host) {
          if (typeof host === "number") {
            return serializeIPv4(host);
          }
          if (host instanceof Array) {
            return "[" + serializeIPv6(host) + "]";
          }
          return host;
        }
        function trimControlChars(url) {
          return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
        }
        function trimTabAndNewline(url) {
          return url.replace(/\u0009|\u000A|\u000D/g, "");
        }
        function shortenPath(url) {
          const path = url.path;
          if (path.length === 0) {
            return;
          }
          if (url.scheme === "file" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {
            return;
          }
          path.pop();
        }
        function includesCredentials(url) {
          return url.username !== "" || url.password !== "";
        }
        function cannotHaveAUsernamePasswordPort(url) {
          return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
        }
        function isNormalizedWindowsDriveLetter(string) {
          return /^[A-Za-z]:$/.test(string);
        }
        function URLStateMachine(input, base, encodingOverride, url, stateOverride) {
          this.pointer = 0;
          this.input = input;
          this.base = base || null;
          this.encodingOverride = encodingOverride || "utf-8";
          this.stateOverride = stateOverride;
          this.url = url;
          this.failure = false;
          this.parseError = false;
          if (!this.url) {
            this.url = {
              scheme: "",
              username: "",
              password: "",
              host: null,
              port: null,
              path: [],
              query: null,
              fragment: null,
              cannotBeABaseURL: false
            };
            const res2 = trimControlChars(this.input);
            if (res2 !== this.input) {
              this.parseError = true;
            }
            this.input = res2;
          }
          const res = trimTabAndNewline(this.input);
          if (res !== this.input) {
            this.parseError = true;
          }
          this.input = res;
          this.state = stateOverride || "scheme start";
          this.buffer = "";
          this.atFlag = false;
          this.arrFlag = false;
          this.passwordTokenSeenFlag = false;
          this.input = punycode.ucs2.decode(this.input);
          for (; this.pointer <= this.input.length; ++this.pointer) {
            const c = this.input[this.pointer];
            const cStr = isNaN(c) ? void 0 : String.fromCodePoint(c);
            const ret = this["parse " + this.state](c, cStr);
            if (!ret) {
              break;
            } else if (ret === failure) {
              this.failure = true;
              break;
            }
          }
        }
        URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
          if (isASCIIAlpha(c)) {
            this.buffer += cStr.toLowerCase();
            this.state = "scheme";
          } else if (!this.stateOverride) {
            this.state = "no scheme";
            --this.pointer;
          } else {
            this.parseError = true;
            return failure;
          }
          return true;
        };
        URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
          if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
            this.buffer += cStr.toLowerCase();
          } else if (c === 58) {
            if (this.stateOverride) {
              if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
                return false;
              }
              if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
                return false;
              }
              if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
                return false;
              }
              if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
                return false;
              }
            }
            this.url.scheme = this.buffer;
            this.buffer = "";
            if (this.stateOverride) {
              return false;
            }
            if (this.url.scheme === "file") {
              if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
                this.parseError = true;
              }
              this.state = "file";
            } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
              this.state = "special relative or authority";
            } else if (isSpecial(this.url)) {
              this.state = "special authority slashes";
            } else if (this.input[this.pointer + 1] === 47) {
              this.state = "path or authority";
              ++this.pointer;
            } else {
              this.url.cannotBeABaseURL = true;
              this.url.path.push("");
              this.state = "cannot-be-a-base-URL path";
            }
          } else if (!this.stateOverride) {
            this.buffer = "";
            this.state = "no scheme";
            this.pointer = -1;
          } else {
            this.parseError = true;
            return failure;
          }
          return true;
        };
        URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
          if (this.base === null || this.base.cannotBeABaseURL && c !== 35) {
            return failure;
          } else if (this.base.cannotBeABaseURL && c === 35) {
            this.url.scheme = this.base.scheme;
            this.url.path = this.base.path.slice();
            this.url.query = this.base.query;
            this.url.fragment = "";
            this.url.cannotBeABaseURL = true;
            this.state = "fragment";
          } else if (this.base.scheme === "file") {
            this.state = "file";
            --this.pointer;
          } else {
            this.state = "relative";
            --this.pointer;
          }
          return true;
        };
        URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
          if (c === 47 && this.input[this.pointer + 1] === 47) {
            this.state = "special authority ignore slashes";
            ++this.pointer;
          } else {
            this.parseError = true;
            this.state = "relative";
            --this.pointer;
          }
          return true;
        };
        URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
          if (c === 47) {
            this.state = "authority";
          } else {
            this.state = "path";
            --this.pointer;
          }
          return true;
        };
        URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
          this.url.scheme = this.base.scheme;
          if (isNaN(c)) {
            this.url.username = this.base.username;
            this.url.password = this.base.password;
            this.url.host = this.base.host;
            this.url.port = this.base.port;
            this.url.path = this.base.path.slice();
            this.url.query = this.base.query;
          } else if (c === 47) {
            this.state = "relative slash";
          } else if (c === 63) {
            this.url.username = this.base.username;
            this.url.password = this.base.password;
            this.url.host = this.base.host;
            this.url.port = this.base.port;
            this.url.path = this.base.path.slice();
            this.url.query = "";
            this.state = "query";
          } else if (c === 35) {
            this.url.username = this.base.username;
            this.url.password = this.base.password;
            this.url.host = this.base.host;
            this.url.port = this.base.port;
            this.url.path = this.base.path.slice();
            this.url.query = this.base.query;
            this.url.fragment = "";
            this.state = "fragment";
          } else if (isSpecial(this.url) && c === 92) {
            this.parseError = true;
            this.state = "relative slash";
          } else {
            this.url.username = this.base.username;
            this.url.password = this.base.password;
            this.url.host = this.base.host;
            this.url.port = this.base.port;
            this.url.path = this.base.path.slice(0, this.base.path.length - 1);
            this.state = "path";
            --this.pointer;
          }
          return true;
        };
        URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
          if (isSpecial(this.url) && (c === 47 || c === 92)) {
            if (c === 92) {
              this.parseError = true;
            }
            this.state = "special authority ignore slashes";
          } else if (c === 47) {
            this.state = "authority";
          } else {
            this.url.username = this.base.username;
            this.url.password = this.base.password;
            this.url.host = this.base.host;
            this.url.port = this.base.port;
            this.state = "path";
            --this.pointer;
          }
          return true;
        };
        URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
          if (c === 47 && this.input[this.pointer + 1] === 47) {
            this.state = "special authority ignore slashes";
            ++this.pointer;
          } else {
            this.parseError = true;
            this.state = "special authority ignore slashes";
            --this.pointer;
          }
          return true;
        };
        URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
          if (c !== 47 && c !== 92) {
            this.state = "authority";
            --this.pointer;
          } else {
            this.parseError = true;
          }
          return true;
        };
        URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
          if (c === 64) {
            this.parseError = true;
            if (this.atFlag) {
              this.buffer = "%40" + this.buffer;
            }
            this.atFlag = true;
            const len = countSymbols(this.buffer);
            for (let pointer = 0; pointer < len; ++pointer) {
              const codePoint = this.buffer.codePointAt(pointer);
              if (codePoint === 58 && !this.passwordTokenSeenFlag) {
                this.passwordTokenSeenFlag = true;
                continue;
              }
              const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);
              if (this.passwordTokenSeenFlag) {
                this.url.password += encodedCodePoints;
              } else {
                this.url.username += encodedCodePoints;
              }
            }
            this.buffer = "";
          } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
            if (this.atFlag && this.buffer === "") {
              this.parseError = true;
              return failure;
            }
            this.pointer -= countSymbols(this.buffer) + 1;
            this.buffer = "";
            this.state = "host";
          } else {
            this.buffer += cStr;
          }
          return true;
        };
        URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
          if (this.stateOverride && this.url.scheme === "file") {
            --this.pointer;
            this.state = "file host";
          } else if (c === 58 && !this.arrFlag) {
            if (this.buffer === "") {
              this.parseError = true;
              return failure;
            }
            const host = parseHost(this.buffer, isSpecial(this.url));
            if (host === failure) {
              return failure;
            }
            this.url.host = host;
            this.buffer = "";
            this.state = "port";
            if (this.stateOverride === "hostname") {
              return false;
            }
          } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
            --this.pointer;
            if (isSpecial(this.url) && this.buffer === "") {
              this.parseError = true;
              return failure;
            } else if (this.stateOverride && this.buffer === "" && (includesCredentials(this.url) || this.url.port !== null)) {
              this.parseError = true;
              return false;
            }
            const host = parseHost(this.buffer, isSpecial(this.url));
            if (host === failure) {
              return failure;
            }
            this.url.host = host;
            this.buffer = "";
            this.state = "path start";
            if (this.stateOverride) {
              return false;
            }
          } else {
            if (c === 91) {
              this.arrFlag = true;
            } else if (c === 93) {
              this.arrFlag = false;
            }
            this.buffer += cStr;
          }
          return true;
        };
        URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
          if (isASCIIDigit(c)) {
            this.buffer += cStr;
          } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92 || this.stateOverride) {
            if (this.buffer !== "") {
              const port = parseInt(this.buffer);
              if (port > Math.pow(2, 16) - 1) {
                this.parseError = true;
                return failure;
              }
              this.url.port = port === defaultPort(this.url.scheme) ? null : port;
              this.buffer = "";
            }
            if (this.stateOverride) {
              return false;
            }
            this.state = "path start";
            --this.pointer;
          } else {
            this.parseError = true;
            return failure;
          }
          return true;
        };
        var fileOtherwiseCodePoints = /* @__PURE__ */ new Set([47, 92, 63, 35]);
        URLStateMachine.prototype["parse file"] = function parseFile(c) {
          this.url.scheme = "file";
          if (c === 47 || c === 92) {
            if (c === 92) {
              this.parseError = true;
            }
            this.state = "file slash";
          } else if (this.base !== null && this.base.scheme === "file") {
            if (isNaN(c)) {
              this.url.host = this.base.host;
              this.url.path = this.base.path.slice();
              this.url.query = this.base.query;
            } else if (c === 63) {
              this.url.host = this.base.host;
              this.url.path = this.base.path.slice();
              this.url.query = "";
              this.state = "query";
            } else if (c === 35) {
              this.url.host = this.base.host;
              this.url.path = this.base.path.slice();
              this.url.query = this.base.query;
              this.url.fragment = "";
              this.state = "fragment";
            } else {
              if (this.input.length - this.pointer - 1 === 0 || !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) || this.input.length - this.pointer - 1 >= 2 && !fileOtherwiseCodePoints.has(this.input[this.pointer + 2])) {
                this.url.host = this.base.host;
                this.url.path = this.base.path.slice();
                shortenPath(this.url);
              } else {
                this.parseError = true;
              }
              this.state = "path";
              --this.pointer;
            }
          } else {
            this.state = "path";
            --this.pointer;
          }
          return true;
        };
        URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
          if (c === 47 || c === 92) {
            if (c === 92) {
              this.parseError = true;
            }
            this.state = "file host";
          } else {
            if (this.base !== null && this.base.scheme === "file") {
              if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
                this.url.path.push(this.base.path[0]);
              } else {
                this.url.host = this.base.host;
              }
            }
            this.state = "path";
            --this.pointer;
          }
          return true;
        };
        URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
          if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
            --this.pointer;
            if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
              this.parseError = true;
              this.state = "path";
            } else if (this.buffer === "") {
              this.url.host = "";
              if (this.stateOverride) {
                return false;
              }
              this.state = "path start";
            } else {
              let host = parseHost(this.buffer, isSpecial(this.url));
              if (host === failure) {
                return failure;
              }
              if (host === "localhost") {
                host = "";
              }
              this.url.host = host;
              if (this.stateOverride) {
                return false;
              }
              this.buffer = "";
              this.state = "path start";
            }
          } else {
            this.buffer += cStr;
          }
          return true;
        };
        URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
          if (isSpecial(this.url)) {
            if (c === 92) {
              this.parseError = true;
            }
            this.state = "path";
            if (c !== 47 && c !== 92) {
              --this.pointer;
            }
          } else if (!this.stateOverride && c === 63) {
            this.url.query = "";
            this.state = "query";
          } else if (!this.stateOverride && c === 35) {
            this.url.fragment = "";
            this.state = "fragment";
          } else if (c !== void 0) {
            this.state = "path";
            if (c !== 47) {
              --this.pointer;
            }
          }
          return true;
        };
        URLStateMachine.prototype["parse path"] = function parsePath(c) {
          if (isNaN(c) || c === 47 || isSpecial(this.url) && c === 92 || !this.stateOverride && (c === 63 || c === 35)) {
            if (isSpecial(this.url) && c === 92) {
              this.parseError = true;
            }
            if (isDoubleDot(this.buffer)) {
              shortenPath(this.url);
              if (c !== 47 && !(isSpecial(this.url) && c === 92)) {
                this.url.path.push("");
              }
            } else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial(this.url) && c === 92)) {
              this.url.path.push("");
            } else if (!isSingleDot(this.buffer)) {
              if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
                if (this.url.host !== "" && this.url.host !== null) {
                  this.parseError = true;
                  this.url.host = "";
                }
                this.buffer = this.buffer[0] + ":";
              }
              this.url.path.push(this.buffer);
            }
            this.buffer = "";
            if (this.url.scheme === "file" && (c === void 0 || c === 63 || c === 35)) {
              while (this.url.path.length > 1 && this.url.path[0] === "") {
                this.parseError = true;
                this.url.path.shift();
              }
            }
            if (c === 63) {
              this.url.query = "";
              this.state = "query";
            }
            if (c === 35) {
              this.url.fragment = "";
              this.state = "fragment";
            }
          } else {
            if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
              this.parseError = true;
            }
            this.buffer += percentEncodeChar(c, isPathPercentEncode);
          }
          return true;
        };
        URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c) {
          if (c === 63) {
            this.url.query = "";
            this.state = "query";
          } else if (c === 35) {
            this.url.fragment = "";
            this.state = "fragment";
          } else {
            if (!isNaN(c) && c !== 37) {
              this.parseError = true;
            }
            if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
              this.parseError = true;
            }
            if (!isNaN(c)) {
              this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);
            }
          }
          return true;
        };
        URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
          if (isNaN(c) || !this.stateOverride && c === 35) {
            if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
              this.encodingOverride = "utf-8";
            }
            const buffer = new Buffer(this.buffer);
            for (let i = 0; i < buffer.length; ++i) {
              if (buffer[i] < 33 || buffer[i] > 126 || buffer[i] === 34 || buffer[i] === 35 || buffer[i] === 60 || buffer[i] === 62) {
                this.url.query += percentEncode(buffer[i]);
              } else {
                this.url.query += String.fromCodePoint(buffer[i]);
              }
            }
            this.buffer = "";
            if (c === 35) {
              this.url.fragment = "";
              this.state = "fragment";
            }
          } else {
            if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
              this.parseError = true;
            }
            this.buffer += cStr;
          }
          return true;
        };
        URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
          if (isNaN(c)) {
          } else if (c === 0) {
            this.parseError = true;
          } else {
            if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
              this.parseError = true;
            }
            this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);
          }
          return true;
        };
        function serializeURL(url, excludeFragment) {
          let output = url.scheme + ":";
          if (url.host !== null) {
            output += "//";
            if (url.username !== "" || url.password !== "") {
              output += url.username;
              if (url.password !== "") {
                output += ":" + url.password;
              }
              output += "@";
            }
            output += serializeHost(url.host);
            if (url.port !== null) {
              output += ":" + url.port;
            }
          } else if (url.host === null && url.scheme === "file") {
            output += "//";
          }
          if (url.cannotBeABaseURL) {
            output += url.path[0];
          } else {
            for (const string of url.path) {
              output += "/" + string;
            }
          }
          if (url.query !== null) {
            output += "?" + url.query;
          }
          if (!excludeFragment && url.fragment !== null) {
            output += "#" + url.fragment;
          }
          return output;
        }
        function serializeOrigin(tuple) {
          let result = tuple.scheme + "://";
          result += serializeHost(tuple.host);
          if (tuple.port !== null) {
            result += ":" + tuple.port;
          }
          return result;
        }
        module22.exports.serializeURL = serializeURL;
        module22.exports.serializeURLOrigin = function(url) {
          switch (url.scheme) {
            case "blob":
              try {
                return module22.exports.serializeURLOrigin(module22.exports.parseURL(url.path[0]));
              } catch (e) {
                return "null";
              }
            case "ftp":
            case "gopher":
            case "http":
            case "https":
            case "ws":
            case "wss":
              return serializeOrigin({
                scheme: url.scheme,
                host: url.host,
                port: url.port
              });
            case "file":
              return "file://";
            default:
              return "null";
          }
        };
        module22.exports.basicURLParse = function(input, options) {
          if (options === void 0) {
            options = {};
          }
          const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
          if (usm.failure) {
            return "failure";
          }
          return usm.url;
        };
        module22.exports.setTheUsername = function(url, username) {
          url.username = "";
          const decoded = punycode.ucs2.decode(username);
          for (let i = 0; i < decoded.length; ++i) {
            url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
          }
        };
        module22.exports.setThePassword = function(url, password) {
          url.password = "";
          const decoded = punycode.ucs2.decode(password);
          for (let i = 0; i < decoded.length; ++i) {
            url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
          }
        };
        module22.exports.serializeHost = serializeHost;
        module22.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;
        module22.exports.serializeInteger = function(integer) {
          return String(integer);
        };
        module22.exports.parseURL = function(input, options) {
          if (options === void 0) {
            options = {};
          }
          return module22.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });
        };
      }
    });
    var require_URL_impl = __commonJS2({
      "node_modules/node-fetch/node_modules/whatwg-url/lib/URL-impl.js"(exports2) {
        "use strict";
        var usm = require_url_state_machine();
        exports2.implementation = class URLImpl {
          constructor(constructorArgs) {
            const url = constructorArgs[0];
            const base = constructorArgs[1];
            let parsedBase = null;
            if (base !== void 0) {
              parsedBase = usm.basicURLParse(base);
              if (parsedBase === "failure") {
                throw new TypeError("Invalid base URL");
              }
            }
            const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });
            if (parsedURL === "failure") {
              throw new TypeError("Invalid URL");
            }
            this._url = parsedURL;
          }
          get href() {
            return usm.serializeURL(this._url);
          }
          set href(v) {
            const parsedURL = usm.basicURLParse(v);
            if (parsedURL === "failure") {
              throw new TypeError("Invalid URL");
            }
            this._url = parsedURL;
          }
          get origin() {
            return usm.serializeURLOrigin(this._url);
          }
          get protocol() {
            return this._url.scheme + ":";
          }
          set protocol(v) {
            usm.basicURLParse(v + ":", { url: this._url, stateOverride: "scheme start" });
          }
          get username() {
            return this._url.username;
          }
          set username(v) {
            if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
              return;
            }
            usm.setTheUsername(this._url, v);
          }
          get password() {
            return this._url.password;
          }
          set password(v) {
            if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
              return;
            }
            usm.setThePassword(this._url, v);
          }
          get host() {
            const url = this._url;
            if (url.host === null) {
              return "";
            }
            if (url.port === null) {
              return usm.serializeHost(url.host);
            }
            return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port);
          }
          set host(v) {
            if (this._url.cannotBeABaseURL) {
              return;
            }
            usm.basicURLParse(v, { url: this._url, stateOverride: "host" });
          }
          get hostname() {
            if (this._url.host === null) {
              return "";
            }
            return usm.serializeHost(this._url.host);
          }
          set hostname(v) {
            if (this._url.cannotBeABaseURL) {
              return;
            }
            usm.basicURLParse(v, { url: this._url, stateOverride: "hostname" });
          }
          get port() {
            if (this._url.port === null) {
              return "";
            }
            return usm.serializeInteger(this._url.port);
          }
          set port(v) {
            if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
              return;
            }
            if (v === "") {
              this._url.port = null;
            } else {
              usm.basicURLParse(v, { url: this._url, stateOverride: "port" });
            }
          }
          get pathname() {
            if (this._url.cannotBeABaseURL) {
              return this._url.path[0];
            }
            if (this._url.path.length === 0) {
              return "";
            }
            return "/" + this._url.path.join("/");
          }
          set pathname(v) {
            if (this._url.cannotBeABaseURL) {
              return;
            }
            this._url.path = [];
            usm.basicURLParse(v, { url: this._url, stateOverride: "path start" });
          }
          get search() {
            if (this._url.query === null || this._url.query === "") {
              return "";
            }
            return "?" + this._url.query;
          }
          set search(v) {
            const url = this._url;
            if (v === "") {
              url.query = null;
              return;
            }
            const input = v[0] === "?" ? v.substring(1) : v;
            url.query = "";
            usm.basicURLParse(input, { url, stateOverride: "query" });
          }
          get hash() {
            if (this._url.fragment === null || this._url.fragment === "") {
              return "";
            }
            return "#" + this._url.fragment;
          }
          set hash(v) {
            if (v === "") {
              this._url.fragment = null;
              return;
            }
            const input = v[0] === "#" ? v.substring(1) : v;
            this._url.fragment = "";
            usm.basicURLParse(input, { url: this._url, stateOverride: "fragment" });
          }
          toJSON() {
            return this.href;
          }
        };
      }
    });
    var require_URL = __commonJS2({
      "node_modules/node-fetch/node_modules/whatwg-url/lib/URL.js"(exports2, module22) {
        "use strict";
        var conversions = require_lib2();
        var utils = require_utils2();
        var Impl = require_URL_impl();
        var impl = utils.implSymbol;
        function URL3(url) {
          if (!this || this[impl] || !(this instanceof URL3)) {
            throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
          }
          if (arguments.length < 1) {
            throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
          }
          const args = [];
          for (let i = 0; i < arguments.length && i < 2; ++i) {
            args[i] = arguments[i];
          }
          args[0] = conversions["USVString"](args[0]);
          if (args[1] !== void 0) {
            args[1] = conversions["USVString"](args[1]);
          }
          module22.exports.setup(this, args);
        }
        URL3.prototype.toJSON = function toJSON() {
          if (!this || !module22.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }
          const args = [];
          for (let i = 0; i < arguments.length && i < 0; ++i) {
            args[i] = arguments[i];
          }
          return this[impl].toJSON.apply(this[impl], args);
        };
        Object.defineProperty(URL3.prototype, "href", {
          get() {
            return this[impl].href;
          },
          set(V) {
            V = conversions["USVString"](V);
            this[impl].href = V;
          },
          enumerable: true,
          configurable: true
        });
        URL3.prototype.toString = function() {
          if (!this || !module22.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }
          return this.href;
        };
        Object.defineProperty(URL3.prototype, "origin", {
          get() {
            return this[impl].origin;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(URL3.prototype, "protocol", {
          get() {
            return this[impl].protocol;
          },
          set(V) {
            V = conversions["USVString"](V);
            this[impl].protocol = V;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(URL3.prototype, "username", {
          get() {
            return this[impl].username;
          },
          set(V) {
            V = conversions["USVString"](V);
            this[impl].username = V;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(URL3.prototype, "password", {
          get() {
            return this[impl].password;
          },
          set(V) {
            V = conversions["USVString"](V);
            this[impl].password = V;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(URL3.prototype, "host", {
          get() {
            return this[impl].host;
          },
          set(V) {
            V = conversions["USVString"](V);
            this[impl].host = V;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(URL3.prototype, "hostname", {
          get() {
            return this[impl].hostname;
          },
          set(V) {
            V = conversions["USVString"](V);
            this[impl].hostname = V;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(URL3.prototype, "port", {
          get() {
            return this[impl].port;
          },
          set(V) {
            V = conversions["USVString"](V);
            this[impl].port = V;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(URL3.prototype, "pathname", {
          get() {
            return this[impl].pathname;
          },
          set(V) {
            V = conversions["USVString"](V);
            this[impl].pathname = V;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(URL3.prototype, "search", {
          get() {
            return this[impl].search;
          },
          set(V) {
            V = conversions["USVString"](V);
            this[impl].search = V;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(URL3.prototype, "hash", {
          get() {
            return this[impl].hash;
          },
          set(V) {
            V = conversions["USVString"](V);
            this[impl].hash = V;
          },
          enumerable: true,
          configurable: true
        });
        module22.exports = {
          is(obj) {
            return !!obj && obj[impl] instanceof Impl.implementation;
          },
          create(constructorArgs, privateData) {
            let obj = Object.create(URL3.prototype);
            this.setup(obj, constructorArgs, privateData);
            return obj;
          },
          setup(obj, constructorArgs, privateData) {
            if (!privateData)
              privateData = {};
            privateData.wrapper = obj;
            obj[impl] = new Impl.implementation(constructorArgs, privateData);
            obj[impl][utils.wrapperSymbol] = obj;
          },
          interface: URL3,
          expose: {
            Window: { URL: URL3 },
            Worker: { URL: URL3 }
          }
        };
      }
    });
    var require_public_api = __commonJS2({
      "node_modules/node-fetch/node_modules/whatwg-url/lib/public-api.js"(exports2) {
        "use strict";
        exports2.URL = require_URL().interface;
        exports2.serializeURL = require_url_state_machine().serializeURL;
        exports2.serializeURLOrigin = require_url_state_machine().serializeURLOrigin;
        exports2.basicURLParse = require_url_state_machine().basicURLParse;
        exports2.setTheUsername = require_url_state_machine().setTheUsername;
        exports2.setThePassword = require_url_state_machine().setThePassword;
        exports2.serializeHost = require_url_state_machine().serializeHost;
        exports2.serializeInteger = require_url_state_machine().serializeInteger;
        exports2.parseURL = require_url_state_machine().parseURL;
      }
    });
    var require_lib22 = __commonJS2({
      "node_modules/node-fetch/lib/index.js"(exports2, module22) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        function _interopDefault(ex) {
          return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
        }
        var Stream = _interopDefault(require("stream"));
        var http = _interopDefault(require("http"));
        var Url = _interopDefault(require("url"));
        var whatwgUrl = _interopDefault(require_public_api());
        var https = _interopDefault(require("https"));
        var zlib = _interopDefault(require("zlib"));
        var Readable = Stream.Readable;
        var BUFFER = Symbol("buffer");
        var TYPE = Symbol("type");
        var Blob = class {
          constructor() {
            this[TYPE] = "";
            const blobParts = arguments[0];
            const options = arguments[1];
            const buffers = [];
            let size = 0;
            if (blobParts) {
              const a = blobParts;
              const length = Number(a.length);
              for (let i = 0; i < length; i++) {
                const element = a[i];
                let buffer;
                if (element instanceof Buffer) {
                  buffer = element;
                } else if (ArrayBuffer.isView(element)) {
                  buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
                } else if (element instanceof ArrayBuffer) {
                  buffer = Buffer.from(element);
                } else if (element instanceof Blob) {
                  buffer = element[BUFFER];
                } else {
                  buffer = Buffer.from(typeof element === "string" ? element : String(element));
                }
                size += buffer.length;
                buffers.push(buffer);
              }
            }
            this[BUFFER] = Buffer.concat(buffers);
            let type = options && options.type !== void 0 && String(options.type).toLowerCase();
            if (type && !/[^\u0020-\u007E]/.test(type)) {
              this[TYPE] = type;
            }
          }
          get size() {
            return this[BUFFER].length;
          }
          get type() {
            return this[TYPE];
          }
          text() {
            return Promise.resolve(this[BUFFER].toString());
          }
          arrayBuffer() {
            const buf = this[BUFFER];
            const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
            return Promise.resolve(ab);
          }
          stream() {
            const readable = new Readable();
            readable._read = function() {
            };
            readable.push(this[BUFFER]);
            readable.push(null);
            return readable;
          }
          toString() {
            return "[object Blob]";
          }
          slice() {
            const size = this.size;
            const start = arguments[0];
            const end = arguments[1];
            let relativeStart, relativeEnd;
            if (start === void 0) {
              relativeStart = 0;
            } else if (start < 0) {
              relativeStart = Math.max(size + start, 0);
            } else {
              relativeStart = Math.min(start, size);
            }
            if (end === void 0) {
              relativeEnd = size;
            } else if (end < 0) {
              relativeEnd = Math.max(size + end, 0);
            } else {
              relativeEnd = Math.min(end, size);
            }
            const span = Math.max(relativeEnd - relativeStart, 0);
            const buffer = this[BUFFER];
            const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
            const blob = new Blob([], { type: arguments[2] });
            blob[BUFFER] = slicedBuffer;
            return blob;
          }
        };
        Object.defineProperties(Blob.prototype, {
          size: { enumerable: true },
          type: { enumerable: true },
          slice: { enumerable: true }
        });
        Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
          value: "Blob",
          writable: false,
          enumerable: false,
          configurable: true
        });
        function FetchError(message, type, systemError) {
          Error.call(this, message);
          this.message = message;
          this.type = type;
          if (systemError) {
            this.code = this.errno = systemError.code;
          }
          Error.captureStackTrace(this, this.constructor);
        }
        FetchError.prototype = Object.create(Error.prototype);
        FetchError.prototype.constructor = FetchError;
        FetchError.prototype.name = "FetchError";
        var convert;
        try {
          convert = require("encoding").convert;
        } catch (e) {
        }
        var INTERNALS = Symbol("Body internals");
        var PassThrough = Stream.PassThrough;
        function Body(body) {
          var _this = this;
          var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$size = _ref.size;
          let size = _ref$size === void 0 ? 0 : _ref$size;
          var _ref$timeout = _ref.timeout;
          let timeout = _ref$timeout === void 0 ? 0 : _ref$timeout;
          if (body == null) {
            body = null;
          } else if (isURLSearchParams(body)) {
            body = Buffer.from(body.toString());
          } else if (isBlob(body))
            ;
          else if (Buffer.isBuffer(body))
            ;
          else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
            body = Buffer.from(body);
          } else if (ArrayBuffer.isView(body)) {
            body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
          } else if (body instanceof Stream)
            ;
          else {
            body = Buffer.from(String(body));
          }
          this[INTERNALS] = {
            body,
            disturbed: false,
            error: null
          };
          this.size = size;
          this.timeout = timeout;
          if (body instanceof Stream) {
            body.on("error", function(err) {
              const error = err.name === "AbortError" ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, "system", err);
              _this[INTERNALS].error = error;
            });
          }
        }
        Body.prototype = {
          get body() {
            return this[INTERNALS].body;
          },
          get bodyUsed() {
            return this[INTERNALS].disturbed;
          },
          arrayBuffer() {
            return consumeBody.call(this).then(function(buf) {
              return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
            });
          },
          blob() {
            let ct = this.headers && this.headers.get("content-type") || "";
            return consumeBody.call(this).then(function(buf) {
              return Object.assign(new Blob([], {
                type: ct.toLowerCase()
              }), {
                [BUFFER]: buf
              });
            });
          },
          json() {
            var _this2 = this;
            return consumeBody.call(this).then(function(buffer) {
              try {
                return JSON.parse(buffer.toString());
              } catch (err) {
                return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, "invalid-json"));
              }
            });
          },
          text() {
            return consumeBody.call(this).then(function(buffer) {
              return buffer.toString();
            });
          },
          buffer() {
            return consumeBody.call(this);
          },
          textConverted() {
            var _this3 = this;
            return consumeBody.call(this).then(function(buffer) {
              return convertBody(buffer, _this3.headers);
            });
          }
        };
        Object.defineProperties(Body.prototype, {
          body: { enumerable: true },
          bodyUsed: { enumerable: true },
          arrayBuffer: { enumerable: true },
          blob: { enumerable: true },
          json: { enumerable: true },
          text: { enumerable: true }
        });
        Body.mixIn = function(proto) {
          for (const name2 of Object.getOwnPropertyNames(Body.prototype)) {
            if (!(name2 in proto)) {
              const desc = Object.getOwnPropertyDescriptor(Body.prototype, name2);
              Object.defineProperty(proto, name2, desc);
            }
          }
        };
        function consumeBody() {
          var _this4 = this;
          if (this[INTERNALS].disturbed) {
            return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
          }
          this[INTERNALS].disturbed = true;
          if (this[INTERNALS].error) {
            return Body.Promise.reject(this[INTERNALS].error);
          }
          let body = this.body;
          if (body === null) {
            return Body.Promise.resolve(Buffer.alloc(0));
          }
          if (isBlob(body)) {
            body = body.stream();
          }
          if (Buffer.isBuffer(body)) {
            return Body.Promise.resolve(body);
          }
          if (!(body instanceof Stream)) {
            return Body.Promise.resolve(Buffer.alloc(0));
          }
          let accum = [];
          let accumBytes = 0;
          let abort = false;
          return new Body.Promise(function(resolve, reject) {
            let resTimeout;
            if (_this4.timeout) {
              resTimeout = setTimeout(function() {
                abort = true;
                reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, "body-timeout"));
              }, _this4.timeout);
            }
            body.on("error", function(err) {
              if (err.name === "AbortError") {
                abort = true;
                reject(err);
              } else {
                reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, "system", err));
              }
            });
            body.on("data", function(chunk) {
              if (abort || chunk === null) {
                return;
              }
              if (_this4.size && accumBytes + chunk.length > _this4.size) {
                abort = true;
                reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, "max-size"));
                return;
              }
              accumBytes += chunk.length;
              accum.push(chunk);
            });
            body.on("end", function() {
              if (abort) {
                return;
              }
              clearTimeout(resTimeout);
              try {
                resolve(Buffer.concat(accum, accumBytes));
              } catch (err) {
                reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, "system", err));
              }
            });
          });
        }
        function convertBody(buffer, headers) {
          if (typeof convert !== "function") {
            throw new Error("The package `encoding` must be installed to use the textConverted() function");
          }
          const ct = headers.get("content-type");
          let charset = "utf-8";
          let res, str;
          if (ct) {
            res = /charset=([^;]*)/i.exec(ct);
          }
          str = buffer.slice(0, 1024).toString();
          if (!res && str) {
            res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
          }
          if (!res && str) {
            res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
            if (!res) {
              res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
              if (res) {
                res.pop();
              }
            }
            if (res) {
              res = /charset=(.*)/i.exec(res.pop());
            }
          }
          if (!res && str) {
            res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
          }
          if (res) {
            charset = res.pop();
            if (charset === "gb2312" || charset === "gbk") {
              charset = "gb18030";
            }
          }
          return convert(buffer, "UTF-8", charset).toString();
        }
        function isURLSearchParams(obj) {
          if (typeof obj !== "object" || typeof obj.append !== "function" || typeof obj.delete !== "function" || typeof obj.get !== "function" || typeof obj.getAll !== "function" || typeof obj.has !== "function" || typeof obj.set !== "function") {
            return false;
          }
          return obj.constructor.name === "URLSearchParams" || Object.prototype.toString.call(obj) === "[object URLSearchParams]" || typeof obj.sort === "function";
        }
        function isBlob(obj) {
          return typeof obj === "object" && typeof obj.arrayBuffer === "function" && typeof obj.type === "string" && typeof obj.stream === "function" && typeof obj.constructor === "function" && typeof obj.constructor.name === "string" && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
        }
        function clone(instance) {
          let p1, p2;
          let body = instance.body;
          if (instance.bodyUsed) {
            throw new Error("cannot clone body after it is used");
          }
          if (body instanceof Stream && typeof body.getBoundary !== "function") {
            p1 = new PassThrough();
            p2 = new PassThrough();
            body.pipe(p1);
            body.pipe(p2);
            instance[INTERNALS].body = p1;
            body = p2;
          }
          return body;
        }
        function extractContentType(body) {
          if (body === null) {
            return null;
          } else if (typeof body === "string") {
            return "text/plain;charset=UTF-8";
          } else if (isURLSearchParams(body)) {
            return "application/x-www-form-urlencoded;charset=UTF-8";
          } else if (isBlob(body)) {
            return body.type || null;
          } else if (Buffer.isBuffer(body)) {
            return null;
          } else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
            return null;
          } else if (ArrayBuffer.isView(body)) {
            return null;
          } else if (typeof body.getBoundary === "function") {
            return `multipart/form-data;boundary=${body.getBoundary()}`;
          } else if (body instanceof Stream) {
            return null;
          } else {
            return "text/plain;charset=UTF-8";
          }
        }
        function getTotalBytes(instance) {
          const body = instance.body;
          if (body === null) {
            return 0;
          } else if (isBlob(body)) {
            return body.size;
          } else if (Buffer.isBuffer(body)) {
            return body.length;
          } else if (body && typeof body.getLengthSync === "function") {
            if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || body.hasKnownLength && body.hasKnownLength()) {
              return body.getLengthSync();
            }
            return null;
          } else {
            return null;
          }
        }
        function writeToStream(dest, instance) {
          const body = instance.body;
          if (body === null) {
            dest.end();
          } else if (isBlob(body)) {
            body.stream().pipe(dest);
          } else if (Buffer.isBuffer(body)) {
            dest.write(body);
            dest.end();
          } else {
            body.pipe(dest);
          }
        }
        Body.Promise = global.Promise;
        var invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
        var invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
        function validateName(name2) {
          name2 = `${name2}`;
          if (invalidTokenRegex.test(name2) || name2 === "") {
            throw new TypeError(`${name2} is not a legal HTTP header name`);
          }
        }
        function validateValue(value) {
          value = `${value}`;
          if (invalidHeaderCharRegex.test(value)) {
            throw new TypeError(`${value} is not a legal HTTP header value`);
          }
        }
        function find(map, name2) {
          name2 = name2.toLowerCase();
          for (const key in map) {
            if (key.toLowerCase() === name2) {
              return key;
            }
          }
          return void 0;
        }
        var MAP = Symbol("map");
        var Headers = class {
          constructor() {
            let init = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
            this[MAP] = /* @__PURE__ */ Object.create(null);
            if (init instanceof Headers) {
              const rawHeaders = init.raw();
              const headerNames = Object.keys(rawHeaders);
              for (const headerName of headerNames) {
                for (const value of rawHeaders[headerName]) {
                  this.append(headerName, value);
                }
              }
              return;
            }
            if (init == null)
              ;
            else if (typeof init === "object") {
              const method = init[Symbol.iterator];
              if (method != null) {
                if (typeof method !== "function") {
                  throw new TypeError("Header pairs must be iterable");
                }
                const pairs = [];
                for (const pair of init) {
                  if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
                    throw new TypeError("Each header pair must be iterable");
                  }
                  pairs.push(Array.from(pair));
                }
                for (const pair of pairs) {
                  if (pair.length !== 2) {
                    throw new TypeError("Each header pair must be a name/value tuple");
                  }
                  this.append(pair[0], pair[1]);
                }
              } else {
                for (const key of Object.keys(init)) {
                  const value = init[key];
                  this.append(key, value);
                }
              }
            } else {
              throw new TypeError("Provided initializer must be an object");
            }
          }
          get(name2) {
            name2 = `${name2}`;
            validateName(name2);
            const key = find(this[MAP], name2);
            if (key === void 0) {
              return null;
            }
            return this[MAP][key].join(", ");
          }
          forEach(callback) {
            let thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
            let pairs = getHeaders(this);
            let i = 0;
            while (i < pairs.length) {
              var _pairs$i = pairs[i];
              const name2 = _pairs$i[0], value = _pairs$i[1];
              callback.call(thisArg, value, name2, this);
              pairs = getHeaders(this);
              i++;
            }
          }
          set(name2, value) {
            name2 = `${name2}`;
            value = `${value}`;
            validateName(name2);
            validateValue(value);
            const key = find(this[MAP], name2);
            this[MAP][key !== void 0 ? key : name2] = [value];
          }
          append(name2, value) {
            name2 = `${name2}`;
            value = `${value}`;
            validateName(name2);
            validateValue(value);
            const key = find(this[MAP], name2);
            if (key !== void 0) {
              this[MAP][key].push(value);
            } else {
              this[MAP][name2] = [value];
            }
          }
          has(name2) {
            name2 = `${name2}`;
            validateName(name2);
            return find(this[MAP], name2) !== void 0;
          }
          delete(name2) {
            name2 = `${name2}`;
            validateName(name2);
            const key = find(this[MAP], name2);
            if (key !== void 0) {
              delete this[MAP][key];
            }
          }
          raw() {
            return this[MAP];
          }
          keys() {
            return createHeadersIterator(this, "key");
          }
          values() {
            return createHeadersIterator(this, "value");
          }
          [Symbol.iterator]() {
            return createHeadersIterator(this, "key+value");
          }
        };
        Headers.prototype.entries = Headers.prototype[Symbol.iterator];
        Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
          value: "Headers",
          writable: false,
          enumerable: false,
          configurable: true
        });
        Object.defineProperties(Headers.prototype, {
          get: { enumerable: true },
          forEach: { enumerable: true },
          set: { enumerable: true },
          append: { enumerable: true },
          has: { enumerable: true },
          delete: { enumerable: true },
          keys: { enumerable: true },
          values: { enumerable: true },
          entries: { enumerable: true }
        });
        function getHeaders(headers) {
          let kind = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
          const keys = Object.keys(headers[MAP]).sort();
          return keys.map(kind === "key" ? function(k) {
            return k.toLowerCase();
          } : kind === "value" ? function(k) {
            return headers[MAP][k].join(", ");
          } : function(k) {
            return [k.toLowerCase(), headers[MAP][k].join(", ")];
          });
        }
        var INTERNAL = Symbol("internal");
        function createHeadersIterator(target, kind) {
          const iterator = Object.create(HeadersIteratorPrototype);
          iterator[INTERNAL] = {
            target,
            kind,
            index: 0
          };
          return iterator;
        }
        var HeadersIteratorPrototype = Object.setPrototypeOf({
          next() {
            if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
              throw new TypeError("Value of `this` is not a HeadersIterator");
            }
            var _INTERNAL = this[INTERNAL];
            const target = _INTERNAL.target, kind = _INTERNAL.kind, index = _INTERNAL.index;
            const values = getHeaders(target, kind);
            const len = values.length;
            if (index >= len) {
              return {
                value: void 0,
                done: true
              };
            }
            this[INTERNAL].index = index + 1;
            return {
              value: values[index],
              done: false
            };
          }
        }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
        Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
          value: "HeadersIterator",
          writable: false,
          enumerable: false,
          configurable: true
        });
        function exportNodeCompatibleHeaders(headers) {
          const obj = Object.assign({ __proto__: null }, headers[MAP]);
          const hostHeaderKey = find(headers[MAP], "Host");
          if (hostHeaderKey !== void 0) {
            obj[hostHeaderKey] = obj[hostHeaderKey][0];
          }
          return obj;
        }
        function createHeadersLenient(obj) {
          const headers = new Headers();
          for (const name2 of Object.keys(obj)) {
            if (invalidTokenRegex.test(name2)) {
              continue;
            }
            if (Array.isArray(obj[name2])) {
              for (const val of obj[name2]) {
                if (invalidHeaderCharRegex.test(val)) {
                  continue;
                }
                if (headers[MAP][name2] === void 0) {
                  headers[MAP][name2] = [val];
                } else {
                  headers[MAP][name2].push(val);
                }
              }
            } else if (!invalidHeaderCharRegex.test(obj[name2])) {
              headers[MAP][name2] = [obj[name2]];
            }
          }
          return headers;
        }
        var INTERNALS$1 = Symbol("Response internals");
        var STATUS_CODES = http.STATUS_CODES;
        var Response = class {
          constructor() {
            let body = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            Body.call(this, body, opts);
            const status = opts.status || 200;
            const headers = new Headers(opts.headers);
            if (body != null && !headers.has("Content-Type")) {
              const contentType = extractContentType(body);
              if (contentType) {
                headers.append("Content-Type", contentType);
              }
            }
            this[INTERNALS$1] = {
              url: opts.url,
              status,
              statusText: opts.statusText || STATUS_CODES[status],
              headers,
              counter: opts.counter
            };
          }
          get url() {
            return this[INTERNALS$1].url || "";
          }
          get status() {
            return this[INTERNALS$1].status;
          }
          get ok() {
            return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
          }
          get redirected() {
            return this[INTERNALS$1].counter > 0;
          }
          get statusText() {
            return this[INTERNALS$1].statusText;
          }
          get headers() {
            return this[INTERNALS$1].headers;
          }
          clone() {
            return new Response(clone(this), {
              url: this.url,
              status: this.status,
              statusText: this.statusText,
              headers: this.headers,
              ok: this.ok,
              redirected: this.redirected
            });
          }
        };
        Body.mixIn(Response.prototype);
        Object.defineProperties(Response.prototype, {
          url: { enumerable: true },
          status: { enumerable: true },
          ok: { enumerable: true },
          redirected: { enumerable: true },
          statusText: { enumerable: true },
          headers: { enumerable: true },
          clone: { enumerable: true }
        });
        Object.defineProperty(Response.prototype, Symbol.toStringTag, {
          value: "Response",
          writable: false,
          enumerable: false,
          configurable: true
        });
        var INTERNALS$2 = Symbol("Request internals");
        var URL3 = Url.URL || whatwgUrl.URL;
        var parse_url = Url.parse;
        var format_url = Url.format;
        function parseURL(urlStr) {
          if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
            urlStr = new URL3(urlStr).toString();
          }
          return parse_url(urlStr);
        }
        var streamDestructionSupported = "destroy" in Stream.Readable.prototype;
        function isRequest(input) {
          return typeof input === "object" && typeof input[INTERNALS$2] === "object";
        }
        function isAbortSignal(signal) {
          const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal);
          return !!(proto && proto.constructor.name === "AbortSignal");
        }
        var Request = class {
          constructor(input) {
            let init = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            let parsedURL;
            if (!isRequest(input)) {
              if (input && input.href) {
                parsedURL = parseURL(input.href);
              } else {
                parsedURL = parseURL(`${input}`);
              }
              input = {};
            } else {
              parsedURL = parseURL(input.url);
            }
            let method = init.method || input.method || "GET";
            method = method.toUpperCase();
            if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
              throw new TypeError("Request with GET/HEAD method cannot have body");
            }
            let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
            Body.call(this, inputBody, {
              timeout: init.timeout || input.timeout || 0,
              size: init.size || input.size || 0
            });
            const headers = new Headers(init.headers || input.headers || {});
            if (inputBody != null && !headers.has("Content-Type")) {
              const contentType = extractContentType(inputBody);
              if (contentType) {
                headers.append("Content-Type", contentType);
              }
            }
            let signal = isRequest(input) ? input.signal : null;
            if ("signal" in init)
              signal = init.signal;
            if (signal != null && !isAbortSignal(signal)) {
              throw new TypeError("Expected signal to be an instanceof AbortSignal");
            }
            this[INTERNALS$2] = {
              method,
              redirect: init.redirect || input.redirect || "follow",
              headers,
              parsedURL,
              signal
            };
            this.follow = init.follow !== void 0 ? init.follow : input.follow !== void 0 ? input.follow : 20;
            this.compress = init.compress !== void 0 ? init.compress : input.compress !== void 0 ? input.compress : true;
            this.counter = init.counter || input.counter || 0;
            this.agent = init.agent || input.agent;
          }
          get method() {
            return this[INTERNALS$2].method;
          }
          get url() {
            return format_url(this[INTERNALS$2].parsedURL);
          }
          get headers() {
            return this[INTERNALS$2].headers;
          }
          get redirect() {
            return this[INTERNALS$2].redirect;
          }
          get signal() {
            return this[INTERNALS$2].signal;
          }
          clone() {
            return new Request(this);
          }
        };
        Body.mixIn(Request.prototype);
        Object.defineProperty(Request.prototype, Symbol.toStringTag, {
          value: "Request",
          writable: false,
          enumerable: false,
          configurable: true
        });
        Object.defineProperties(Request.prototype, {
          method: { enumerable: true },
          url: { enumerable: true },
          headers: { enumerable: true },
          redirect: { enumerable: true },
          clone: { enumerable: true },
          signal: { enumerable: true }
        });
        function getNodeRequestOptions(request) {
          const parsedURL = request[INTERNALS$2].parsedURL;
          const headers = new Headers(request[INTERNALS$2].headers);
          if (!headers.has("Accept")) {
            headers.set("Accept", "*/*");
          }
          if (!parsedURL.protocol || !parsedURL.hostname) {
            throw new TypeError("Only absolute URLs are supported");
          }
          if (!/^https?:$/.test(parsedURL.protocol)) {
            throw new TypeError("Only HTTP(S) protocols are supported");
          }
          if (request.signal && request.body instanceof Stream.Readable && !streamDestructionSupported) {
            throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
          }
          let contentLengthValue = null;
          if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
            contentLengthValue = "0";
          }
          if (request.body != null) {
            const totalBytes = getTotalBytes(request);
            if (typeof totalBytes === "number") {
              contentLengthValue = String(totalBytes);
            }
          }
          if (contentLengthValue) {
            headers.set("Content-Length", contentLengthValue);
          }
          if (!headers.has("User-Agent")) {
            headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)");
          }
          if (request.compress && !headers.has("Accept-Encoding")) {
            headers.set("Accept-Encoding", "gzip,deflate");
          }
          let agent = request.agent;
          if (typeof agent === "function") {
            agent = agent(parsedURL);
          }
          if (!headers.has("Connection") && !agent) {
            headers.set("Connection", "close");
          }
          return Object.assign({}, parsedURL, {
            method: request.method,
            headers: exportNodeCompatibleHeaders(headers),
            agent
          });
        }
        function AbortError(message) {
          Error.call(this, message);
          this.type = "aborted";
          this.message = message;
          Error.captureStackTrace(this, this.constructor);
        }
        AbortError.prototype = Object.create(Error.prototype);
        AbortError.prototype.constructor = AbortError;
        AbortError.prototype.name = "AbortError";
        var URL$1 = Url.URL || whatwgUrl.URL;
        var PassThrough$1 = Stream.PassThrough;
        var isDomainOrSubdomain = function isDomainOrSubdomain2(destination, original) {
          const orig = new URL$1(original).hostname;
          const dest = new URL$1(destination).hostname;
          return orig === dest || orig[orig.length - dest.length - 1] === "." && orig.endsWith(dest);
        };
        function fetch(url, opts) {
          if (!fetch.Promise) {
            throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
          }
          Body.Promise = fetch.Promise;
          return new fetch.Promise(function(resolve, reject) {
            const request = new Request(url, opts);
            const options = getNodeRequestOptions(request);
            const send = (options.protocol === "https:" ? https : http).request;
            const signal = request.signal;
            let response = null;
            const abort = function abort2() {
              let error = new AbortError("The user aborted a request.");
              reject(error);
              if (request.body && request.body instanceof Stream.Readable) {
                request.body.destroy(error);
              }
              if (!response || !response.body)
                return;
              response.body.emit("error", error);
            };
            if (signal && signal.aborted) {
              abort();
              return;
            }
            const abortAndFinalize = function abortAndFinalize2() {
              abort();
              finalize();
            };
            const req = send(options);
            let reqTimeout;
            if (signal) {
              signal.addEventListener("abort", abortAndFinalize);
            }
            function finalize() {
              req.abort();
              if (signal)
                signal.removeEventListener("abort", abortAndFinalize);
              clearTimeout(reqTimeout);
            }
            if (request.timeout) {
              req.once("socket", function(socket) {
                reqTimeout = setTimeout(function() {
                  reject(new FetchError(`network timeout at: ${request.url}`, "request-timeout"));
                  finalize();
                }, request.timeout);
              });
            }
            req.on("error", function(err) {
              reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, "system", err));
              finalize();
            });
            req.on("response", function(res) {
              clearTimeout(reqTimeout);
              const headers = createHeadersLenient(res.headers);
              if (fetch.isRedirect(res.statusCode)) {
                const location = headers.get("Location");
                let locationURL = null;
                try {
                  locationURL = location === null ? null : new URL$1(location, request.url).toString();
                } catch (err) {
                  if (request.redirect !== "manual") {
                    reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, "invalid-redirect"));
                    finalize();
                    return;
                  }
                }
                switch (request.redirect) {
                  case "error":
                    reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
                    finalize();
                    return;
                  case "manual":
                    if (locationURL !== null) {
                      try {
                        headers.set("Location", locationURL);
                      } catch (err) {
                        reject(err);
                      }
                    }
                    break;
                  case "follow":
                    if (locationURL === null) {
                      break;
                    }
                    if (request.counter >= request.follow) {
                      reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
                      finalize();
                      return;
                    }
                    const requestOpts = {
                      headers: new Headers(request.headers),
                      follow: request.follow,
                      counter: request.counter + 1,
                      agent: request.agent,
                      compress: request.compress,
                      method: request.method,
                      body: request.body,
                      signal: request.signal,
                      timeout: request.timeout,
                      size: request.size
                    };
                    if (!isDomainOrSubdomain(request.url, locationURL)) {
                      for (const name2 of ["authorization", "www-authenticate", "cookie", "cookie2"]) {
                        requestOpts.headers.delete(name2);
                      }
                    }
                    if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
                      reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
                      finalize();
                      return;
                    }
                    if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === "POST") {
                      requestOpts.method = "GET";
                      requestOpts.body = void 0;
                      requestOpts.headers.delete("content-length");
                    }
                    resolve(fetch(new Request(locationURL, requestOpts)));
                    finalize();
                    return;
                }
              }
              res.once("end", function() {
                if (signal)
                  signal.removeEventListener("abort", abortAndFinalize);
              });
              let body = res.pipe(new PassThrough$1());
              const response_options = {
                url: request.url,
                status: res.statusCode,
                statusText: res.statusMessage,
                headers,
                size: request.size,
                timeout: request.timeout,
                counter: request.counter
              };
              const codings = headers.get("Content-Encoding");
              if (!request.compress || request.method === "HEAD" || codings === null || res.statusCode === 204 || res.statusCode === 304) {
                response = new Response(body, response_options);
                resolve(response);
                return;
              }
              const zlibOptions = {
                flush: zlib.Z_SYNC_FLUSH,
                finishFlush: zlib.Z_SYNC_FLUSH
              };
              if (codings == "gzip" || codings == "x-gzip") {
                body = body.pipe(zlib.createGunzip(zlibOptions));
                response = new Response(body, response_options);
                resolve(response);
                return;
              }
              if (codings == "deflate" || codings == "x-deflate") {
                const raw = res.pipe(new PassThrough$1());
                raw.once("data", function(chunk) {
                  if ((chunk[0] & 15) === 8) {
                    body = body.pipe(zlib.createInflate());
                  } else {
                    body = body.pipe(zlib.createInflateRaw());
                  }
                  response = new Response(body, response_options);
                  resolve(response);
                });
                return;
              }
              if (codings == "br" && typeof zlib.createBrotliDecompress === "function") {
                body = body.pipe(zlib.createBrotliDecompress());
                response = new Response(body, response_options);
                resolve(response);
                return;
              }
              response = new Response(body, response_options);
              resolve(response);
            });
            writeToStream(req, request);
          });
        }
        fetch.isRedirect = function(code) {
          return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
        };
        fetch.Promise = global.Promise;
        module22.exports = exports2 = fetch;
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.default = exports2;
        exports2.Headers = Headers;
        exports2.Request = Request;
        exports2.Response = Response;
        exports2.FetchError = FetchError;
      }
    });
    var require_dist_node3 = __commonJS2({
      "node_modules/deprecation/dist-node/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var Deprecation = class extends Error {
          constructor(message) {
            super(message);
            if (Error.captureStackTrace) {
              Error.captureStackTrace(this, this.constructor);
            }
            this.name = "Deprecation";
          }
        };
        exports2.Deprecation = Deprecation;
      }
    });
    var require_wrappy = __commonJS2({
      "node_modules/wrappy/wrappy.js"(exports2, module22) {
        module22.exports = wrappy;
        function wrappy(fn, cb) {
          if (fn && cb)
            return wrappy(fn)(cb);
          if (typeof fn !== "function")
            throw new TypeError("need wrapper function");
          Object.keys(fn).forEach(function(k) {
            wrapper[k] = fn[k];
          });
          return wrapper;
          function wrapper() {
            var args = new Array(arguments.length);
            for (var i = 0; i < args.length; i++) {
              args[i] = arguments[i];
            }
            var ret = fn.apply(this, args);
            var cb2 = args[args.length - 1];
            if (typeof ret === "function" && ret !== cb2) {
              Object.keys(cb2).forEach(function(k) {
                ret[k] = cb2[k];
              });
            }
            return ret;
          }
        }
      }
    });
    var require_once = __commonJS2({
      "node_modules/once/once.js"(exports2, module22) {
        var wrappy = require_wrappy();
        module22.exports = wrappy(once);
        module22.exports.strict = wrappy(onceStrict);
        once.proto = once(function() {
          Object.defineProperty(Function.prototype, "once", {
            value: function() {
              return once(this);
            },
            configurable: true
          });
          Object.defineProperty(Function.prototype, "onceStrict", {
            value: function() {
              return onceStrict(this);
            },
            configurable: true
          });
        });
        function once(fn) {
          var f = function() {
            if (f.called)
              return f.value;
            f.called = true;
            return f.value = fn.apply(this, arguments);
          };
          f.called = false;
          return f;
        }
        function onceStrict(fn) {
          var f = function() {
            if (f.called)
              throw new Error(f.onceError);
            f.called = true;
            return f.value = fn.apply(this, arguments);
          };
          var name2 = fn.name || "Function wrapped with `once`";
          f.onceError = name2 + " shouldn't be called more than once";
          f.called = false;
          return f;
        }
      }
    });
    var require_dist_node4 = __commonJS2({
      "node_modules/@octokit/request-error/dist-node/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        function _interopDefault(ex) {
          return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
        }
        var deprecation = require_dist_node3();
        var once = _interopDefault(require_once());
        var logOnceCode = once((deprecation2) => console.warn(deprecation2));
        var logOnceHeaders = once((deprecation2) => console.warn(deprecation2));
        var RequestError = class extends Error {
          constructor(message, statusCode, options) {
            super(message);
            if (Error.captureStackTrace) {
              Error.captureStackTrace(this, this.constructor);
            }
            this.name = "HttpError";
            this.status = statusCode;
            let headers;
            if ("headers" in options && typeof options.headers !== "undefined") {
              headers = options.headers;
            }
            if ("response" in options) {
              this.response = options.response;
              headers = options.response.headers;
            }
            const requestCopy = Object.assign({}, options.request);
            if (options.request.headers.authorization) {
              requestCopy.headers = Object.assign({}, options.request.headers, {
                authorization: options.request.headers.authorization.replace(/ .*$/, " [REDACTED]")
              });
            }
            requestCopy.url = requestCopy.url.replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]").replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
            this.request = requestCopy;
            Object.defineProperty(this, "code", {
              get() {
                logOnceCode(new deprecation.Deprecation("[@octokit/request-error] `error.code` is deprecated, use `error.status`."));
                return statusCode;
              }
            });
            Object.defineProperty(this, "headers", {
              get() {
                logOnceHeaders(new deprecation.Deprecation("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`."));
                return headers || {};
              }
            });
          }
        };
        exports2.RequestError = RequestError;
      }
    });
    var require_dist_node5 = __commonJS2({
      "node_modules/@octokit/request/dist-node/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        function _interopDefault(ex) {
          return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
        }
        var endpoint = require_dist_node2();
        var universalUserAgent = require_dist_node();
        var isPlainObject = require_is_plain_object();
        var nodeFetch = _interopDefault(require_lib22());
        var requestError = require_dist_node4();
        var VERSION = "5.6.2";
        function getBufferResponse(response) {
          return response.arrayBuffer();
        }
        function fetchWrapper(requestOptions) {
          const log = requestOptions.request && requestOptions.request.log ? requestOptions.request.log : console;
          if (isPlainObject.isPlainObject(requestOptions.body) || Array.isArray(requestOptions.body)) {
            requestOptions.body = JSON.stringify(requestOptions.body);
          }
          let headers = {};
          let status;
          let url;
          const fetch = requestOptions.request && requestOptions.request.fetch || nodeFetch;
          return fetch(requestOptions.url, Object.assign({
            method: requestOptions.method,
            body: requestOptions.body,
            headers: requestOptions.headers,
            redirect: requestOptions.redirect
          }, requestOptions.request)).then(async (response) => {
            url = response.url;
            status = response.status;
            for (const keyAndValue of response.headers) {
              headers[keyAndValue[0]] = keyAndValue[1];
            }
            if ("deprecation" in headers) {
              const matches = headers.link && headers.link.match(/<([^>]+)>; rel="deprecation"/);
              const deprecationLink = matches && matches.pop();
              log.warn(`[@octokit/request] "${requestOptions.method} ${requestOptions.url}" is deprecated. It is scheduled to be removed on ${headers.sunset}${deprecationLink ? `. See ${deprecationLink}` : ""}`);
            }
            if (status === 204 || status === 205) {
              return;
            }
            if (requestOptions.method === "HEAD") {
              if (status < 400) {
                return;
              }
              throw new requestError.RequestError(response.statusText, status, {
                response: {
                  url,
                  status,
                  headers,
                  data: void 0
                },
                request: requestOptions
              });
            }
            if (status === 304) {
              throw new requestError.RequestError("Not modified", status, {
                response: {
                  url,
                  status,
                  headers,
                  data: await getResponseData(response)
                },
                request: requestOptions
              });
            }
            if (status >= 400) {
              const data = await getResponseData(response);
              const error = new requestError.RequestError(toErrorMessage(data), status, {
                response: {
                  url,
                  status,
                  headers,
                  data
                },
                request: requestOptions
              });
              throw error;
            }
            return getResponseData(response);
          }).then((data) => {
            return {
              status,
              url,
              headers,
              data
            };
          }).catch((error) => {
            if (error instanceof requestError.RequestError)
              throw error;
            throw new requestError.RequestError(error.message, 500, {
              request: requestOptions
            });
          });
        }
        async function getResponseData(response) {
          const contentType = response.headers.get("content-type");
          if (/application\/json/.test(contentType)) {
            return response.json();
          }
          if (!contentType || /^text\/|charset=utf-8$/.test(contentType)) {
            return response.text();
          }
          return getBufferResponse(response);
        }
        function toErrorMessage(data) {
          if (typeof data === "string")
            return data;
          if ("message" in data) {
            if (Array.isArray(data.errors)) {
              return `${data.message}: ${data.errors.map(JSON.stringify).join(", ")}`;
            }
            return data.message;
          }
          return `Unknown error: ${JSON.stringify(data)}`;
        }
        function withDefaults(oldEndpoint, newDefaults) {
          const endpoint2 = oldEndpoint.defaults(newDefaults);
          const newApi = function(route, parameters) {
            const endpointOptions = endpoint2.merge(route, parameters);
            if (!endpointOptions.request || !endpointOptions.request.hook) {
              return fetchWrapper(endpoint2.parse(endpointOptions));
            }
            const request2 = (route2, parameters2) => {
              return fetchWrapper(endpoint2.parse(endpoint2.merge(route2, parameters2)));
            };
            Object.assign(request2, {
              endpoint: endpoint2,
              defaults: withDefaults.bind(null, endpoint2)
            });
            return endpointOptions.request.hook(request2, endpointOptions);
          };
          return Object.assign(newApi, {
            endpoint: endpoint2,
            defaults: withDefaults.bind(null, endpoint2)
          });
        }
        var request = withDefaults(endpoint.endpoint, {
          headers: {
            "user-agent": `octokit-request.js/${VERSION} ${universalUserAgent.getUserAgent()}`
          }
        });
        exports2.request = request;
      }
    });
    var require_dist_node6 = __commonJS2({
      "node_modules/@octokit/graphql/dist-node/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var request = require_dist_node5();
        var universalUserAgent = require_dist_node();
        var VERSION = "4.6.1";
        var GraphqlError = class extends Error {
          constructor(request2, response) {
            const message = response.data.errors[0].message;
            super(message);
            Object.assign(this, response.data);
            Object.assign(this, {
              headers: response.headers
            });
            this.name = "GraphqlError";
            this.request = request2;
            if (Error.captureStackTrace) {
              Error.captureStackTrace(this, this.constructor);
            }
          }
        };
        var NON_VARIABLE_OPTIONS = ["method", "baseUrl", "url", "headers", "request", "query", "mediaType"];
        var FORBIDDEN_VARIABLE_OPTIONS = ["query", "method", "url"];
        var GHES_V3_SUFFIX_REGEX = /\/api\/v3\/?$/;
        function graphql(request2, query, options) {
          if (options) {
            if (typeof query === "string" && "query" in options) {
              return Promise.reject(new Error(`[@octokit/graphql] "query" cannot be used as variable name`));
            }
            for (const key in options) {
              if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key))
                continue;
              return Promise.reject(new Error(`[@octokit/graphql] "${key}" cannot be used as variable name`));
            }
          }
          const parsedOptions = typeof query === "string" ? Object.assign({
            query
          }, options) : query;
          const requestOptions = Object.keys(parsedOptions).reduce((result, key) => {
            if (NON_VARIABLE_OPTIONS.includes(key)) {
              result[key] = parsedOptions[key];
              return result;
            }
            if (!result.variables) {
              result.variables = {};
            }
            result.variables[key] = parsedOptions[key];
            return result;
          }, {});
          const baseUrl = parsedOptions.baseUrl || request2.endpoint.DEFAULTS.baseUrl;
          if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {
            requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, "/api/graphql");
          }
          return request2(requestOptions).then((response) => {
            if (response.data.errors) {
              const headers = {};
              for (const key of Object.keys(response.headers)) {
                headers[key] = response.headers[key];
              }
              throw new GraphqlError(requestOptions, {
                headers,
                data: response.data
              });
            }
            return response.data.data;
          });
        }
        function withDefaults(request$1, newDefaults) {
          const newRequest = request$1.defaults(newDefaults);
          const newApi = (query, options) => {
            return graphql(newRequest, query, options);
          };
          return Object.assign(newApi, {
            defaults: withDefaults.bind(null, newRequest),
            endpoint: request.request.endpoint
          });
        }
        var graphql$1 = withDefaults(request.request, {
          headers: {
            "user-agent": `octokit-graphql.js/${VERSION} ${universalUserAgent.getUserAgent()}`
          },
          method: "POST",
          url: "/graphql"
        });
        function withCustomRequest(customRequest) {
          return withDefaults(customRequest, {
            method: "POST",
            url: "/graphql"
          });
        }
        exports2.graphql = graphql$1;
        exports2.withCustomRequest = withCustomRequest;
      }
    });
    var require_dist_node7 = __commonJS2({
      "node_modules/@octokit/auth-token/dist-node/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        async function auth(token) {
          const tokenType = token.split(/\./).length === 3 ? "app" : /^v\d+\./.test(token) ? "installation" : "oauth";
          return {
            type: "token",
            token,
            tokenType
          };
        }
        function withAuthorizationPrefix(token) {
          if (token.split(/\./).length === 3) {
            return `bearer ${token}`;
          }
          return `token ${token}`;
        }
        async function hook(token, request, route, parameters) {
          const endpoint = request.endpoint.merge(route, parameters);
          endpoint.headers.authorization = withAuthorizationPrefix(token);
          return request(endpoint);
        }
        var createTokenAuth = function createTokenAuth2(token) {
          if (!token) {
            throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");
          }
          if (typeof token !== "string") {
            throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");
          }
          token = token.replace(/^(token|bearer) +/i, "");
          return Object.assign(auth.bind(null, token), {
            hook: hook.bind(null, token)
          });
        };
        exports2.createTokenAuth = createTokenAuth;
      }
    });
    var require_dist_node8 = __commonJS2({
      "node_modules/@octokit/core/dist-node/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var universalUserAgent = require_dist_node();
        var beforeAfterHook = require_before_after_hook();
        var request = require_dist_node5();
        var graphql = require_dist_node6();
        var authToken = require_dist_node7();
        function _objectWithoutPropertiesLoose(source, excluded) {
          if (source == null)
            return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;
          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            target[key] = source[key];
          }
          return target;
        }
        function _objectWithoutProperties(source, excluded) {
          if (source == null)
            return {};
          var target = _objectWithoutPropertiesLoose(source, excluded);
          var key, i;
          if (Object.getOwnPropertySymbols) {
            var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
            for (i = 0; i < sourceSymbolKeys.length; i++) {
              key = sourceSymbolKeys[i];
              if (excluded.indexOf(key) >= 0)
                continue;
              if (!Object.prototype.propertyIsEnumerable.call(source, key))
                continue;
              target[key] = source[key];
            }
          }
          return target;
        }
        var VERSION = "3.5.1";
        var _excluded = ["authStrategy"];
        var Octokit2 = class {
          constructor(options = {}) {
            const hook = new beforeAfterHook.Collection();
            const requestDefaults = {
              baseUrl: request.request.endpoint.DEFAULTS.baseUrl,
              headers: {},
              request: Object.assign({}, options.request, {
                hook: hook.bind(null, "request")
              }),
              mediaType: {
                previews: [],
                format: ""
              }
            };
            requestDefaults.headers["user-agent"] = [options.userAgent, `octokit-core.js/${VERSION} ${universalUserAgent.getUserAgent()}`].filter(Boolean).join(" ");
            if (options.baseUrl) {
              requestDefaults.baseUrl = options.baseUrl;
            }
            if (options.previews) {
              requestDefaults.mediaType.previews = options.previews;
            }
            if (options.timeZone) {
              requestDefaults.headers["time-zone"] = options.timeZone;
            }
            this.request = request.request.defaults(requestDefaults);
            this.graphql = graphql.withCustomRequest(this.request).defaults(requestDefaults);
            this.log = Object.assign({
              debug: () => {
              },
              info: () => {
              },
              warn: console.warn.bind(console),
              error: console.error.bind(console)
            }, options.log);
            this.hook = hook;
            if (!options.authStrategy) {
              if (!options.auth) {
                this.auth = async () => ({
                  type: "unauthenticated"
                });
              } else {
                const auth = authToken.createTokenAuth(options.auth);
                hook.wrap("request", auth.hook);
                this.auth = auth;
              }
            } else {
              const {
                authStrategy
              } = options, otherOptions = _objectWithoutProperties(options, _excluded);
              const auth = authStrategy(Object.assign({
                request: this.request,
                log: this.log,
                octokit: this,
                octokitOptions: otherOptions
              }, options.auth));
              hook.wrap("request", auth.hook);
              this.auth = auth;
            }
            const classConstructor = this.constructor;
            classConstructor.plugins.forEach((plugin) => {
              Object.assign(this, plugin(this, options));
            });
          }
          static defaults(defaults) {
            const OctokitWithDefaults = class extends this {
              constructor(...args) {
                const options = args[0] || {};
                if (typeof defaults === "function") {
                  super(defaults(options));
                  return;
                }
                super(Object.assign({}, defaults, options, options.userAgent && defaults.userAgent ? {
                  userAgent: `${options.userAgent} ${defaults.userAgent}`
                } : null));
              }
            };
            return OctokitWithDefaults;
          }
          static plugin(...newPlugins) {
            var _a;
            const currentPlugins = this.plugins;
            const NewOctokit = (_a = class extends this {
            }, _a.plugins = currentPlugins.concat(newPlugins.filter((plugin) => !currentPlugins.includes(plugin))), _a);
            return NewOctokit;
          }
        };
        Octokit2.VERSION = VERSION;
        Octokit2.plugins = [];
        exports2.Octokit = Octokit2;
      }
    });
    var require_dist_node9 = __commonJS2({
      "node_modules/@octokit/plugin-request-log/dist-node/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var VERSION = "1.0.4";
        function requestLog(octokit) {
          octokit.hook.wrap("request", (request, options) => {
            octokit.log.debug("request", options);
            const start = Date.now();
            const requestOptions = octokit.request.endpoint.parse(options);
            const path = requestOptions.url.replace(options.baseUrl, "");
            return request(options).then((response) => {
              octokit.log.info(`${requestOptions.method} ${path} - ${response.status} in ${Date.now() - start}ms`);
              return response;
            }).catch((error) => {
              octokit.log.info(`${requestOptions.method} ${path} - ${error.status} in ${Date.now() - start}ms`);
              throw error;
            });
          });
        }
        requestLog.VERSION = VERSION;
        exports2.requestLog = requestLog;
      }
    });
    var require_dist_node10 = __commonJS2({
      "node_modules/@octokit/plugin-paginate-rest/dist-node/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var VERSION = "2.17.0";
        function ownKeys(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly) {
              symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            }
            keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread2(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            if (i % 2) {
              ownKeys(Object(source), true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function normalizePaginatedListResponse(response) {
          if (!response.data) {
            return _objectSpread2(_objectSpread2({}, response), {}, {
              data: []
            });
          }
          const responseNeedsNormalization = "total_count" in response.data && !("url" in response.data);
          if (!responseNeedsNormalization)
            return response;
          const incompleteResults = response.data.incomplete_results;
          const repositorySelection = response.data.repository_selection;
          const totalCount = response.data.total_count;
          delete response.data.incomplete_results;
          delete response.data.repository_selection;
          delete response.data.total_count;
          const namespaceKey = Object.keys(response.data)[0];
          const data = response.data[namespaceKey];
          response.data = data;
          if (typeof incompleteResults !== "undefined") {
            response.data.incomplete_results = incompleteResults;
          }
          if (typeof repositorySelection !== "undefined") {
            response.data.repository_selection = repositorySelection;
          }
          response.data.total_count = totalCount;
          return response;
        }
        function iterator(octokit, route, parameters) {
          const options = typeof route === "function" ? route.endpoint(parameters) : octokit.request.endpoint(route, parameters);
          const requestMethod = typeof route === "function" ? route : octokit.request;
          const method = options.method;
          const headers = options.headers;
          let url = options.url;
          return {
            [Symbol.asyncIterator]: () => ({
              async next() {
                if (!url)
                  return {
                    done: true
                  };
                try {
                  const response = await requestMethod({
                    method,
                    url,
                    headers
                  });
                  const normalizedResponse = normalizePaginatedListResponse(response);
                  url = ((normalizedResponse.headers.link || "").match(/<([^>]+)>;\s*rel="next"/) || [])[1];
                  return {
                    value: normalizedResponse
                  };
                } catch (error) {
                  if (error.status !== 409)
                    throw error;
                  url = "";
                  return {
                    value: {
                      status: 200,
                      headers: {},
                      data: []
                    }
                  };
                }
              }
            })
          };
        }
        function paginate(octokit, route, parameters, mapFn) {
          if (typeof parameters === "function") {
            mapFn = parameters;
            parameters = void 0;
          }
          return gather(octokit, [], iterator(octokit, route, parameters)[Symbol.asyncIterator](), mapFn);
        }
        function gather(octokit, results, iterator2, mapFn) {
          return iterator2.next().then((result) => {
            if (result.done) {
              return results;
            }
            let earlyExit = false;
            function done() {
              earlyExit = true;
            }
            results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data);
            if (earlyExit) {
              return results;
            }
            return gather(octokit, results, iterator2, mapFn);
          });
        }
        var composePaginateRest = Object.assign(paginate, {
          iterator
        });
        var paginatingEndpoints = ["GET /app/hook/deliveries", "GET /app/installations", "GET /applications/grants", "GET /authorizations", "GET /enterprises/{enterprise}/actions/permissions/organizations", "GET /enterprises/{enterprise}/actions/runner-groups", "GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations", "GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners", "GET /enterprises/{enterprise}/actions/runners", "GET /enterprises/{enterprise}/actions/runners/downloads", "GET /events", "GET /gists", "GET /gists/public", "GET /gists/starred", "GET /gists/{gist_id}/comments", "GET /gists/{gist_id}/commits", "GET /gists/{gist_id}/forks", "GET /installation/repositories", "GET /issues", "GET /marketplace_listing/plans", "GET /marketplace_listing/plans/{plan_id}/accounts", "GET /marketplace_listing/stubbed/plans", "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts", "GET /networks/{owner}/{repo}/events", "GET /notifications", "GET /organizations", "GET /orgs/{org}/actions/permissions/repositories", "GET /orgs/{org}/actions/runner-groups", "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories", "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners", "GET /orgs/{org}/actions/runners", "GET /orgs/{org}/actions/runners/downloads", "GET /orgs/{org}/actions/secrets", "GET /orgs/{org}/actions/secrets/{secret_name}/repositories", "GET /orgs/{org}/blocks", "GET /orgs/{org}/credential-authorizations", "GET /orgs/{org}/events", "GET /orgs/{org}/failed_invitations", "GET /orgs/{org}/hooks", "GET /orgs/{org}/hooks/{hook_id}/deliveries", "GET /orgs/{org}/installations", "GET /orgs/{org}/invitations", "GET /orgs/{org}/invitations/{invitation_id}/teams", "GET /orgs/{org}/issues", "GET /orgs/{org}/members", "GET /orgs/{org}/migrations", "GET /orgs/{org}/migrations/{migration_id}/repositories", "GET /orgs/{org}/outside_collaborators", "GET /orgs/{org}/packages", "GET /orgs/{org}/projects", "GET /orgs/{org}/public_members", "GET /orgs/{org}/repos", "GET /orgs/{org}/secret-scanning/alerts", "GET /orgs/{org}/team-sync/groups", "GET /orgs/{org}/teams", "GET /orgs/{org}/teams/{team_slug}/discussions", "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments", "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions", "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions", "GET /orgs/{org}/teams/{team_slug}/invitations", "GET /orgs/{org}/teams/{team_slug}/members", "GET /orgs/{org}/teams/{team_slug}/projects", "GET /orgs/{org}/teams/{team_slug}/repos", "GET /orgs/{org}/teams/{team_slug}/team-sync/group-mappings", "GET /orgs/{org}/teams/{team_slug}/teams", "GET /projects/columns/{column_id}/cards", "GET /projects/{project_id}/collaborators", "GET /projects/{project_id}/columns", "GET /repos/{owner}/{repo}/actions/artifacts", "GET /repos/{owner}/{repo}/actions/runners", "GET /repos/{owner}/{repo}/actions/runners/downloads", "GET /repos/{owner}/{repo}/actions/runs", "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts", "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs", "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs", "GET /repos/{owner}/{repo}/actions/secrets", "GET /repos/{owner}/{repo}/actions/workflows", "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs", "GET /repos/{owner}/{repo}/assignees", "GET /repos/{owner}/{repo}/autolinks", "GET /repos/{owner}/{repo}/branches", "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations", "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs", "GET /repos/{owner}/{repo}/code-scanning/alerts", "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances", "GET /repos/{owner}/{repo}/code-scanning/analyses", "GET /repos/{owner}/{repo}/collaborators", "GET /repos/{owner}/{repo}/comments", "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions", "GET /repos/{owner}/{repo}/commits", "GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head", "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments", "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls", "GET /repos/{owner}/{repo}/commits/{ref}/check-runs", "GET /repos/{owner}/{repo}/commits/{ref}/check-suites", "GET /repos/{owner}/{repo}/commits/{ref}/statuses", "GET /repos/{owner}/{repo}/contributors", "GET /repos/{owner}/{repo}/deployments", "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses", "GET /repos/{owner}/{repo}/events", "GET /repos/{owner}/{repo}/forks", "GET /repos/{owner}/{repo}/git/matching-refs/{ref}", "GET /repos/{owner}/{repo}/hooks", "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries", "GET /repos/{owner}/{repo}/invitations", "GET /repos/{owner}/{repo}/issues", "GET /repos/{owner}/{repo}/issues/comments", "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions", "GET /repos/{owner}/{repo}/issues/events", "GET /repos/{owner}/{repo}/issues/{issue_number}/comments", "GET /repos/{owner}/{repo}/issues/{issue_number}/events", "GET /repos/{owner}/{repo}/issues/{issue_number}/labels", "GET /repos/{owner}/{repo}/issues/{issue_number}/reactions", "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline", "GET /repos/{owner}/{repo}/keys", "GET /repos/{owner}/{repo}/labels", "GET /repos/{owner}/{repo}/milestones", "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels", "GET /repos/{owner}/{repo}/notifications", "GET /repos/{owner}/{repo}/pages/builds", "GET /repos/{owner}/{repo}/projects", "GET /repos/{owner}/{repo}/pulls", "GET /repos/{owner}/{repo}/pulls/comments", "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions", "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments", "GET /repos/{owner}/{repo}/pulls/{pull_number}/commits", "GET /repos/{owner}/{repo}/pulls/{pull_number}/files", "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers", "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews", "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments", "GET /repos/{owner}/{repo}/releases", "GET /repos/{owner}/{repo}/releases/{release_id}/assets", "GET /repos/{owner}/{repo}/secret-scanning/alerts", "GET /repos/{owner}/{repo}/stargazers", "GET /repos/{owner}/{repo}/subscribers", "GET /repos/{owner}/{repo}/tags", "GET /repos/{owner}/{repo}/teams", "GET /repositories", "GET /repositories/{repository_id}/environments/{environment_name}/secrets", "GET /scim/v2/enterprises/{enterprise}/Groups", "GET /scim/v2/enterprises/{enterprise}/Users", "GET /scim/v2/organizations/{org}/Users", "GET /search/code", "GET /search/commits", "GET /search/issues", "GET /search/labels", "GET /search/repositories", "GET /search/topics", "GET /search/users", "GET /teams/{team_id}/discussions", "GET /teams/{team_id}/discussions/{discussion_number}/comments", "GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions", "GET /teams/{team_id}/discussions/{discussion_number}/reactions", "GET /teams/{team_id}/invitations", "GET /teams/{team_id}/members", "GET /teams/{team_id}/projects", "GET /teams/{team_id}/repos", "GET /teams/{team_id}/team-sync/group-mappings", "GET /teams/{team_id}/teams", "GET /user/blocks", "GET /user/emails", "GET /user/followers", "GET /user/following", "GET /user/gpg_keys", "GET /user/installations", "GET /user/installations/{installation_id}/repositories", "GET /user/issues", "GET /user/keys", "GET /user/marketplace_purchases", "GET /user/marketplace_purchases/stubbed", "GET /user/memberships/orgs", "GET /user/migrations", "GET /user/migrations/{migration_id}/repositories", "GET /user/orgs", "GET /user/packages", "GET /user/public_emails", "GET /user/repos", "GET /user/repository_invitations", "GET /user/starred", "GET /user/subscriptions", "GET /user/teams", "GET /users", "GET /users/{username}/events", "GET /users/{username}/events/orgs/{org}", "GET /users/{username}/events/public", "GET /users/{username}/followers", "GET /users/{username}/following", "GET /users/{username}/gists", "GET /users/{username}/gpg_keys", "GET /users/{username}/keys", "GET /users/{username}/orgs", "GET /users/{username}/packages", "GET /users/{username}/projects", "GET /users/{username}/received_events", "GET /users/{username}/received_events/public", "GET /users/{username}/repos", "GET /users/{username}/starred", "GET /users/{username}/subscriptions"];
        function isPaginatingEndpoint(arg) {
          if (typeof arg === "string") {
            return paginatingEndpoints.includes(arg);
          } else {
            return false;
          }
        }
        function paginateRest(octokit) {
          return {
            paginate: Object.assign(paginate.bind(null, octokit), {
              iterator: iterator.bind(null, octokit)
            })
          };
        }
        paginateRest.VERSION = VERSION;
        exports2.composePaginateRest = composePaginateRest;
        exports2.isPaginatingEndpoint = isPaginatingEndpoint;
        exports2.paginateRest = paginateRest;
        exports2.paginatingEndpoints = paginatingEndpoints;
      }
    });
    var require_dist_node11 = __commonJS2({
      "node_modules/@octokit/plugin-rest-endpoint-methods/dist-node/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        function ownKeys(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly) {
              symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            }
            keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread2(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            if (i % 2) {
              ownKeys(Object(source), true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        var Endpoints = {
          actions: {
            addSelectedRepoToOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],
            approveWorkflowRun: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],
            cancelWorkflowRun: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],
            createOrUpdateEnvironmentSecret: ["PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],
            createOrUpdateOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}"],
            createOrUpdateRepoSecret: ["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
            createRegistrationTokenForOrg: ["POST /orgs/{org}/actions/runners/registration-token"],
            createRegistrationTokenForRepo: ["POST /repos/{owner}/{repo}/actions/runners/registration-token"],
            createRemoveTokenForOrg: ["POST /orgs/{org}/actions/runners/remove-token"],
            createRemoveTokenForRepo: ["POST /repos/{owner}/{repo}/actions/runners/remove-token"],
            createWorkflowDispatch: ["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],
            deleteArtifact: ["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
            deleteEnvironmentSecret: ["DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],
            deleteOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}"],
            deleteRepoSecret: ["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
            deleteSelfHostedRunnerFromOrg: ["DELETE /orgs/{org}/actions/runners/{runner_id}"],
            deleteSelfHostedRunnerFromRepo: ["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],
            deleteWorkflowRun: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],
            deleteWorkflowRunLogs: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],
            disableSelectedRepositoryGithubActionsOrganization: ["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],
            disableWorkflow: ["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],
            downloadArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],
            downloadJobLogsForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],
            downloadWorkflowRunAttemptLogs: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],
            downloadWorkflowRunLogs: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],
            enableSelectedRepositoryGithubActionsOrganization: ["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],
            enableWorkflow: ["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],
            getAllowedActionsOrganization: ["GET /orgs/{org}/actions/permissions/selected-actions"],
            getAllowedActionsRepository: ["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],
            getArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
            getEnvironmentPublicKey: ["GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"],
            getEnvironmentSecret: ["GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],
            getGithubActionsPermissionsOrganization: ["GET /orgs/{org}/actions/permissions"],
            getGithubActionsPermissionsRepository: ["GET /repos/{owner}/{repo}/actions/permissions"],
            getJobForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],
            getOrgPublicKey: ["GET /orgs/{org}/actions/secrets/public-key"],
            getOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}"],
            getPendingDeploymentsForRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],
            getRepoPermissions: ["GET /repos/{owner}/{repo}/actions/permissions", {}, {
              renamed: ["actions", "getGithubActionsPermissionsRepository"]
            }],
            getRepoPublicKey: ["GET /repos/{owner}/{repo}/actions/secrets/public-key"],
            getRepoSecret: ["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
            getReviewsForRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],
            getSelfHostedRunnerForOrg: ["GET /orgs/{org}/actions/runners/{runner_id}"],
            getSelfHostedRunnerForRepo: ["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],
            getWorkflow: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],
            getWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],
            getWorkflowRunAttempt: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],
            getWorkflowRunUsage: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],
            getWorkflowUsage: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],
            listArtifactsForRepo: ["GET /repos/{owner}/{repo}/actions/artifacts"],
            listEnvironmentSecrets: ["GET /repositories/{repository_id}/environments/{environment_name}/secrets"],
            listJobsForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],
            listJobsForWorkflowRunAttempt: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],
            listOrgSecrets: ["GET /orgs/{org}/actions/secrets"],
            listRepoSecrets: ["GET /repos/{owner}/{repo}/actions/secrets"],
            listRepoWorkflows: ["GET /repos/{owner}/{repo}/actions/workflows"],
            listRunnerApplicationsForOrg: ["GET /orgs/{org}/actions/runners/downloads"],
            listRunnerApplicationsForRepo: ["GET /repos/{owner}/{repo}/actions/runners/downloads"],
            listSelectedReposForOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],
            listSelectedRepositoriesEnabledGithubActionsOrganization: ["GET /orgs/{org}/actions/permissions/repositories"],
            listSelfHostedRunnersForOrg: ["GET /orgs/{org}/actions/runners"],
            listSelfHostedRunnersForRepo: ["GET /repos/{owner}/{repo}/actions/runners"],
            listWorkflowRunArtifacts: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],
            listWorkflowRuns: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],
            listWorkflowRunsForRepo: ["GET /repos/{owner}/{repo}/actions/runs"],
            removeSelectedRepoFromOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],
            reviewPendingDeploymentsForRun: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],
            setAllowedActionsOrganization: ["PUT /orgs/{org}/actions/permissions/selected-actions"],
            setAllowedActionsRepository: ["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],
            setGithubActionsPermissionsOrganization: ["PUT /orgs/{org}/actions/permissions"],
            setGithubActionsPermissionsRepository: ["PUT /repos/{owner}/{repo}/actions/permissions"],
            setSelectedReposForOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],
            setSelectedRepositoriesEnabledGithubActionsOrganization: ["PUT /orgs/{org}/actions/permissions/repositories"]
          },
          activity: {
            checkRepoIsStarredByAuthenticatedUser: ["GET /user/starred/{owner}/{repo}"],
            deleteRepoSubscription: ["DELETE /repos/{owner}/{repo}/subscription"],
            deleteThreadSubscription: ["DELETE /notifications/threads/{thread_id}/subscription"],
            getFeeds: ["GET /feeds"],
            getRepoSubscription: ["GET /repos/{owner}/{repo}/subscription"],
            getThread: ["GET /notifications/threads/{thread_id}"],
            getThreadSubscriptionForAuthenticatedUser: ["GET /notifications/threads/{thread_id}/subscription"],
            listEventsForAuthenticatedUser: ["GET /users/{username}/events"],
            listNotificationsForAuthenticatedUser: ["GET /notifications"],
            listOrgEventsForAuthenticatedUser: ["GET /users/{username}/events/orgs/{org}"],
            listPublicEvents: ["GET /events"],
            listPublicEventsForRepoNetwork: ["GET /networks/{owner}/{repo}/events"],
            listPublicEventsForUser: ["GET /users/{username}/events/public"],
            listPublicOrgEvents: ["GET /orgs/{org}/events"],
            listReceivedEventsForUser: ["GET /users/{username}/received_events"],
            listReceivedPublicEventsForUser: ["GET /users/{username}/received_events/public"],
            listRepoEvents: ["GET /repos/{owner}/{repo}/events"],
            listRepoNotificationsForAuthenticatedUser: ["GET /repos/{owner}/{repo}/notifications"],
            listReposStarredByAuthenticatedUser: ["GET /user/starred"],
            listReposStarredByUser: ["GET /users/{username}/starred"],
            listReposWatchedByUser: ["GET /users/{username}/subscriptions"],
            listStargazersForRepo: ["GET /repos/{owner}/{repo}/stargazers"],
            listWatchedReposForAuthenticatedUser: ["GET /user/subscriptions"],
            listWatchersForRepo: ["GET /repos/{owner}/{repo}/subscribers"],
            markNotificationsAsRead: ["PUT /notifications"],
            markRepoNotificationsAsRead: ["PUT /repos/{owner}/{repo}/notifications"],
            markThreadAsRead: ["PATCH /notifications/threads/{thread_id}"],
            setRepoSubscription: ["PUT /repos/{owner}/{repo}/subscription"],
            setThreadSubscription: ["PUT /notifications/threads/{thread_id}/subscription"],
            starRepoForAuthenticatedUser: ["PUT /user/starred/{owner}/{repo}"],
            unstarRepoForAuthenticatedUser: ["DELETE /user/starred/{owner}/{repo}"]
          },
          apps: {
            addRepoToInstallation: ["PUT /user/installations/{installation_id}/repositories/{repository_id}", {}, {
              renamed: ["apps", "addRepoToInstallationForAuthenticatedUser"]
            }],
            addRepoToInstallationForAuthenticatedUser: ["PUT /user/installations/{installation_id}/repositories/{repository_id}"],
            checkToken: ["POST /applications/{client_id}/token"],
            createContentAttachment: ["POST /content_references/{content_reference_id}/attachments", {
              mediaType: {
                previews: ["corsair"]
              }
            }],
            createContentAttachmentForRepo: ["POST /repos/{owner}/{repo}/content_references/{content_reference_id}/attachments", {
              mediaType: {
                previews: ["corsair"]
              }
            }],
            createFromManifest: ["POST /app-manifests/{code}/conversions"],
            createInstallationAccessToken: ["POST /app/installations/{installation_id}/access_tokens"],
            deleteAuthorization: ["DELETE /applications/{client_id}/grant"],
            deleteInstallation: ["DELETE /app/installations/{installation_id}"],
            deleteToken: ["DELETE /applications/{client_id}/token"],
            getAuthenticated: ["GET /app"],
            getBySlug: ["GET /apps/{app_slug}"],
            getInstallation: ["GET /app/installations/{installation_id}"],
            getOrgInstallation: ["GET /orgs/{org}/installation"],
            getRepoInstallation: ["GET /repos/{owner}/{repo}/installation"],
            getSubscriptionPlanForAccount: ["GET /marketplace_listing/accounts/{account_id}"],
            getSubscriptionPlanForAccountStubbed: ["GET /marketplace_listing/stubbed/accounts/{account_id}"],
            getUserInstallation: ["GET /users/{username}/installation"],
            getWebhookConfigForApp: ["GET /app/hook/config"],
            getWebhookDelivery: ["GET /app/hook/deliveries/{delivery_id}"],
            listAccountsForPlan: ["GET /marketplace_listing/plans/{plan_id}/accounts"],
            listAccountsForPlanStubbed: ["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],
            listInstallationReposForAuthenticatedUser: ["GET /user/installations/{installation_id}/repositories"],
            listInstallations: ["GET /app/installations"],
            listInstallationsForAuthenticatedUser: ["GET /user/installations"],
            listPlans: ["GET /marketplace_listing/plans"],
            listPlansStubbed: ["GET /marketplace_listing/stubbed/plans"],
            listReposAccessibleToInstallation: ["GET /installation/repositories"],
            listSubscriptionsForAuthenticatedUser: ["GET /user/marketplace_purchases"],
            listSubscriptionsForAuthenticatedUserStubbed: ["GET /user/marketplace_purchases/stubbed"],
            listWebhookDeliveries: ["GET /app/hook/deliveries"],
            redeliverWebhookDelivery: ["POST /app/hook/deliveries/{delivery_id}/attempts"],
            removeRepoFromInstallation: ["DELETE /user/installations/{installation_id}/repositories/{repository_id}", {}, {
              renamed: ["apps", "removeRepoFromInstallationForAuthenticatedUser"]
            }],
            removeRepoFromInstallationForAuthenticatedUser: ["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],
            resetToken: ["PATCH /applications/{client_id}/token"],
            revokeInstallationAccessToken: ["DELETE /installation/token"],
            scopeToken: ["POST /applications/{client_id}/token/scoped"],
            suspendInstallation: ["PUT /app/installations/{installation_id}/suspended"],
            unsuspendInstallation: ["DELETE /app/installations/{installation_id}/suspended"],
            updateWebhookConfigForApp: ["PATCH /app/hook/config"]
          },
          billing: {
            getGithubActionsBillingOrg: ["GET /orgs/{org}/settings/billing/actions"],
            getGithubActionsBillingUser: ["GET /users/{username}/settings/billing/actions"],
            getGithubPackagesBillingOrg: ["GET /orgs/{org}/settings/billing/packages"],
            getGithubPackagesBillingUser: ["GET /users/{username}/settings/billing/packages"],
            getSharedStorageBillingOrg: ["GET /orgs/{org}/settings/billing/shared-storage"],
            getSharedStorageBillingUser: ["GET /users/{username}/settings/billing/shared-storage"]
          },
          checks: {
            create: ["POST /repos/{owner}/{repo}/check-runs"],
            createSuite: ["POST /repos/{owner}/{repo}/check-suites"],
            get: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],
            getSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],
            listAnnotations: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],
            listForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],
            listForSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],
            listSuitesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],
            rerequestRun: ["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],
            rerequestSuite: ["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],
            setSuitesPreferences: ["PATCH /repos/{owner}/{repo}/check-suites/preferences"],
            update: ["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]
          },
          codeScanning: {
            deleteAnalysis: ["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],
            getAlert: ["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}", {}, {
              renamedParameters: {
                alert_id: "alert_number"
              }
            }],
            getAnalysis: ["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],
            getSarif: ["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],
            listAlertInstances: ["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],
            listAlertsForRepo: ["GET /repos/{owner}/{repo}/code-scanning/alerts"],
            listAlertsInstances: ["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances", {}, {
              renamed: ["codeScanning", "listAlertInstances"]
            }],
            listRecentAnalyses: ["GET /repos/{owner}/{repo}/code-scanning/analyses"],
            updateAlert: ["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],
            uploadSarif: ["POST /repos/{owner}/{repo}/code-scanning/sarifs"]
          },
          codesOfConduct: {
            getAllCodesOfConduct: ["GET /codes_of_conduct"],
            getConductCode: ["GET /codes_of_conduct/{key}"]
          },
          emojis: {
            get: ["GET /emojis"]
          },
          enterpriseAdmin: {
            disableSelectedOrganizationGithubActionsEnterprise: ["DELETE /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"],
            enableSelectedOrganizationGithubActionsEnterprise: ["PUT /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"],
            getAllowedActionsEnterprise: ["GET /enterprises/{enterprise}/actions/permissions/selected-actions"],
            getGithubActionsPermissionsEnterprise: ["GET /enterprises/{enterprise}/actions/permissions"],
            listSelectedOrganizationsEnabledGithubActionsEnterprise: ["GET /enterprises/{enterprise}/actions/permissions/organizations"],
            setAllowedActionsEnterprise: ["PUT /enterprises/{enterprise}/actions/permissions/selected-actions"],
            setGithubActionsPermissionsEnterprise: ["PUT /enterprises/{enterprise}/actions/permissions"],
            setSelectedOrganizationsEnabledGithubActionsEnterprise: ["PUT /enterprises/{enterprise}/actions/permissions/organizations"]
          },
          gists: {
            checkIsStarred: ["GET /gists/{gist_id}/star"],
            create: ["POST /gists"],
            createComment: ["POST /gists/{gist_id}/comments"],
            delete: ["DELETE /gists/{gist_id}"],
            deleteComment: ["DELETE /gists/{gist_id}/comments/{comment_id}"],
            fork: ["POST /gists/{gist_id}/forks"],
            get: ["GET /gists/{gist_id}"],
            getComment: ["GET /gists/{gist_id}/comments/{comment_id}"],
            getRevision: ["GET /gists/{gist_id}/{sha}"],
            list: ["GET /gists"],
            listComments: ["GET /gists/{gist_id}/comments"],
            listCommits: ["GET /gists/{gist_id}/commits"],
            listForUser: ["GET /users/{username}/gists"],
            listForks: ["GET /gists/{gist_id}/forks"],
            listPublic: ["GET /gists/public"],
            listStarred: ["GET /gists/starred"],
            star: ["PUT /gists/{gist_id}/star"],
            unstar: ["DELETE /gists/{gist_id}/star"],
            update: ["PATCH /gists/{gist_id}"],
            updateComment: ["PATCH /gists/{gist_id}/comments/{comment_id}"]
          },
          git: {
            createBlob: ["POST /repos/{owner}/{repo}/git/blobs"],
            createCommit: ["POST /repos/{owner}/{repo}/git/commits"],
            createRef: ["POST /repos/{owner}/{repo}/git/refs"],
            createTag: ["POST /repos/{owner}/{repo}/git/tags"],
            createTree: ["POST /repos/{owner}/{repo}/git/trees"],
            deleteRef: ["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],
            getBlob: ["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],
            getCommit: ["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],
            getRef: ["GET /repos/{owner}/{repo}/git/ref/{ref}"],
            getTag: ["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],
            getTree: ["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],
            listMatchingRefs: ["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],
            updateRef: ["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]
          },
          gitignore: {
            getAllTemplates: ["GET /gitignore/templates"],
            getTemplate: ["GET /gitignore/templates/{name}"]
          },
          interactions: {
            getRestrictionsForAuthenticatedUser: ["GET /user/interaction-limits"],
            getRestrictionsForOrg: ["GET /orgs/{org}/interaction-limits"],
            getRestrictionsForRepo: ["GET /repos/{owner}/{repo}/interaction-limits"],
            getRestrictionsForYourPublicRepos: ["GET /user/interaction-limits", {}, {
              renamed: ["interactions", "getRestrictionsForAuthenticatedUser"]
            }],
            removeRestrictionsForAuthenticatedUser: ["DELETE /user/interaction-limits"],
            removeRestrictionsForOrg: ["DELETE /orgs/{org}/interaction-limits"],
            removeRestrictionsForRepo: ["DELETE /repos/{owner}/{repo}/interaction-limits"],
            removeRestrictionsForYourPublicRepos: ["DELETE /user/interaction-limits", {}, {
              renamed: ["interactions", "removeRestrictionsForAuthenticatedUser"]
            }],
            setRestrictionsForAuthenticatedUser: ["PUT /user/interaction-limits"],
            setRestrictionsForOrg: ["PUT /orgs/{org}/interaction-limits"],
            setRestrictionsForRepo: ["PUT /repos/{owner}/{repo}/interaction-limits"],
            setRestrictionsForYourPublicRepos: ["PUT /user/interaction-limits", {}, {
              renamed: ["interactions", "setRestrictionsForAuthenticatedUser"]
            }]
          },
          issues: {
            addAssignees: ["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],
            addLabels: ["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],
            checkUserCanBeAssigned: ["GET /repos/{owner}/{repo}/assignees/{assignee}"],
            create: ["POST /repos/{owner}/{repo}/issues"],
            createComment: ["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],
            createLabel: ["POST /repos/{owner}/{repo}/labels"],
            createMilestone: ["POST /repos/{owner}/{repo}/milestones"],
            deleteComment: ["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],
            deleteLabel: ["DELETE /repos/{owner}/{repo}/labels/{name}"],
            deleteMilestone: ["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],
            get: ["GET /repos/{owner}/{repo}/issues/{issue_number}"],
            getComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],
            getEvent: ["GET /repos/{owner}/{repo}/issues/events/{event_id}"],
            getLabel: ["GET /repos/{owner}/{repo}/labels/{name}"],
            getMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],
            list: ["GET /issues"],
            listAssignees: ["GET /repos/{owner}/{repo}/assignees"],
            listComments: ["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],
            listCommentsForRepo: ["GET /repos/{owner}/{repo}/issues/comments"],
            listEvents: ["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],
            listEventsForRepo: ["GET /repos/{owner}/{repo}/issues/events"],
            listEventsForTimeline: ["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],
            listForAuthenticatedUser: ["GET /user/issues"],
            listForOrg: ["GET /orgs/{org}/issues"],
            listForRepo: ["GET /repos/{owner}/{repo}/issues"],
            listLabelsForMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],
            listLabelsForRepo: ["GET /repos/{owner}/{repo}/labels"],
            listLabelsOnIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],
            listMilestones: ["GET /repos/{owner}/{repo}/milestones"],
            lock: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],
            removeAllLabels: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],
            removeAssignees: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],
            removeLabel: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],
            setLabels: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],
            unlock: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],
            update: ["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],
            updateComment: ["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],
            updateLabel: ["PATCH /repos/{owner}/{repo}/labels/{name}"],
            updateMilestone: ["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]
          },
          licenses: {
            get: ["GET /licenses/{license}"],
            getAllCommonlyUsed: ["GET /licenses"],
            getForRepo: ["GET /repos/{owner}/{repo}/license"]
          },
          markdown: {
            render: ["POST /markdown"],
            renderRaw: ["POST /markdown/raw", {
              headers: {
                "content-type": "text/plain; charset=utf-8"
              }
            }]
          },
          meta: {
            get: ["GET /meta"],
            getOctocat: ["GET /octocat"],
            getZen: ["GET /zen"],
            root: ["GET /"]
          },
          migrations: {
            cancelImport: ["DELETE /repos/{owner}/{repo}/import"],
            deleteArchiveForAuthenticatedUser: ["DELETE /user/migrations/{migration_id}/archive"],
            deleteArchiveForOrg: ["DELETE /orgs/{org}/migrations/{migration_id}/archive"],
            downloadArchiveForOrg: ["GET /orgs/{org}/migrations/{migration_id}/archive"],
            getArchiveForAuthenticatedUser: ["GET /user/migrations/{migration_id}/archive"],
            getCommitAuthors: ["GET /repos/{owner}/{repo}/import/authors"],
            getImportStatus: ["GET /repos/{owner}/{repo}/import"],
            getLargeFiles: ["GET /repos/{owner}/{repo}/import/large_files"],
            getStatusForAuthenticatedUser: ["GET /user/migrations/{migration_id}"],
            getStatusForOrg: ["GET /orgs/{org}/migrations/{migration_id}"],
            listForAuthenticatedUser: ["GET /user/migrations"],
            listForOrg: ["GET /orgs/{org}/migrations"],
            listReposForAuthenticatedUser: ["GET /user/migrations/{migration_id}/repositories"],
            listReposForOrg: ["GET /orgs/{org}/migrations/{migration_id}/repositories"],
            listReposForUser: ["GET /user/migrations/{migration_id}/repositories", {}, {
              renamed: ["migrations", "listReposForAuthenticatedUser"]
            }],
            mapCommitAuthor: ["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],
            setLfsPreference: ["PATCH /repos/{owner}/{repo}/import/lfs"],
            startForAuthenticatedUser: ["POST /user/migrations"],
            startForOrg: ["POST /orgs/{org}/migrations"],
            startImport: ["PUT /repos/{owner}/{repo}/import"],
            unlockRepoForAuthenticatedUser: ["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],
            unlockRepoForOrg: ["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"],
            updateImport: ["PATCH /repos/{owner}/{repo}/import"]
          },
          orgs: {
            blockUser: ["PUT /orgs/{org}/blocks/{username}"],
            cancelInvitation: ["DELETE /orgs/{org}/invitations/{invitation_id}"],
            checkBlockedUser: ["GET /orgs/{org}/blocks/{username}"],
            checkMembershipForUser: ["GET /orgs/{org}/members/{username}"],
            checkPublicMembershipForUser: ["GET /orgs/{org}/public_members/{username}"],
            convertMemberToOutsideCollaborator: ["PUT /orgs/{org}/outside_collaborators/{username}"],
            createInvitation: ["POST /orgs/{org}/invitations"],
            createWebhook: ["POST /orgs/{org}/hooks"],
            deleteWebhook: ["DELETE /orgs/{org}/hooks/{hook_id}"],
            get: ["GET /orgs/{org}"],
            getMembershipForAuthenticatedUser: ["GET /user/memberships/orgs/{org}"],
            getMembershipForUser: ["GET /orgs/{org}/memberships/{username}"],
            getWebhook: ["GET /orgs/{org}/hooks/{hook_id}"],
            getWebhookConfigForOrg: ["GET /orgs/{org}/hooks/{hook_id}/config"],
            getWebhookDelivery: ["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],
            list: ["GET /organizations"],
            listAppInstallations: ["GET /orgs/{org}/installations"],
            listBlockedUsers: ["GET /orgs/{org}/blocks"],
            listFailedInvitations: ["GET /orgs/{org}/failed_invitations"],
            listForAuthenticatedUser: ["GET /user/orgs"],
            listForUser: ["GET /users/{username}/orgs"],
            listInvitationTeams: ["GET /orgs/{org}/invitations/{invitation_id}/teams"],
            listMembers: ["GET /orgs/{org}/members"],
            listMembershipsForAuthenticatedUser: ["GET /user/memberships/orgs"],
            listOutsideCollaborators: ["GET /orgs/{org}/outside_collaborators"],
            listPendingInvitations: ["GET /orgs/{org}/invitations"],
            listPublicMembers: ["GET /orgs/{org}/public_members"],
            listWebhookDeliveries: ["GET /orgs/{org}/hooks/{hook_id}/deliveries"],
            listWebhooks: ["GET /orgs/{org}/hooks"],
            pingWebhook: ["POST /orgs/{org}/hooks/{hook_id}/pings"],
            redeliverWebhookDelivery: ["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],
            removeMember: ["DELETE /orgs/{org}/members/{username}"],
            removeMembershipForUser: ["DELETE /orgs/{org}/memberships/{username}"],
            removeOutsideCollaborator: ["DELETE /orgs/{org}/outside_collaborators/{username}"],
            removePublicMembershipForAuthenticatedUser: ["DELETE /orgs/{org}/public_members/{username}"],
            setMembershipForUser: ["PUT /orgs/{org}/memberships/{username}"],
            setPublicMembershipForAuthenticatedUser: ["PUT /orgs/{org}/public_members/{username}"],
            unblockUser: ["DELETE /orgs/{org}/blocks/{username}"],
            update: ["PATCH /orgs/{org}"],
            updateMembershipForAuthenticatedUser: ["PATCH /user/memberships/orgs/{org}"],
            updateWebhook: ["PATCH /orgs/{org}/hooks/{hook_id}"],
            updateWebhookConfigForOrg: ["PATCH /orgs/{org}/hooks/{hook_id}/config"]
          },
          packages: {
            deletePackageForAuthenticatedUser: ["DELETE /user/packages/{package_type}/{package_name}"],
            deletePackageForOrg: ["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],
            deletePackageForUser: ["DELETE /users/{username}/packages/{package_type}/{package_name}"],
            deletePackageVersionForAuthenticatedUser: ["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],
            deletePackageVersionForOrg: ["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],
            deletePackageVersionForUser: ["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],
            getAllPackageVersionsForAPackageOwnedByAnOrg: ["GET /orgs/{org}/packages/{package_type}/{package_name}/versions", {}, {
              renamed: ["packages", "getAllPackageVersionsForPackageOwnedByOrg"]
            }],
            getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: ["GET /user/packages/{package_type}/{package_name}/versions", {}, {
              renamed: ["packages", "getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]
            }],
            getAllPackageVersionsForPackageOwnedByAuthenticatedUser: ["GET /user/packages/{package_type}/{package_name}/versions"],
            getAllPackageVersionsForPackageOwnedByOrg: ["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],
            getAllPackageVersionsForPackageOwnedByUser: ["GET /users/{username}/packages/{package_type}/{package_name}/versions"],
            getPackageForAuthenticatedUser: ["GET /user/packages/{package_type}/{package_name}"],
            getPackageForOrganization: ["GET /orgs/{org}/packages/{package_type}/{package_name}"],
            getPackageForUser: ["GET /users/{username}/packages/{package_type}/{package_name}"],
            getPackageVersionForAuthenticatedUser: ["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],
            getPackageVersionForOrganization: ["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],
            getPackageVersionForUser: ["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],
            listPackagesForAuthenticatedUser: ["GET /user/packages"],
            listPackagesForOrganization: ["GET /orgs/{org}/packages"],
            listPackagesForUser: ["GET /users/{username}/packages"],
            restorePackageForAuthenticatedUser: ["POST /user/packages/{package_type}/{package_name}/restore{?token}"],
            restorePackageForOrg: ["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],
            restorePackageForUser: ["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],
            restorePackageVersionForAuthenticatedUser: ["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],
            restorePackageVersionForOrg: ["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],
            restorePackageVersionForUser: ["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]
          },
          projects: {
            addCollaborator: ["PUT /projects/{project_id}/collaborators/{username}"],
            createCard: ["POST /projects/columns/{column_id}/cards"],
            createColumn: ["POST /projects/{project_id}/columns"],
            createForAuthenticatedUser: ["POST /user/projects"],
            createForOrg: ["POST /orgs/{org}/projects"],
            createForRepo: ["POST /repos/{owner}/{repo}/projects"],
            delete: ["DELETE /projects/{project_id}"],
            deleteCard: ["DELETE /projects/columns/cards/{card_id}"],
            deleteColumn: ["DELETE /projects/columns/{column_id}"],
            get: ["GET /projects/{project_id}"],
            getCard: ["GET /projects/columns/cards/{card_id}"],
            getColumn: ["GET /projects/columns/{column_id}"],
            getPermissionForUser: ["GET /projects/{project_id}/collaborators/{username}/permission"],
            listCards: ["GET /projects/columns/{column_id}/cards"],
            listCollaborators: ["GET /projects/{project_id}/collaborators"],
            listColumns: ["GET /projects/{project_id}/columns"],
            listForOrg: ["GET /orgs/{org}/projects"],
            listForRepo: ["GET /repos/{owner}/{repo}/projects"],
            listForUser: ["GET /users/{username}/projects"],
            moveCard: ["POST /projects/columns/cards/{card_id}/moves"],
            moveColumn: ["POST /projects/columns/{column_id}/moves"],
            removeCollaborator: ["DELETE /projects/{project_id}/collaborators/{username}"],
            update: ["PATCH /projects/{project_id}"],
            updateCard: ["PATCH /projects/columns/cards/{card_id}"],
            updateColumn: ["PATCH /projects/columns/{column_id}"]
          },
          pulls: {
            checkIfMerged: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
            create: ["POST /repos/{owner}/{repo}/pulls"],
            createReplyForReviewComment: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],
            createReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
            createReviewComment: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],
            deletePendingReview: ["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],
            deleteReviewComment: ["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
            dismissReview: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],
            get: ["GET /repos/{owner}/{repo}/pulls/{pull_number}"],
            getReview: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],
            getReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
            list: ["GET /repos/{owner}/{repo}/pulls"],
            listCommentsForReview: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],
            listCommits: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],
            listFiles: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],
            listRequestedReviewers: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],
            listReviewComments: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],
            listReviewCommentsForRepo: ["GET /repos/{owner}/{repo}/pulls/comments"],
            listReviews: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
            merge: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
            removeRequestedReviewers: ["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],
            requestReviewers: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],
            submitReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],
            update: ["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],
            updateBranch: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],
            updateReview: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],
            updateReviewComment: ["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]
          },
          rateLimit: {
            get: ["GET /rate_limit"]
          },
          reactions: {
            createForCommitComment: ["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],
            createForIssue: ["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],
            createForIssueComment: ["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],
            createForPullRequestReviewComment: ["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],
            createForRelease: ["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],
            createForTeamDiscussionCommentInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],
            createForTeamDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],
            deleteForCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],
            deleteForIssue: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],
            deleteForIssueComment: ["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],
            deleteForPullRequestComment: ["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],
            deleteForTeamDiscussion: ["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],
            deleteForTeamDiscussionComment: ["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],
            listForCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],
            listForIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],
            listForIssueComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],
            listForPullRequestReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],
            listForTeamDiscussionCommentInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],
            listForTeamDiscussionInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]
          },
          repos: {
            acceptInvitation: ["PATCH /user/repository_invitations/{invitation_id}", {}, {
              renamed: ["repos", "acceptInvitationForAuthenticatedUser"]
            }],
            acceptInvitationForAuthenticatedUser: ["PATCH /user/repository_invitations/{invitation_id}"],
            addAppAccessRestrictions: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", {}, {
              mapToData: "apps"
            }],
            addCollaborator: ["PUT /repos/{owner}/{repo}/collaborators/{username}"],
            addStatusCheckContexts: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", {}, {
              mapToData: "contexts"
            }],
            addTeamAccessRestrictions: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", {}, {
              mapToData: "teams"
            }],
            addUserAccessRestrictions: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", {}, {
              mapToData: "users"
            }],
            checkCollaborator: ["GET /repos/{owner}/{repo}/collaborators/{username}"],
            checkVulnerabilityAlerts: ["GET /repos/{owner}/{repo}/vulnerability-alerts"],
            compareCommits: ["GET /repos/{owner}/{repo}/compare/{base}...{head}"],
            compareCommitsWithBasehead: ["GET /repos/{owner}/{repo}/compare/{basehead}"],
            createAutolink: ["POST /repos/{owner}/{repo}/autolinks"],
            createCommitComment: ["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],
            createCommitSignatureProtection: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],
            createCommitStatus: ["POST /repos/{owner}/{repo}/statuses/{sha}"],
            createDeployKey: ["POST /repos/{owner}/{repo}/keys"],
            createDeployment: ["POST /repos/{owner}/{repo}/deployments"],
            createDeploymentStatus: ["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],
            createDispatchEvent: ["POST /repos/{owner}/{repo}/dispatches"],
            createForAuthenticatedUser: ["POST /user/repos"],
            createFork: ["POST /repos/{owner}/{repo}/forks"],
            createInOrg: ["POST /orgs/{org}/repos"],
            createOrUpdateEnvironment: ["PUT /repos/{owner}/{repo}/environments/{environment_name}"],
            createOrUpdateFileContents: ["PUT /repos/{owner}/{repo}/contents/{path}"],
            createPagesSite: ["POST /repos/{owner}/{repo}/pages"],
            createRelease: ["POST /repos/{owner}/{repo}/releases"],
            createUsingTemplate: ["POST /repos/{template_owner}/{template_repo}/generate"],
            createWebhook: ["POST /repos/{owner}/{repo}/hooks"],
            declineInvitation: ["DELETE /user/repository_invitations/{invitation_id}", {}, {
              renamed: ["repos", "declineInvitationForAuthenticatedUser"]
            }],
            declineInvitationForAuthenticatedUser: ["DELETE /user/repository_invitations/{invitation_id}"],
            delete: ["DELETE /repos/{owner}/{repo}"],
            deleteAccessRestrictions: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],
            deleteAdminBranchProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],
            deleteAnEnvironment: ["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],
            deleteAutolink: ["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],
            deleteBranchProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],
            deleteCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],
            deleteCommitSignatureProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],
            deleteDeployKey: ["DELETE /repos/{owner}/{repo}/keys/{key_id}"],
            deleteDeployment: ["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],
            deleteFile: ["DELETE /repos/{owner}/{repo}/contents/{path}"],
            deleteInvitation: ["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],
            deletePagesSite: ["DELETE /repos/{owner}/{repo}/pages"],
            deletePullRequestReviewProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],
            deleteRelease: ["DELETE /repos/{owner}/{repo}/releases/{release_id}"],
            deleteReleaseAsset: ["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],
            deleteWebhook: ["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],
            disableAutomatedSecurityFixes: ["DELETE /repos/{owner}/{repo}/automated-security-fixes"],
            disableLfsForRepo: ["DELETE /repos/{owner}/{repo}/lfs"],
            disableVulnerabilityAlerts: ["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],
            downloadArchive: ["GET /repos/{owner}/{repo}/zipball/{ref}", {}, {
              renamed: ["repos", "downloadZipballArchive"]
            }],
            downloadTarballArchive: ["GET /repos/{owner}/{repo}/tarball/{ref}"],
            downloadZipballArchive: ["GET /repos/{owner}/{repo}/zipball/{ref}"],
            enableAutomatedSecurityFixes: ["PUT /repos/{owner}/{repo}/automated-security-fixes"],
            enableLfsForRepo: ["PUT /repos/{owner}/{repo}/lfs"],
            enableVulnerabilityAlerts: ["PUT /repos/{owner}/{repo}/vulnerability-alerts"],
            generateReleaseNotes: ["POST /repos/{owner}/{repo}/releases/generate-notes"],
            get: ["GET /repos/{owner}/{repo}"],
            getAccessRestrictions: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],
            getAdminBranchProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],
            getAllEnvironments: ["GET /repos/{owner}/{repo}/environments"],
            getAllStatusCheckContexts: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],
            getAllTopics: ["GET /repos/{owner}/{repo}/topics", {
              mediaType: {
                previews: ["mercy"]
              }
            }],
            getAppsWithAccessToProtectedBranch: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],
            getAutolink: ["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],
            getBranch: ["GET /repos/{owner}/{repo}/branches/{branch}"],
            getBranchProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection"],
            getClones: ["GET /repos/{owner}/{repo}/traffic/clones"],
            getCodeFrequencyStats: ["GET /repos/{owner}/{repo}/stats/code_frequency"],
            getCollaboratorPermissionLevel: ["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],
            getCombinedStatusForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/status"],
            getCommit: ["GET /repos/{owner}/{repo}/commits/{ref}"],
            getCommitActivityStats: ["GET /repos/{owner}/{repo}/stats/commit_activity"],
            getCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}"],
            getCommitSignatureProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],
            getCommunityProfileMetrics: ["GET /repos/{owner}/{repo}/community/profile"],
            getContent: ["GET /repos/{owner}/{repo}/contents/{path}"],
            getContributorsStats: ["GET /repos/{owner}/{repo}/stats/contributors"],
            getDeployKey: ["GET /repos/{owner}/{repo}/keys/{key_id}"],
            getDeployment: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],
            getDeploymentStatus: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],
            getEnvironment: ["GET /repos/{owner}/{repo}/environments/{environment_name}"],
            getLatestPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/latest"],
            getLatestRelease: ["GET /repos/{owner}/{repo}/releases/latest"],
            getPages: ["GET /repos/{owner}/{repo}/pages"],
            getPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],
            getPagesHealthCheck: ["GET /repos/{owner}/{repo}/pages/health"],
            getParticipationStats: ["GET /repos/{owner}/{repo}/stats/participation"],
            getPullRequestReviewProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],
            getPunchCardStats: ["GET /repos/{owner}/{repo}/stats/punch_card"],
            getReadme: ["GET /repos/{owner}/{repo}/readme"],
            getReadmeInDirectory: ["GET /repos/{owner}/{repo}/readme/{dir}"],
            getRelease: ["GET /repos/{owner}/{repo}/releases/{release_id}"],
            getReleaseAsset: ["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],
            getReleaseByTag: ["GET /repos/{owner}/{repo}/releases/tags/{tag}"],
            getStatusChecksProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],
            getTeamsWithAccessToProtectedBranch: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],
            getTopPaths: ["GET /repos/{owner}/{repo}/traffic/popular/paths"],
            getTopReferrers: ["GET /repos/{owner}/{repo}/traffic/popular/referrers"],
            getUsersWithAccessToProtectedBranch: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],
            getViews: ["GET /repos/{owner}/{repo}/traffic/views"],
            getWebhook: ["GET /repos/{owner}/{repo}/hooks/{hook_id}"],
            getWebhookConfigForRepo: ["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],
            getWebhookDelivery: ["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],
            listAutolinks: ["GET /repos/{owner}/{repo}/autolinks"],
            listBranches: ["GET /repos/{owner}/{repo}/branches"],
            listBranchesForHeadCommit: ["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],
            listCollaborators: ["GET /repos/{owner}/{repo}/collaborators"],
            listCommentsForCommit: ["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],
            listCommitCommentsForRepo: ["GET /repos/{owner}/{repo}/comments"],
            listCommitStatusesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],
            listCommits: ["GET /repos/{owner}/{repo}/commits"],
            listContributors: ["GET /repos/{owner}/{repo}/contributors"],
            listDeployKeys: ["GET /repos/{owner}/{repo}/keys"],
            listDeploymentStatuses: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],
            listDeployments: ["GET /repos/{owner}/{repo}/deployments"],
            listForAuthenticatedUser: ["GET /user/repos"],
            listForOrg: ["GET /orgs/{org}/repos"],
            listForUser: ["GET /users/{username}/repos"],
            listForks: ["GET /repos/{owner}/{repo}/forks"],
            listInvitations: ["GET /repos/{owner}/{repo}/invitations"],
            listInvitationsForAuthenticatedUser: ["GET /user/repository_invitations"],
            listLanguages: ["GET /repos/{owner}/{repo}/languages"],
            listPagesBuilds: ["GET /repos/{owner}/{repo}/pages/builds"],
            listPublic: ["GET /repositories"],
            listPullRequestsAssociatedWithCommit: ["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],
            listReleaseAssets: ["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],
            listReleases: ["GET /repos/{owner}/{repo}/releases"],
            listTags: ["GET /repos/{owner}/{repo}/tags"],
            listTeams: ["GET /repos/{owner}/{repo}/teams"],
            listWebhookDeliveries: ["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],
            listWebhooks: ["GET /repos/{owner}/{repo}/hooks"],
            merge: ["POST /repos/{owner}/{repo}/merges"],
            mergeUpstream: ["POST /repos/{owner}/{repo}/merge-upstream"],
            pingWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],
            redeliverWebhookDelivery: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],
            removeAppAccessRestrictions: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", {}, {
              mapToData: "apps"
            }],
            removeCollaborator: ["DELETE /repos/{owner}/{repo}/collaborators/{username}"],
            removeStatusCheckContexts: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", {}, {
              mapToData: "contexts"
            }],
            removeStatusCheckProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],
            removeTeamAccessRestrictions: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", {}, {
              mapToData: "teams"
            }],
            removeUserAccessRestrictions: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", {}, {
              mapToData: "users"
            }],
            renameBranch: ["POST /repos/{owner}/{repo}/branches/{branch}/rename"],
            replaceAllTopics: ["PUT /repos/{owner}/{repo}/topics", {
              mediaType: {
                previews: ["mercy"]
              }
            }],
            requestPagesBuild: ["POST /repos/{owner}/{repo}/pages/builds"],
            setAdminBranchProtection: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],
            setAppAccessRestrictions: ["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", {}, {
              mapToData: "apps"
            }],
            setStatusCheckContexts: ["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", {}, {
              mapToData: "contexts"
            }],
            setTeamAccessRestrictions: ["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", {}, {
              mapToData: "teams"
            }],
            setUserAccessRestrictions: ["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", {}, {
              mapToData: "users"
            }],
            testPushWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],
            transfer: ["POST /repos/{owner}/{repo}/transfer"],
            update: ["PATCH /repos/{owner}/{repo}"],
            updateBranchProtection: ["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],
            updateCommitComment: ["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],
            updateInformationAboutPagesSite: ["PUT /repos/{owner}/{repo}/pages"],
            updateInvitation: ["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],
            updatePullRequestReviewProtection: ["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],
            updateRelease: ["PATCH /repos/{owner}/{repo}/releases/{release_id}"],
            updateReleaseAsset: ["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],
            updateStatusCheckPotection: ["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks", {}, {
              renamed: ["repos", "updateStatusCheckProtection"]
            }],
            updateStatusCheckProtection: ["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],
            updateWebhook: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],
            updateWebhookConfigForRepo: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],
            uploadReleaseAsset: ["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}", {
              baseUrl: "https://uploads.github.com"
            }]
          },
          search: {
            code: ["GET /search/code"],
            commits: ["GET /search/commits"],
            issuesAndPullRequests: ["GET /search/issues"],
            labels: ["GET /search/labels"],
            repos: ["GET /search/repositories"],
            topics: ["GET /search/topics", {
              mediaType: {
                previews: ["mercy"]
              }
            }],
            users: ["GET /search/users"]
          },
          secretScanning: {
            getAlert: ["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],
            listAlertsForOrg: ["GET /orgs/{org}/secret-scanning/alerts"],
            listAlertsForRepo: ["GET /repos/{owner}/{repo}/secret-scanning/alerts"],
            updateAlert: ["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]
          },
          teams: {
            addOrUpdateMembershipForUserInOrg: ["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],
            addOrUpdateProjectPermissionsInOrg: ["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],
            addOrUpdateRepoPermissionsInOrg: ["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],
            checkPermissionsForProjectInOrg: ["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],
            checkPermissionsForRepoInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],
            create: ["POST /orgs/{org}/teams"],
            createDiscussionCommentInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],
            createDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions"],
            deleteDiscussionCommentInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],
            deleteDiscussionInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],
            deleteInOrg: ["DELETE /orgs/{org}/teams/{team_slug}"],
            getByName: ["GET /orgs/{org}/teams/{team_slug}"],
            getDiscussionCommentInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],
            getDiscussionInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],
            getMembershipForUserInOrg: ["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],
            list: ["GET /orgs/{org}/teams"],
            listChildInOrg: ["GET /orgs/{org}/teams/{team_slug}/teams"],
            listDiscussionCommentsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],
            listDiscussionsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions"],
            listForAuthenticatedUser: ["GET /user/teams"],
            listMembersInOrg: ["GET /orgs/{org}/teams/{team_slug}/members"],
            listPendingInvitationsInOrg: ["GET /orgs/{org}/teams/{team_slug}/invitations"],
            listProjectsInOrg: ["GET /orgs/{org}/teams/{team_slug}/projects"],
            listReposInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos"],
            removeMembershipForUserInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],
            removeProjectInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],
            removeRepoInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],
            updateDiscussionCommentInOrg: ["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],
            updateDiscussionInOrg: ["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],
            updateInOrg: ["PATCH /orgs/{org}/teams/{team_slug}"]
          },
          users: {
            addEmailForAuthenticated: ["POST /user/emails", {}, {
              renamed: ["users", "addEmailForAuthenticatedUser"]
            }],
            addEmailForAuthenticatedUser: ["POST /user/emails"],
            block: ["PUT /user/blocks/{username}"],
            checkBlocked: ["GET /user/blocks/{username}"],
            checkFollowingForUser: ["GET /users/{username}/following/{target_user}"],
            checkPersonIsFollowedByAuthenticated: ["GET /user/following/{username}"],
            createGpgKeyForAuthenticated: ["POST /user/gpg_keys", {}, {
              renamed: ["users", "createGpgKeyForAuthenticatedUser"]
            }],
            createGpgKeyForAuthenticatedUser: ["POST /user/gpg_keys"],
            createPublicSshKeyForAuthenticated: ["POST /user/keys", {}, {
              renamed: ["users", "createPublicSshKeyForAuthenticatedUser"]
            }],
            createPublicSshKeyForAuthenticatedUser: ["POST /user/keys"],
            deleteEmailForAuthenticated: ["DELETE /user/emails", {}, {
              renamed: ["users", "deleteEmailForAuthenticatedUser"]
            }],
            deleteEmailForAuthenticatedUser: ["DELETE /user/emails"],
            deleteGpgKeyForAuthenticated: ["DELETE /user/gpg_keys/{gpg_key_id}", {}, {
              renamed: ["users", "deleteGpgKeyForAuthenticatedUser"]
            }],
            deleteGpgKeyForAuthenticatedUser: ["DELETE /user/gpg_keys/{gpg_key_id}"],
            deletePublicSshKeyForAuthenticated: ["DELETE /user/keys/{key_id}", {}, {
              renamed: ["users", "deletePublicSshKeyForAuthenticatedUser"]
            }],
            deletePublicSshKeyForAuthenticatedUser: ["DELETE /user/keys/{key_id}"],
            follow: ["PUT /user/following/{username}"],
            getAuthenticated: ["GET /user"],
            getByUsername: ["GET /users/{username}"],
            getContextForUser: ["GET /users/{username}/hovercard"],
            getGpgKeyForAuthenticated: ["GET /user/gpg_keys/{gpg_key_id}", {}, {
              renamed: ["users", "getGpgKeyForAuthenticatedUser"]
            }],
            getGpgKeyForAuthenticatedUser: ["GET /user/gpg_keys/{gpg_key_id}"],
            getPublicSshKeyForAuthenticated: ["GET /user/keys/{key_id}", {}, {
              renamed: ["users", "getPublicSshKeyForAuthenticatedUser"]
            }],
            getPublicSshKeyForAuthenticatedUser: ["GET /user/keys/{key_id}"],
            list: ["GET /users"],
            listBlockedByAuthenticated: ["GET /user/blocks", {}, {
              renamed: ["users", "listBlockedByAuthenticatedUser"]
            }],
            listBlockedByAuthenticatedUser: ["GET /user/blocks"],
            listEmailsForAuthenticated: ["GET /user/emails", {}, {
              renamed: ["users", "listEmailsForAuthenticatedUser"]
            }],
            listEmailsForAuthenticatedUser: ["GET /user/emails"],
            listFollowedByAuthenticated: ["GET /user/following", {}, {
              renamed: ["users", "listFollowedByAuthenticatedUser"]
            }],
            listFollowedByAuthenticatedUser: ["GET /user/following"],
            listFollowersForAuthenticatedUser: ["GET /user/followers"],
            listFollowersForUser: ["GET /users/{username}/followers"],
            listFollowingForUser: ["GET /users/{username}/following"],
            listGpgKeysForAuthenticated: ["GET /user/gpg_keys", {}, {
              renamed: ["users", "listGpgKeysForAuthenticatedUser"]
            }],
            listGpgKeysForAuthenticatedUser: ["GET /user/gpg_keys"],
            listGpgKeysForUser: ["GET /users/{username}/gpg_keys"],
            listPublicEmailsForAuthenticated: ["GET /user/public_emails", {}, {
              renamed: ["users", "listPublicEmailsForAuthenticatedUser"]
            }],
            listPublicEmailsForAuthenticatedUser: ["GET /user/public_emails"],
            listPublicKeysForUser: ["GET /users/{username}/keys"],
            listPublicSshKeysForAuthenticated: ["GET /user/keys", {}, {
              renamed: ["users", "listPublicSshKeysForAuthenticatedUser"]
            }],
            listPublicSshKeysForAuthenticatedUser: ["GET /user/keys"],
            setPrimaryEmailVisibilityForAuthenticated: ["PATCH /user/email/visibility", {}, {
              renamed: ["users", "setPrimaryEmailVisibilityForAuthenticatedUser"]
            }],
            setPrimaryEmailVisibilityForAuthenticatedUser: ["PATCH /user/email/visibility"],
            unblock: ["DELETE /user/blocks/{username}"],
            unfollow: ["DELETE /user/following/{username}"],
            updateAuthenticated: ["PATCH /user"]
          }
        };
        var VERSION = "5.13.0";
        function endpointsToMethods(octokit, endpointsMap) {
          const newMethods = {};
          for (const [scope, endpoints] of Object.entries(endpointsMap)) {
            for (const [methodName, endpoint] of Object.entries(endpoints)) {
              const [route, defaults, decorations] = endpoint;
              const [method, url] = route.split(/ /);
              const endpointDefaults = Object.assign({
                method,
                url
              }, defaults);
              if (!newMethods[scope]) {
                newMethods[scope] = {};
              }
              const scopeMethods = newMethods[scope];
              if (decorations) {
                scopeMethods[methodName] = decorate(octokit, scope, methodName, endpointDefaults, decorations);
                continue;
              }
              scopeMethods[methodName] = octokit.request.defaults(endpointDefaults);
            }
          }
          return newMethods;
        }
        function decorate(octokit, scope, methodName, defaults, decorations) {
          const requestWithDefaults = octokit.request.defaults(defaults);
          function withDecorations(...args) {
            let options = requestWithDefaults.endpoint.merge(...args);
            if (decorations.mapToData) {
              options = Object.assign({}, options, {
                data: options[decorations.mapToData],
                [decorations.mapToData]: void 0
              });
              return requestWithDefaults(options);
            }
            if (decorations.renamed) {
              const [newScope, newMethodName] = decorations.renamed;
              octokit.log.warn(`octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`);
            }
            if (decorations.deprecated) {
              octokit.log.warn(decorations.deprecated);
            }
            if (decorations.renamedParameters) {
              const options2 = requestWithDefaults.endpoint.merge(...args);
              for (const [name2, alias] of Object.entries(decorations.renamedParameters)) {
                if (name2 in options2) {
                  octokit.log.warn(`"${name2}" parameter is deprecated for "octokit.${scope}.${methodName}()". Use "${alias}" instead`);
                  if (!(alias in options2)) {
                    options2[alias] = options2[name2];
                  }
                  delete options2[name2];
                }
              }
              return requestWithDefaults(options2);
            }
            return requestWithDefaults(...args);
          }
          return Object.assign(withDecorations, requestWithDefaults);
        }
        function restEndpointMethods(octokit) {
          const api = endpointsToMethods(octokit, Endpoints);
          return {
            rest: api
          };
        }
        restEndpointMethods.VERSION = VERSION;
        function legacyRestEndpointMethods(octokit) {
          const api = endpointsToMethods(octokit, Endpoints);
          return _objectSpread2(_objectSpread2({}, api), {}, {
            rest: api
          });
        }
        legacyRestEndpointMethods.VERSION = VERSION;
        exports2.legacyRestEndpointMethods = legacyRestEndpointMethods;
        exports2.restEndpointMethods = restEndpointMethods;
      }
    });
    var require_dist_node12 = __commonJS2({
      "node_modules/@octokit/rest/dist-node/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var core = require_dist_node8();
        var pluginRequestLog = require_dist_node9();
        var pluginPaginateRest = require_dist_node10();
        var pluginRestEndpointMethods = require_dist_node11();
        var VERSION = "18.12.0";
        var Octokit2 = core.Octokit.plugin(pluginRequestLog.requestLog, pluginRestEndpointMethods.legacyRestEndpointMethods, pluginPaginateRest.paginateRest).defaults({
          userAgent: `octokit-rest.js/${VERSION}`
        });
        exports2.Octokit = Octokit2;
      }
    });
    var require_btoa_node = __commonJS2({
      "node_modules/btoa-lite/btoa-node.js"(exports2, module22) {
        module22.exports = function btoa(str) {
          return new Buffer(str).toString("base64");
        };
      }
    });
    var require_dist_node13 = __commonJS2({
      "node_modules/@octokit/oauth-authorization-url/dist-node/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        function oauthAuthorizationUrl(options) {
          const clientType = options.clientType || "oauth-app";
          const baseUrl = options.baseUrl || "https://github.com";
          const result = {
            clientType,
            allowSignup: options.allowSignup === false ? false : true,
            clientId: options.clientId,
            login: options.login || null,
            redirectUrl: options.redirectUrl || null,
            state: options.state || Math.random().toString(36).substr(2),
            url: ""
          };
          if (clientType === "oauth-app") {
            const scopes = "scopes" in options ? options.scopes : [];
            result.scopes = typeof scopes === "string" ? scopes.split(/[,\s]+/).filter(Boolean) : scopes;
          }
          result.url = urlBuilderAuthorize(`${baseUrl}/login/oauth/authorize`, result);
          return result;
        }
        function urlBuilderAuthorize(base, options) {
          const map = {
            allowSignup: "allow_signup",
            clientId: "client_id",
            login: "login",
            redirectUrl: "redirect_uri",
            scopes: "scope",
            state: "state"
          };
          let url = base;
          Object.keys(map).filter((k) => options[k] !== null).filter((k) => {
            if (k !== "scopes")
              return true;
            if (options.clientType === "github-app")
              return false;
            return !Array.isArray(options[k]) || options[k].length > 0;
          }).map((key) => [map[key], `${options[key]}`]).forEach(([key, value], index) => {
            url += index === 0 ? `?` : "&";
            url += `${key}=${encodeURIComponent(value)}`;
          });
          return url;
        }
        exports2.oauthAuthorizationUrl = oauthAuthorizationUrl;
      }
    });
    var require_dist_node14 = __commonJS2({
      "node_modules/@octokit/oauth-methods/dist-node/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        function _interopDefault(ex) {
          return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
        }
        var oauthAuthorizationUrl = require_dist_node13();
        var request = require_dist_node5();
        var requestError = require_dist_node4();
        var btoa = _interopDefault(require_btoa_node());
        var VERSION = "1.2.6";
        function ownKeys(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly) {
              symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            }
            keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread2(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            if (i % 2) {
              ownKeys(Object(source), true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function _objectWithoutPropertiesLoose(source, excluded) {
          if (source == null)
            return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;
          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            target[key] = source[key];
          }
          return target;
        }
        function _objectWithoutProperties(source, excluded) {
          if (source == null)
            return {};
          var target = _objectWithoutPropertiesLoose(source, excluded);
          var key, i;
          if (Object.getOwnPropertySymbols) {
            var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
            for (i = 0; i < sourceSymbolKeys.length; i++) {
              key = sourceSymbolKeys[i];
              if (excluded.indexOf(key) >= 0)
                continue;
              if (!Object.prototype.propertyIsEnumerable.call(source, key))
                continue;
              target[key] = source[key];
            }
          }
          return target;
        }
        function requestToOAuthBaseUrl(request2) {
          const endpointDefaults = request2.endpoint.DEFAULTS;
          return /^https:\/\/(api\.)?github\.com$/.test(endpointDefaults.baseUrl) ? "https://github.com" : endpointDefaults.baseUrl.replace("/api/v3", "");
        }
        async function oauthRequest(request2, route, parameters) {
          const withOAuthParameters = _objectSpread2({
            baseUrl: requestToOAuthBaseUrl(request2),
            headers: {
              accept: "application/json"
            }
          }, parameters);
          const response = await request2(route, withOAuthParameters);
          if ("error" in response.data) {
            const error = new requestError.RequestError(`${response.data.error_description} (${response.data.error}, ${response.data.error_uri})`, 400, {
              request: request2.endpoint.merge(route, withOAuthParameters),
              headers: response.headers
            });
            error.response = response;
            throw error;
          }
          return response;
        }
        var _excluded = ["request"];
        function getWebFlowAuthorizationUrl(_ref) {
          let {
            request: request$1 = request.request
          } = _ref, options = _objectWithoutProperties(_ref, _excluded);
          const baseUrl = requestToOAuthBaseUrl(request$1);
          return oauthAuthorizationUrl.oauthAuthorizationUrl(_objectSpread2(_objectSpread2({}, options), {}, {
            baseUrl
          }));
        }
        async function exchangeWebFlowCode(options) {
          const request$1 = options.request || request.request;
          const response = await oauthRequest(request$1, "POST /login/oauth/access_token", {
            client_id: options.clientId,
            client_secret: options.clientSecret,
            code: options.code,
            redirect_uri: options.redirectUrl
          });
          const authentication = {
            clientType: options.clientType,
            clientId: options.clientId,
            clientSecret: options.clientSecret,
            token: response.data.access_token,
            scopes: response.data.scope.split(/\s+/).filter(Boolean)
          };
          if (options.clientType === "github-app") {
            if ("refresh_token" in response.data) {
              const apiTimeInMs = new Date(response.headers.date).getTime();
              authentication.refreshToken = response.data.refresh_token, authentication.expiresAt = toTimestamp(apiTimeInMs, response.data.expires_in), authentication.refreshTokenExpiresAt = toTimestamp(apiTimeInMs, response.data.refresh_token_expires_in);
            }
            delete authentication.scopes;
          }
          return _objectSpread2(_objectSpread2({}, response), {}, {
            authentication
          });
        }
        function toTimestamp(apiTimeInMs, expirationInSeconds) {
          return new Date(apiTimeInMs + expirationInSeconds * 1e3).toISOString();
        }
        async function createDeviceCode(options) {
          const request$1 = options.request || request.request;
          const parameters = {
            client_id: options.clientId
          };
          if ("scopes" in options && Array.isArray(options.scopes)) {
            parameters.scope = options.scopes.join(" ");
          }
          return oauthRequest(request$1, "POST /login/device/code", parameters);
        }
        async function exchangeDeviceCode(options) {
          const request$1 = options.request || request.request;
          const response = await oauthRequest(request$1, "POST /login/oauth/access_token", {
            client_id: options.clientId,
            device_code: options.code,
            grant_type: "urn:ietf:params:oauth:grant-type:device_code"
          });
          const authentication = {
            clientType: options.clientType,
            clientId: options.clientId,
            token: response.data.access_token,
            scopes: response.data.scope.split(/\s+/).filter(Boolean)
          };
          if ("clientSecret" in options) {
            authentication.clientSecret = options.clientSecret;
          }
          if (options.clientType === "github-app") {
            if ("refresh_token" in response.data) {
              const apiTimeInMs = new Date(response.headers.date).getTime();
              authentication.refreshToken = response.data.refresh_token, authentication.expiresAt = toTimestamp$1(apiTimeInMs, response.data.expires_in), authentication.refreshTokenExpiresAt = toTimestamp$1(apiTimeInMs, response.data.refresh_token_expires_in);
            }
            delete authentication.scopes;
          }
          return _objectSpread2(_objectSpread2({}, response), {}, {
            authentication
          });
        }
        function toTimestamp$1(apiTimeInMs, expirationInSeconds) {
          return new Date(apiTimeInMs + expirationInSeconds * 1e3).toISOString();
        }
        async function checkToken(options) {
          const request$1 = options.request || request.request;
          const response = await request$1("POST /applications/{client_id}/token", {
            headers: {
              authorization: `basic ${btoa(`${options.clientId}:${options.clientSecret}`)}`
            },
            client_id: options.clientId,
            access_token: options.token
          });
          const authentication = {
            clientType: options.clientType,
            clientId: options.clientId,
            clientSecret: options.clientSecret,
            token: options.token,
            scopes: response.data.scopes
          };
          if (response.data.expires_at)
            authentication.expiresAt = response.data.expires_at;
          if (options.clientType === "github-app") {
            delete authentication.scopes;
          }
          return _objectSpread2(_objectSpread2({}, response), {}, {
            authentication
          });
        }
        async function refreshToken(options) {
          const request$1 = options.request || request.request;
          const response = await oauthRequest(request$1, "POST /login/oauth/access_token", {
            client_id: options.clientId,
            client_secret: options.clientSecret,
            grant_type: "refresh_token",
            refresh_token: options.refreshToken
          });
          const apiTimeInMs = new Date(response.headers.date).getTime();
          const authentication = {
            clientType: "github-app",
            clientId: options.clientId,
            clientSecret: options.clientSecret,
            token: response.data.access_token,
            refreshToken: response.data.refresh_token,
            expiresAt: toTimestamp$2(apiTimeInMs, response.data.expires_in),
            refreshTokenExpiresAt: toTimestamp$2(apiTimeInMs, response.data.refresh_token_expires_in)
          };
          return _objectSpread2(_objectSpread2({}, response), {}, {
            authentication
          });
        }
        function toTimestamp$2(apiTimeInMs, expirationInSeconds) {
          return new Date(apiTimeInMs + expirationInSeconds * 1e3).toISOString();
        }
        var _excluded$1 = ["request", "clientType", "clientId", "clientSecret", "token"];
        async function scopeToken(options) {
          const {
            request: request$1,
            clientType,
            clientId,
            clientSecret,
            token
          } = options, requestOptions = _objectWithoutProperties(options, _excluded$1);
          const response = await (request$1 || request.request)("POST /applications/{client_id}/token/scoped", _objectSpread2({
            headers: {
              authorization: `basic ${btoa(`${clientId}:${clientSecret}`)}`
            },
            client_id: clientId,
            access_token: token
          }, requestOptions));
          const authentication = Object.assign({
            clientType,
            clientId,
            clientSecret,
            token: response.data.token
          }, response.data.expires_at ? {
            expiresAt: response.data.expires_at
          } : {});
          return _objectSpread2(_objectSpread2({}, response), {}, {
            authentication
          });
        }
        async function resetToken(options) {
          const request$1 = options.request || request.request;
          const auth = btoa(`${options.clientId}:${options.clientSecret}`);
          const response = await request$1("PATCH /applications/{client_id}/token", {
            headers: {
              authorization: `basic ${auth}`
            },
            client_id: options.clientId,
            access_token: options.token
          });
          const authentication = {
            clientType: options.clientType,
            clientId: options.clientId,
            clientSecret: options.clientSecret,
            token: response.data.token,
            scopes: response.data.scopes
          };
          if (response.data.expires_at)
            authentication.expiresAt = response.data.expires_at;
          if (options.clientType === "github-app") {
            delete authentication.scopes;
          }
          return _objectSpread2(_objectSpread2({}, response), {}, {
            authentication
          });
        }
        async function deleteToken(options) {
          const request$1 = options.request || request.request;
          const auth = btoa(`${options.clientId}:${options.clientSecret}`);
          return request$1("DELETE /applications/{client_id}/token", {
            headers: {
              authorization: `basic ${auth}`
            },
            client_id: options.clientId,
            access_token: options.token
          });
        }
        async function deleteAuthorization(options) {
          const request$1 = options.request || request.request;
          const auth = btoa(`${options.clientId}:${options.clientSecret}`);
          return request$1("DELETE /applications/{client_id}/grant", {
            headers: {
              authorization: `basic ${auth}`
            },
            client_id: options.clientId,
            access_token: options.token
          });
        }
        exports2.VERSION = VERSION;
        exports2.checkToken = checkToken;
        exports2.createDeviceCode = createDeviceCode;
        exports2.deleteAuthorization = deleteAuthorization;
        exports2.deleteToken = deleteToken;
        exports2.exchangeDeviceCode = exchangeDeviceCode;
        exports2.exchangeWebFlowCode = exchangeWebFlowCode;
        exports2.getWebFlowAuthorizationUrl = getWebFlowAuthorizationUrl;
        exports2.refreshToken = refreshToken;
        exports2.resetToken = resetToken;
        exports2.scopeToken = scopeToken;
      }
    });
    var require_dist_node15 = __commonJS2({
      "node_modules/@octokit/auth-oauth-device/dist-node/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var universalUserAgent = require_dist_node();
        var request = require_dist_node5();
        var oauthMethods = require_dist_node14();
        function ownKeys(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly) {
              symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            }
            keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread2(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            if (i % 2) {
              ownKeys(Object(source), true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function _objectWithoutPropertiesLoose(source, excluded) {
          if (source == null)
            return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;
          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            target[key] = source[key];
          }
          return target;
        }
        function _objectWithoutProperties(source, excluded) {
          if (source == null)
            return {};
          var target = _objectWithoutPropertiesLoose(source, excluded);
          var key, i;
          if (Object.getOwnPropertySymbols) {
            var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
            for (i = 0; i < sourceSymbolKeys.length; i++) {
              key = sourceSymbolKeys[i];
              if (excluded.indexOf(key) >= 0)
                continue;
              if (!Object.prototype.propertyIsEnumerable.call(source, key))
                continue;
              target[key] = source[key];
            }
          }
          return target;
        }
        async function getOAuthAccessToken(state, options) {
          const cachedAuthentication = getCachedAuthentication(state, options.auth);
          if (cachedAuthentication)
            return cachedAuthentication;
          const {
            data: verification
          } = await oauthMethods.createDeviceCode({
            clientType: state.clientType,
            clientId: state.clientId,
            request: options.request || state.request,
            scopes: options.auth.scopes || state.scopes
          });
          await state.onVerification(verification);
          const authentication = await waitForAccessToken(options.request || state.request, state.clientId, state.clientType, verification);
          state.authentication = authentication;
          return authentication;
        }
        function getCachedAuthentication(state, auth2) {
          if (auth2.refresh === true)
            return false;
          if (!state.authentication)
            return false;
          if (state.clientType === "github-app") {
            return state.authentication;
          }
          const authentication = state.authentication;
          const newScope = ("scopes" in auth2 && auth2.scopes || state.scopes).join(" ");
          const currentScope = authentication.scopes.join(" ");
          return newScope === currentScope ? authentication : false;
        }
        async function wait(seconds) {
          await new Promise((resolve) => setTimeout(resolve, seconds * 1e3));
        }
        async function waitForAccessToken(request2, clientId, clientType, verification) {
          try {
            const options = {
              clientId,
              request: request2,
              code: verification.device_code
            };
            const {
              authentication
            } = clientType === "oauth-app" ? await oauthMethods.exchangeDeviceCode(_objectSpread2(_objectSpread2({}, options), {}, {
              clientType: "oauth-app"
            })) : await oauthMethods.exchangeDeviceCode(_objectSpread2(_objectSpread2({}, options), {}, {
              clientType: "github-app"
            }));
            return _objectSpread2({
              type: "token",
              tokenType: "oauth"
            }, authentication);
          } catch (error) {
            if (!error.response)
              throw error;
            const errorType = error.response.data.error;
            if (errorType === "authorization_pending") {
              await wait(verification.interval);
              return waitForAccessToken(request2, clientId, clientType, verification);
            }
            if (errorType === "slow_down") {
              await wait(verification.interval + 5);
              return waitForAccessToken(request2, clientId, clientType, verification);
            }
            throw error;
          }
        }
        async function auth(state, authOptions) {
          return getOAuthAccessToken(state, {
            auth: authOptions
          });
        }
        async function hook(state, request2, route, parameters) {
          let endpoint = request2.endpoint.merge(route, parameters);
          if (/\/login\/(oauth\/access_token|device\/code)$/.test(endpoint.url)) {
            return request2(endpoint);
          }
          const {
            token
          } = await getOAuthAccessToken(state, {
            request: request2,
            auth: {
              type: "oauth"
            }
          });
          endpoint.headers.authorization = `token ${token}`;
          return request2(endpoint);
        }
        var VERSION = "3.1.2";
        function createOAuthDeviceAuth(options) {
          const requestWithDefaults = options.request || request.request.defaults({
            headers: {
              "user-agent": `octokit-auth-oauth-device.js/${VERSION} ${universalUserAgent.getUserAgent()}`
            }
          });
          const {
            request: request$1 = requestWithDefaults
          } = options, otherOptions = _objectWithoutProperties(options, ["request"]);
          const state = options.clientType === "github-app" ? _objectSpread2(_objectSpread2({}, otherOptions), {}, {
            clientType: "github-app",
            request: request$1
          }) : _objectSpread2(_objectSpread2({}, otherOptions), {}, {
            clientType: "oauth-app",
            request: request$1,
            scopes: options.scopes || []
          });
          if (!options.clientId) {
            throw new Error('[@octokit/auth-oauth-device] "clientId" option must be set (https://github.com/octokit/auth-oauth-device.js#usage)');
          }
          if (!options.onVerification) {
            throw new Error('[@octokit/auth-oauth-device] "onVerification" option must be a function (https://github.com/octokit/auth-oauth-device.js#usage)');
          }
          return Object.assign(auth.bind(null, state), {
            hook: hook.bind(null, state)
          });
        }
        exports2.createOAuthDeviceAuth = createOAuthDeviceAuth;
      }
    });
    var require_dist_node16 = __commonJS2({
      "node_modules/@octokit/auth-oauth-user/dist-node/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        function _interopDefault(ex) {
          return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
        }
        var universalUserAgent = require_dist_node();
        var request = require_dist_node5();
        var authOauthDevice = require_dist_node15();
        var oauthMethods = require_dist_node14();
        var btoa = _interopDefault(require_btoa_node());
        function ownKeys(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly) {
              symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            }
            keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread2(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            if (i % 2) {
              ownKeys(Object(source), true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function _objectWithoutPropertiesLoose(source, excluded) {
          if (source == null)
            return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;
          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            target[key] = source[key];
          }
          return target;
        }
        function _objectWithoutProperties(source, excluded) {
          if (source == null)
            return {};
          var target = _objectWithoutPropertiesLoose(source, excluded);
          var key, i;
          if (Object.getOwnPropertySymbols) {
            var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
            for (i = 0; i < sourceSymbolKeys.length; i++) {
              key = sourceSymbolKeys[i];
              if (excluded.indexOf(key) >= 0)
                continue;
              if (!Object.prototype.propertyIsEnumerable.call(source, key))
                continue;
              target[key] = source[key];
            }
          }
          return target;
        }
        var VERSION = "1.3.0";
        async function getAuthentication(state) {
          if ("code" in state.strategyOptions) {
            const {
              authentication
            } = await oauthMethods.exchangeWebFlowCode(_objectSpread2(_objectSpread2({
              clientId: state.clientId,
              clientSecret: state.clientSecret,
              clientType: state.clientType
            }, state.strategyOptions), {}, {
              request: state.request
            }));
            return _objectSpread2({
              type: "token",
              tokenType: "oauth"
            }, authentication);
          }
          if ("onVerification" in state.strategyOptions) {
            const deviceAuth = authOauthDevice.createOAuthDeviceAuth(_objectSpread2(_objectSpread2({
              clientType: state.clientType,
              clientId: state.clientId
            }, state.strategyOptions), {}, {
              request: state.request
            }));
            const authentication = await deviceAuth({
              type: "oauth"
            });
            return _objectSpread2({
              clientSecret: state.clientSecret
            }, authentication);
          }
          if ("token" in state.strategyOptions) {
            return _objectSpread2({
              type: "token",
              tokenType: "oauth",
              clientId: state.clientId,
              clientSecret: state.clientSecret,
              clientType: state.clientType
            }, state.strategyOptions);
          }
          throw new Error("[@octokit/auth-oauth-user] Invalid strategy options");
        }
        async function auth(state, options = {}) {
          if (!state.authentication) {
            state.authentication = state.clientType === "oauth-app" ? await getAuthentication(state) : await getAuthentication(state);
          }
          if (state.authentication.invalid) {
            throw new Error("[@octokit/auth-oauth-user] Token is invalid");
          }
          const currentAuthentication = state.authentication;
          if ("expiresAt" in currentAuthentication) {
            if (options.type === "refresh" || new Date(currentAuthentication.expiresAt) < new Date()) {
              const {
                authentication
              } = await oauthMethods.refreshToken({
                clientType: "github-app",
                clientId: state.clientId,
                clientSecret: state.clientSecret,
                refreshToken: currentAuthentication.refreshToken,
                request: state.request
              });
              state.authentication = _objectSpread2({
                tokenType: "oauth",
                type: "token"
              }, authentication);
            }
          }
          if (options.type === "refresh") {
            if (state.clientType === "oauth-app") {
              throw new Error("[@octokit/auth-oauth-user] OAuth Apps do not support expiring tokens");
            }
            if (!currentAuthentication.hasOwnProperty("expiresAt")) {
              throw new Error("[@octokit/auth-oauth-user] Refresh token missing");
            }
          }
          if (options.type === "check" || options.type === "reset") {
            const method = options.type === "check" ? oauthMethods.checkToken : oauthMethods.resetToken;
            try {
              const {
                authentication
              } = await method({
                clientType: state.clientType,
                clientId: state.clientId,
                clientSecret: state.clientSecret,
                token: state.authentication.token,
                request: state.request
              });
              state.authentication = _objectSpread2({
                tokenType: "oauth",
                type: "token"
              }, authentication);
              return state.authentication;
            } catch (error) {
              if (error.status === 404) {
                error.message = "[@octokit/auth-oauth-user] Token is invalid";
                state.authentication.invalid = true;
              }
              throw error;
            }
          }
          if (options.type === "delete" || options.type === "deleteAuthorization") {
            const method = options.type === "delete" ? oauthMethods.deleteToken : oauthMethods.deleteAuthorization;
            try {
              await method({
                clientType: state.clientType,
                clientId: state.clientId,
                clientSecret: state.clientSecret,
                token: state.authentication.token,
                request: state.request
              });
            } catch (error) {
              if (error.status !== 404)
                throw error;
            }
            state.authentication.invalid = true;
            return state.authentication;
          }
          return state.authentication;
        }
        var ROUTES_REQUIRING_BASIC_AUTH = /\/applications\/[^/]+\/(token|grant)s?/;
        function requiresBasicAuth(url) {
          return url && ROUTES_REQUIRING_BASIC_AUTH.test(url);
        }
        async function hook(state, request2, route, parameters = {}) {
          const endpoint = request2.endpoint.merge(route, parameters);
          if (/\/login\/(oauth\/access_token|device\/code)$/.test(endpoint.url)) {
            return request2(endpoint);
          }
          if (requiresBasicAuth(endpoint.url)) {
            const credentials = btoa(`${state.clientId}:${state.clientSecret}`);
            endpoint.headers.authorization = `basic ${credentials}`;
            return request2(endpoint);
          }
          const {
            token
          } = state.clientType === "oauth-app" ? await auth(_objectSpread2(_objectSpread2({}, state), {}, {
            request: request2
          })) : await auth(_objectSpread2(_objectSpread2({}, state), {}, {
            request: request2
          }));
          endpoint.headers.authorization = "token " + token;
          return request2(endpoint);
        }
        var _excluded = ["clientId", "clientSecret", "clientType", "request"];
        function createOAuthUserAuth(_ref) {
          let {
            clientId,
            clientSecret,
            clientType = "oauth-app",
            request: request$1 = request.request.defaults({
              headers: {
                "user-agent": `octokit-auth-oauth-app.js/${VERSION} ${universalUserAgent.getUserAgent()}`
              }
            })
          } = _ref, strategyOptions = _objectWithoutProperties(_ref, _excluded);
          const state = Object.assign({
            clientType,
            clientId,
            clientSecret,
            strategyOptions,
            request: request$1
          });
          return Object.assign(auth.bind(null, state), {
            hook: hook.bind(null, state)
          });
        }
        createOAuthUserAuth.VERSION = VERSION;
        exports2.createOAuthUserAuth = createOAuthUserAuth;
        exports2.requiresBasicAuth = requiresBasicAuth;
      }
    });
    var require_dist_node17 = __commonJS2({
      "node_modules/@octokit/auth-oauth-app/dist-node/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        function _interopDefault(ex) {
          return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
        }
        var universalUserAgent = require_dist_node();
        var request = require_dist_node5();
        var btoa = _interopDefault(require_btoa_node());
        var authOauthUser = require_dist_node16();
        function ownKeys(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly) {
              symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            }
            keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread2(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            if (i % 2) {
              ownKeys(Object(source), true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function _objectWithoutPropertiesLoose(source, excluded) {
          if (source == null)
            return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;
          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            target[key] = source[key];
          }
          return target;
        }
        function _objectWithoutProperties(source, excluded) {
          if (source == null)
            return {};
          var target = _objectWithoutPropertiesLoose(source, excluded);
          var key, i;
          if (Object.getOwnPropertySymbols) {
            var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
            for (i = 0; i < sourceSymbolKeys.length; i++) {
              key = sourceSymbolKeys[i];
              if (excluded.indexOf(key) >= 0)
                continue;
              if (!Object.prototype.propertyIsEnumerable.call(source, key))
                continue;
              target[key] = source[key];
            }
          }
          return target;
        }
        var _excluded = ["type"];
        async function auth(state, authOptions) {
          if (authOptions.type === "oauth-app") {
            return {
              type: "oauth-app",
              clientId: state.clientId,
              clientSecret: state.clientSecret,
              clientType: state.clientType,
              headers: {
                authorization: `basic ${btoa(`${state.clientId}:${state.clientSecret}`)}`
              }
            };
          }
          if ("factory" in authOptions) {
            const _authOptions$state = _objectSpread2(_objectSpread2({}, authOptions), state), options = _objectWithoutProperties(_authOptions$state, _excluded);
            return authOptions.factory(options);
          }
          const common = _objectSpread2({
            clientId: state.clientId,
            clientSecret: state.clientSecret,
            request: state.request
          }, authOptions);
          const userAuth = state.clientType === "oauth-app" ? await authOauthUser.createOAuthUserAuth(_objectSpread2(_objectSpread2({}, common), {}, {
            clientType: state.clientType
          })) : await authOauthUser.createOAuthUserAuth(_objectSpread2(_objectSpread2({}, common), {}, {
            clientType: state.clientType
          }));
          return userAuth();
        }
        async function hook(state, request2, route, parameters) {
          let endpoint = request2.endpoint.merge(route, parameters);
          if (/\/login\/(oauth\/access_token|device\/code)$/.test(endpoint.url)) {
            return request2(endpoint);
          }
          if (state.clientType === "github-app" && !authOauthUser.requiresBasicAuth(endpoint.url)) {
            throw new Error(`[@octokit/auth-oauth-app] GitHub Apps cannot use their client ID/secret for basic authentication for endpoints other than "/applications/{client_id}/**". "${endpoint.method} ${endpoint.url}" is not supported.`);
          }
          const credentials = btoa(`${state.clientId}:${state.clientSecret}`);
          endpoint.headers.authorization = `basic ${credentials}`;
          try {
            return await request2(endpoint);
          } catch (error) {
            if (error.status !== 401)
              throw error;
            error.message = `[@octokit/auth-oauth-app] "${endpoint.method} ${endpoint.url}" does not support clientId/clientSecret basic authentication.`;
            throw error;
          }
        }
        var VERSION = "4.3.0";
        function createOAuthAppAuth(options) {
          const state = Object.assign({
            request: request.request.defaults({
              headers: {
                "user-agent": `octokit-auth-oauth-app.js/${VERSION} ${universalUserAgent.getUserAgent()}`
              }
            }),
            clientType: "oauth-app"
          }, options);
          return Object.assign(auth.bind(null, state), {
            hook: hook.bind(null, state)
          });
        }
        Object.defineProperty(exports2, "createOAuthUserAuth", {
          enumerable: true,
          get: function() {
            return authOauthUser.createOAuthUserAuth;
          }
        });
        exports2.createOAuthAppAuth = createOAuthAppAuth;
      }
    });
    var require_data_stream = __commonJS2({
      "node_modules/jws/lib/data-stream.js"(exports2, module22) {
        var Buffer2 = require_safe_buffer().Buffer;
        var Stream = require("stream");
        var util = require("util");
        function DataStream(data) {
          this.buffer = null;
          this.writable = true;
          this.readable = true;
          if (!data) {
            this.buffer = Buffer2.alloc(0);
            return this;
          }
          if (typeof data.pipe === "function") {
            this.buffer = Buffer2.alloc(0);
            data.pipe(this);
            return this;
          }
          if (data.length || typeof data === "object") {
            this.buffer = data;
            this.writable = false;
            process.nextTick(function() {
              this.emit("end", data);
              this.readable = false;
              this.emit("close");
            }.bind(this));
            return this;
          }
          throw new TypeError("Unexpected data type (" + typeof data + ")");
        }
        util.inherits(DataStream, Stream);
        DataStream.prototype.write = function write(data) {
          this.buffer = Buffer2.concat([this.buffer, Buffer2.from(data)]);
          this.emit("data", data);
        };
        DataStream.prototype.end = function end(data) {
          if (data)
            this.write(data);
          this.emit("end", data);
          this.emit("close");
          this.writable = false;
          this.readable = false;
        };
        module22.exports = DataStream;
      }
    });
    var require_buffer_equal_constant_time = __commonJS2({
      "node_modules/buffer-equal-constant-time/index.js"(exports2, module22) {
        "use strict";
        var Buffer2 = require("buffer").Buffer;
        var SlowBuffer = require("buffer").SlowBuffer;
        module22.exports = bufferEq;
        function bufferEq(a, b) {
          if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
            return false;
          }
          if (a.length !== b.length) {
            return false;
          }
          var c = 0;
          for (var i = 0; i < a.length; i++) {
            c |= a[i] ^ b[i];
          }
          return c === 0;
        }
        bufferEq.install = function() {
          Buffer2.prototype.equal = SlowBuffer.prototype.equal = function equal(that) {
            return bufferEq(this, that);
          };
        };
        var origBufEqual = Buffer2.prototype.equal;
        var origSlowBufEqual = SlowBuffer.prototype.equal;
        bufferEq.restore = function() {
          Buffer2.prototype.equal = origBufEqual;
          SlowBuffer.prototype.equal = origSlowBufEqual;
        };
      }
    });
    var require_param_bytes_for_alg = __commonJS2({
      "node_modules/ecdsa-sig-formatter/src/param-bytes-for-alg.js"(exports2, module22) {
        "use strict";
        function getParamSize(keySize) {
          var result = (keySize / 8 | 0) + (keySize % 8 === 0 ? 0 : 1);
          return result;
        }
        var paramBytesForAlg = {
          ES256: getParamSize(256),
          ES384: getParamSize(384),
          ES512: getParamSize(521)
        };
        function getParamBytesForAlg(alg) {
          var paramBytes = paramBytesForAlg[alg];
          if (paramBytes) {
            return paramBytes;
          }
          throw new Error('Unknown algorithm "' + alg + '"');
        }
        module22.exports = getParamBytesForAlg;
      }
    });
    var require_ecdsa_sig_formatter = __commonJS2({
      "node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js"(exports2, module22) {
        "use strict";
        var Buffer2 = require_safe_buffer().Buffer;
        var getParamBytesForAlg = require_param_bytes_for_alg();
        var MAX_OCTET = 128;
        var CLASS_UNIVERSAL = 0;
        var PRIMITIVE_BIT = 32;
        var TAG_SEQ = 16;
        var TAG_INT = 2;
        var ENCODED_TAG_SEQ = TAG_SEQ | PRIMITIVE_BIT | CLASS_UNIVERSAL << 6;
        var ENCODED_TAG_INT = TAG_INT | CLASS_UNIVERSAL << 6;
        function base64Url(base64) {
          return base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
        }
        function signatureAsBuffer(signature) {
          if (Buffer2.isBuffer(signature)) {
            return signature;
          } else if (typeof signature === "string") {
            return Buffer2.from(signature, "base64");
          }
          throw new TypeError("ECDSA signature must be a Base64 string or a Buffer");
        }
        function derToJose(signature, alg) {
          signature = signatureAsBuffer(signature);
          var paramBytes = getParamBytesForAlg(alg);
          var maxEncodedParamLength = paramBytes + 1;
          var inputLength = signature.length;
          var offset = 0;
          if (signature[offset++] !== ENCODED_TAG_SEQ) {
            throw new Error('Could not find expected "seq"');
          }
          var seqLength = signature[offset++];
          if (seqLength === (MAX_OCTET | 1)) {
            seqLength = signature[offset++];
          }
          if (inputLength - offset < seqLength) {
            throw new Error('"seq" specified length of "' + seqLength + '", only "' + (inputLength - offset) + '" remaining');
          }
          if (signature[offset++] !== ENCODED_TAG_INT) {
            throw new Error('Could not find expected "int" for "r"');
          }
          var rLength = signature[offset++];
          if (inputLength - offset - 2 < rLength) {
            throw new Error('"r" specified length of "' + rLength + '", only "' + (inputLength - offset - 2) + '" available');
          }
          if (maxEncodedParamLength < rLength) {
            throw new Error('"r" specified length of "' + rLength + '", max of "' + maxEncodedParamLength + '" is acceptable');
          }
          var rOffset = offset;
          offset += rLength;
          if (signature[offset++] !== ENCODED_TAG_INT) {
            throw new Error('Could not find expected "int" for "s"');
          }
          var sLength = signature[offset++];
          if (inputLength - offset !== sLength) {
            throw new Error('"s" specified length of "' + sLength + '", expected "' + (inputLength - offset) + '"');
          }
          if (maxEncodedParamLength < sLength) {
            throw new Error('"s" specified length of "' + sLength + '", max of "' + maxEncodedParamLength + '" is acceptable');
          }
          var sOffset = offset;
          offset += sLength;
          if (offset !== inputLength) {
            throw new Error('Expected to consume entire buffer, but "' + (inputLength - offset) + '" bytes remain');
          }
          var rPadding = paramBytes - rLength, sPadding = paramBytes - sLength;
          var dst = Buffer2.allocUnsafe(rPadding + rLength + sPadding + sLength);
          for (offset = 0; offset < rPadding; ++offset) {
            dst[offset] = 0;
          }
          signature.copy(dst, offset, rOffset + Math.max(-rPadding, 0), rOffset + rLength);
          offset = paramBytes;
          for (var o = offset; offset < o + sPadding; ++offset) {
            dst[offset] = 0;
          }
          signature.copy(dst, offset, sOffset + Math.max(-sPadding, 0), sOffset + sLength);
          dst = dst.toString("base64");
          dst = base64Url(dst);
          return dst;
        }
        function countPadding(buf, start, stop) {
          var padding = 0;
          while (start + padding < stop && buf[start + padding] === 0) {
            ++padding;
          }
          var needsSign = buf[start + padding] >= MAX_OCTET;
          if (needsSign) {
            --padding;
          }
          return padding;
        }
        function joseToDer(signature, alg) {
          signature = signatureAsBuffer(signature);
          var paramBytes = getParamBytesForAlg(alg);
          var signatureBytes = signature.length;
          if (signatureBytes !== paramBytes * 2) {
            throw new TypeError('"' + alg + '" signatures must be "' + paramBytes * 2 + '" bytes, saw "' + signatureBytes + '"');
          }
          var rPadding = countPadding(signature, 0, paramBytes);
          var sPadding = countPadding(signature, paramBytes, signature.length);
          var rLength = paramBytes - rPadding;
          var sLength = paramBytes - sPadding;
          var rsBytes = 1 + 1 + rLength + 1 + 1 + sLength;
          var shortLength = rsBytes < MAX_OCTET;
          var dst = Buffer2.allocUnsafe((shortLength ? 2 : 3) + rsBytes);
          var offset = 0;
          dst[offset++] = ENCODED_TAG_SEQ;
          if (shortLength) {
            dst[offset++] = rsBytes;
          } else {
            dst[offset++] = MAX_OCTET | 1;
            dst[offset++] = rsBytes & 255;
          }
          dst[offset++] = ENCODED_TAG_INT;
          dst[offset++] = rLength;
          if (rPadding < 0) {
            dst[offset++] = 0;
            offset += signature.copy(dst, offset, 0, paramBytes);
          } else {
            offset += signature.copy(dst, offset, rPadding, paramBytes);
          }
          dst[offset++] = ENCODED_TAG_INT;
          dst[offset++] = sLength;
          if (sPadding < 0) {
            dst[offset++] = 0;
            signature.copy(dst, offset, paramBytes);
          } else {
            signature.copy(dst, offset, paramBytes + sPadding);
          }
          return dst;
        }
        module22.exports = {
          derToJose,
          joseToDer
        };
      }
    });
    var require_jwa = __commonJS2({
      "node_modules/jwa/index.js"(exports2, module22) {
        var bufferEqual = require_buffer_equal_constant_time();
        var Buffer2 = require_safe_buffer().Buffer;
        var crypto4 = require("crypto");
        var formatEcdsa = require_ecdsa_sig_formatter();
        var util = require("util");
        var MSG_INVALID_ALGORITHM = '"%s" is not a valid algorithm.\n  Supported algorithms are:\n  "HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512" and "none".';
        var MSG_INVALID_SECRET = "secret must be a string or buffer";
        var MSG_INVALID_VERIFIER_KEY = "key must be a string or a buffer";
        var MSG_INVALID_SIGNER_KEY = "key must be a string, a buffer or an object";
        var supportsKeyObjects = typeof crypto4.createPublicKey === "function";
        if (supportsKeyObjects) {
          MSG_INVALID_VERIFIER_KEY += " or a KeyObject";
          MSG_INVALID_SECRET += "or a KeyObject";
        }
        function checkIsPublicKey(key) {
          if (Buffer2.isBuffer(key)) {
            return;
          }
          if (typeof key === "string") {
            return;
          }
          if (!supportsKeyObjects) {
            throw typeError(MSG_INVALID_VERIFIER_KEY);
          }
          if (typeof key !== "object") {
            throw typeError(MSG_INVALID_VERIFIER_KEY);
          }
          if (typeof key.type !== "string") {
            throw typeError(MSG_INVALID_VERIFIER_KEY);
          }
          if (typeof key.asymmetricKeyType !== "string") {
            throw typeError(MSG_INVALID_VERIFIER_KEY);
          }
          if (typeof key.export !== "function") {
            throw typeError(MSG_INVALID_VERIFIER_KEY);
          }
        }
        function checkIsPrivateKey(key) {
          if (Buffer2.isBuffer(key)) {
            return;
          }
          if (typeof key === "string") {
            return;
          }
          if (typeof key === "object") {
            return;
          }
          throw typeError(MSG_INVALID_SIGNER_KEY);
        }
        function checkIsSecretKey(key) {
          if (Buffer2.isBuffer(key)) {
            return;
          }
          if (typeof key === "string") {
            return key;
          }
          if (!supportsKeyObjects) {
            throw typeError(MSG_INVALID_SECRET);
          }
          if (typeof key !== "object") {
            throw typeError(MSG_INVALID_SECRET);
          }
          if (key.type !== "secret") {
            throw typeError(MSG_INVALID_SECRET);
          }
          if (typeof key.export !== "function") {
            throw typeError(MSG_INVALID_SECRET);
          }
        }
        function fromBase64(base64) {
          return base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
        }
        function toBase64(base64url) {
          base64url = base64url.toString();
          var padding = 4 - base64url.length % 4;
          if (padding !== 4) {
            for (var i = 0; i < padding; ++i) {
              base64url += "=";
            }
          }
          return base64url.replace(/\-/g, "+").replace(/_/g, "/");
        }
        function typeError(template) {
          var args = [].slice.call(arguments, 1);
          var errMsg = util.format.bind(util, template).apply(null, args);
          return new TypeError(errMsg);
        }
        function bufferOrString(obj) {
          return Buffer2.isBuffer(obj) || typeof obj === "string";
        }
        function normalizeInput(thing) {
          if (!bufferOrString(thing))
            thing = JSON.stringify(thing);
          return thing;
        }
        function createHmacSigner(bits) {
          return function sign(thing, secret) {
            checkIsSecretKey(secret);
            thing = normalizeInput(thing);
            var hmac = crypto4.createHmac("sha" + bits, secret);
            var sig = (hmac.update(thing), hmac.digest("base64"));
            return fromBase64(sig);
          };
        }
        function createHmacVerifier(bits) {
          return function verify(thing, signature, secret) {
            var computedSig = createHmacSigner(bits)(thing, secret);
            return bufferEqual(Buffer2.from(signature), Buffer2.from(computedSig));
          };
        }
        function createKeySigner(bits) {
          return function sign(thing, privateKey) {
            checkIsPrivateKey(privateKey);
            thing = normalizeInput(thing);
            var signer = crypto4.createSign("RSA-SHA" + bits);
            var sig = (signer.update(thing), signer.sign(privateKey, "base64"));
            return fromBase64(sig);
          };
        }
        function createKeyVerifier(bits) {
          return function verify(thing, signature, publicKey) {
            checkIsPublicKey(publicKey);
            thing = normalizeInput(thing);
            signature = toBase64(signature);
            var verifier = crypto4.createVerify("RSA-SHA" + bits);
            verifier.update(thing);
            return verifier.verify(publicKey, signature, "base64");
          };
        }
        function createPSSKeySigner(bits) {
          return function sign(thing, privateKey) {
            checkIsPrivateKey(privateKey);
            thing = normalizeInput(thing);
            var signer = crypto4.createSign("RSA-SHA" + bits);
            var sig = (signer.update(thing), signer.sign({
              key: privateKey,
              padding: crypto4.constants.RSA_PKCS1_PSS_PADDING,
              saltLength: crypto4.constants.RSA_PSS_SALTLEN_DIGEST
            }, "base64"));
            return fromBase64(sig);
          };
        }
        function createPSSKeyVerifier(bits) {
          return function verify(thing, signature, publicKey) {
            checkIsPublicKey(publicKey);
            thing = normalizeInput(thing);
            signature = toBase64(signature);
            var verifier = crypto4.createVerify("RSA-SHA" + bits);
            verifier.update(thing);
            return verifier.verify({
              key: publicKey,
              padding: crypto4.constants.RSA_PKCS1_PSS_PADDING,
              saltLength: crypto4.constants.RSA_PSS_SALTLEN_DIGEST
            }, signature, "base64");
          };
        }
        function createECDSASigner(bits) {
          var inner = createKeySigner(bits);
          return function sign() {
            var signature = inner.apply(null, arguments);
            signature = formatEcdsa.derToJose(signature, "ES" + bits);
            return signature;
          };
        }
        function createECDSAVerifer(bits) {
          var inner = createKeyVerifier(bits);
          return function verify(thing, signature, publicKey) {
            signature = formatEcdsa.joseToDer(signature, "ES" + bits).toString("base64");
            var result = inner(thing, signature, publicKey);
            return result;
          };
        }
        function createNoneSigner() {
          return function sign() {
            return "";
          };
        }
        function createNoneVerifier() {
          return function verify(thing, signature) {
            return signature === "";
          };
        }
        module22.exports = function jwa(algorithm) {
          var signerFactories = {
            hs: createHmacSigner,
            rs: createKeySigner,
            ps: createPSSKeySigner,
            es: createECDSASigner,
            none: createNoneSigner
          };
          var verifierFactories = {
            hs: createHmacVerifier,
            rs: createKeyVerifier,
            ps: createPSSKeyVerifier,
            es: createECDSAVerifer,
            none: createNoneVerifier
          };
          var match = algorithm.match(/^(RS|PS|ES|HS)(256|384|512)$|^(none)$/i);
          if (!match)
            throw typeError(MSG_INVALID_ALGORITHM, algorithm);
          var algo = (match[1] || match[3]).toLowerCase();
          var bits = match[2];
          return {
            sign: signerFactories[algo](bits),
            verify: verifierFactories[algo](bits)
          };
        };
      }
    });
    var require_tostring = __commonJS2({
      "node_modules/jws/lib/tostring.js"(exports2, module22) {
        var Buffer2 = require("buffer").Buffer;
        module22.exports = function toString(obj) {
          if (typeof obj === "string")
            return obj;
          if (typeof obj === "number" || Buffer2.isBuffer(obj))
            return obj.toString();
          return JSON.stringify(obj);
        };
      }
    });
    var require_sign_stream = __commonJS2({
      "node_modules/jws/lib/sign-stream.js"(exports2, module22) {
        var Buffer2 = require_safe_buffer().Buffer;
        var DataStream = require_data_stream();
        var jwa = require_jwa();
        var Stream = require("stream");
        var toString = require_tostring();
        var util = require("util");
        function base64url(string, encoding) {
          return Buffer2.from(string, encoding).toString("base64").replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
        }
        function jwsSecuredInput(header, payload, encoding) {
          encoding = encoding || "utf8";
          var encodedHeader = base64url(toString(header), "binary");
          var encodedPayload = base64url(toString(payload), encoding);
          return util.format("%s.%s", encodedHeader, encodedPayload);
        }
        function jwsSign(opts) {
          var header = opts.header;
          var payload = opts.payload;
          var secretOrKey = opts.secret || opts.privateKey;
          var encoding = opts.encoding;
          var algo = jwa(header.alg);
          var securedInput = jwsSecuredInput(header, payload, encoding);
          var signature = algo.sign(securedInput, secretOrKey);
          return util.format("%s.%s", securedInput, signature);
        }
        function SignStream(opts) {
          var secret = opts.secret || opts.privateKey || opts.key;
          var secretStream = new DataStream(secret);
          this.readable = true;
          this.header = opts.header;
          this.encoding = opts.encoding;
          this.secret = this.privateKey = this.key = secretStream;
          this.payload = new DataStream(opts.payload);
          this.secret.once("close", function() {
            if (!this.payload.writable && this.readable)
              this.sign();
          }.bind(this));
          this.payload.once("close", function() {
            if (!this.secret.writable && this.readable)
              this.sign();
          }.bind(this));
        }
        util.inherits(SignStream, Stream);
        SignStream.prototype.sign = function sign() {
          try {
            var signature = jwsSign({
              header: this.header,
              payload: this.payload.buffer,
              secret: this.secret.buffer,
              encoding: this.encoding
            });
            this.emit("done", signature);
            this.emit("data", signature);
            this.emit("end");
            this.readable = false;
            return signature;
          } catch (e) {
            this.readable = false;
            this.emit("error", e);
            this.emit("close");
          }
        };
        SignStream.sign = jwsSign;
        module22.exports = SignStream;
      }
    });
    var require_verify_stream = __commonJS2({
      "node_modules/jws/lib/verify-stream.js"(exports2, module22) {
        var Buffer2 = require_safe_buffer().Buffer;
        var DataStream = require_data_stream();
        var jwa = require_jwa();
        var Stream = require("stream");
        var toString = require_tostring();
        var util = require("util");
        var JWS_REGEX = /^[a-zA-Z0-9\-_]+?\.[a-zA-Z0-9\-_]+?\.([a-zA-Z0-9\-_]+)?$/;
        function isObject2(thing) {
          return Object.prototype.toString.call(thing) === "[object Object]";
        }
        function safeJsonParse(thing) {
          if (isObject2(thing))
            return thing;
          try {
            return JSON.parse(thing);
          } catch (e) {
            return void 0;
          }
        }
        function headerFromJWS(jwsSig) {
          var encodedHeader = jwsSig.split(".", 1)[0];
          return safeJsonParse(Buffer2.from(encodedHeader, "base64").toString("binary"));
        }
        function securedInputFromJWS(jwsSig) {
          return jwsSig.split(".", 2).join(".");
        }
        function signatureFromJWS(jwsSig) {
          return jwsSig.split(".")[2];
        }
        function payloadFromJWS(jwsSig, encoding) {
          encoding = encoding || "utf8";
          var payload = jwsSig.split(".")[1];
          return Buffer2.from(payload, "base64").toString(encoding);
        }
        function isValidJws(string) {
          return JWS_REGEX.test(string) && !!headerFromJWS(string);
        }
        function jwsVerify(jwsSig, algorithm, secretOrKey) {
          if (!algorithm) {
            var err = new Error("Missing algorithm parameter for jws.verify");
            err.code = "MISSING_ALGORITHM";
            throw err;
          }
          jwsSig = toString(jwsSig);
          var signature = signatureFromJWS(jwsSig);
          var securedInput = securedInputFromJWS(jwsSig);
          var algo = jwa(algorithm);
          return algo.verify(securedInput, signature, secretOrKey);
        }
        function jwsDecode(jwsSig, opts) {
          opts = opts || {};
          jwsSig = toString(jwsSig);
          if (!isValidJws(jwsSig))
            return null;
          var header = headerFromJWS(jwsSig);
          if (!header)
            return null;
          var payload = payloadFromJWS(jwsSig);
          if (header.typ === "JWT" || opts.json)
            payload = JSON.parse(payload, opts.encoding);
          return {
            header,
            payload,
            signature: signatureFromJWS(jwsSig)
          };
        }
        function VerifyStream(opts) {
          opts = opts || {};
          var secretOrKey = opts.secret || opts.publicKey || opts.key;
          var secretStream = new DataStream(secretOrKey);
          this.readable = true;
          this.algorithm = opts.algorithm;
          this.encoding = opts.encoding;
          this.secret = this.publicKey = this.key = secretStream;
          this.signature = new DataStream(opts.signature);
          this.secret.once("close", function() {
            if (!this.signature.writable && this.readable)
              this.verify();
          }.bind(this));
          this.signature.once("close", function() {
            if (!this.secret.writable && this.readable)
              this.verify();
          }.bind(this));
        }
        util.inherits(VerifyStream, Stream);
        VerifyStream.prototype.verify = function verify() {
          try {
            var valid = jwsVerify(this.signature.buffer, this.algorithm, this.key.buffer);
            var obj = jwsDecode(this.signature.buffer, this.encoding);
            this.emit("done", valid, obj);
            this.emit("data", valid);
            this.emit("end");
            this.readable = false;
            return valid;
          } catch (e) {
            this.readable = false;
            this.emit("error", e);
            this.emit("close");
          }
        };
        VerifyStream.decode = jwsDecode;
        VerifyStream.isValid = isValidJws;
        VerifyStream.verify = jwsVerify;
        module22.exports = VerifyStream;
      }
    });
    var require_jws = __commonJS2({
      "node_modules/jws/index.js"(exports2) {
        var SignStream = require_sign_stream();
        var VerifyStream = require_verify_stream();
        var ALGORITHMS = [
          "HS256",
          "HS384",
          "HS512",
          "RS256",
          "RS384",
          "RS512",
          "PS256",
          "PS384",
          "PS512",
          "ES256",
          "ES384",
          "ES512"
        ];
        exports2.ALGORITHMS = ALGORITHMS;
        exports2.sign = SignStream.sign;
        exports2.verify = VerifyStream.verify;
        exports2.decode = VerifyStream.decode;
        exports2.isValid = VerifyStream.isValid;
        exports2.createSign = function createSign(opts) {
          return new SignStream(opts);
        };
        exports2.createVerify = function createVerify(opts) {
          return new VerifyStream(opts);
        };
      }
    });
    var require_decode = __commonJS2({
      "node_modules/jsonwebtoken/decode.js"(exports2, module22) {
        var jws = require_jws();
        module22.exports = function(jwt, options) {
          options = options || {};
          var decoded = jws.decode(jwt, options);
          if (!decoded) {
            return null;
          }
          var payload = decoded.payload;
          if (typeof payload === "string") {
            try {
              var obj = JSON.parse(payload);
              if (obj !== null && typeof obj === "object") {
                payload = obj;
              }
            } catch (e) {
            }
          }
          if (options.complete === true) {
            return {
              header: decoded.header,
              payload,
              signature: decoded.signature
            };
          }
          return payload;
        };
      }
    });
    var require_JsonWebTokenError = __commonJS2({
      "node_modules/jsonwebtoken/lib/JsonWebTokenError.js"(exports2, module22) {
        var JsonWebTokenError = function(message, error) {
          Error.call(this, message);
          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
          }
          this.name = "JsonWebTokenError";
          this.message = message;
          if (error)
            this.inner = error;
        };
        JsonWebTokenError.prototype = Object.create(Error.prototype);
        JsonWebTokenError.prototype.constructor = JsonWebTokenError;
        module22.exports = JsonWebTokenError;
      }
    });
    var require_NotBeforeError = __commonJS2({
      "node_modules/jsonwebtoken/lib/NotBeforeError.js"(exports2, module22) {
        var JsonWebTokenError = require_JsonWebTokenError();
        var NotBeforeError = function(message, date) {
          JsonWebTokenError.call(this, message);
          this.name = "NotBeforeError";
          this.date = date;
        };
        NotBeforeError.prototype = Object.create(JsonWebTokenError.prototype);
        NotBeforeError.prototype.constructor = NotBeforeError;
        module22.exports = NotBeforeError;
      }
    });
    var require_TokenExpiredError = __commonJS2({
      "node_modules/jsonwebtoken/lib/TokenExpiredError.js"(exports2, module22) {
        var JsonWebTokenError = require_JsonWebTokenError();
        var TokenExpiredError = function(message, expiredAt) {
          JsonWebTokenError.call(this, message);
          this.name = "TokenExpiredError";
          this.expiredAt = expiredAt;
        };
        TokenExpiredError.prototype = Object.create(JsonWebTokenError.prototype);
        TokenExpiredError.prototype.constructor = TokenExpiredError;
        module22.exports = TokenExpiredError;
      }
    });
    var require_ms = __commonJS2({
      "node_modules/ms/index.js"(exports2, module22) {
        var s = 1e3;
        var m = s * 60;
        var h = m * 60;
        var d = h * 24;
        var w = d * 7;
        var y = d * 365.25;
        module22.exports = function(val, options) {
          options = options || {};
          var type = typeof val;
          if (type === "string" && val.length > 0) {
            return parse2(val);
          } else if (type === "number" && isFinite(val)) {
            return options.long ? fmtLong(val) : fmtShort(val);
          }
          throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
        };
        function parse2(str) {
          str = String(str);
          if (str.length > 100) {
            return;
          }
          var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
          if (!match) {
            return;
          }
          var n = parseFloat(match[1]);
          var type = (match[2] || "ms").toLowerCase();
          switch (type) {
            case "years":
            case "year":
            case "yrs":
            case "yr":
            case "y":
              return n * y;
            case "weeks":
            case "week":
            case "w":
              return n * w;
            case "days":
            case "day":
            case "d":
              return n * d;
            case "hours":
            case "hour":
            case "hrs":
            case "hr":
            case "h":
              return n * h;
            case "minutes":
            case "minute":
            case "mins":
            case "min":
            case "m":
              return n * m;
            case "seconds":
            case "second":
            case "secs":
            case "sec":
            case "s":
              return n * s;
            case "milliseconds":
            case "millisecond":
            case "msecs":
            case "msec":
            case "ms":
              return n;
            default:
              return void 0;
          }
        }
        function fmtShort(ms) {
          var msAbs = Math.abs(ms);
          if (msAbs >= d) {
            return Math.round(ms / d) + "d";
          }
          if (msAbs >= h) {
            return Math.round(ms / h) + "h";
          }
          if (msAbs >= m) {
            return Math.round(ms / m) + "m";
          }
          if (msAbs >= s) {
            return Math.round(ms / s) + "s";
          }
          return ms + "ms";
        }
        function fmtLong(ms) {
          var msAbs = Math.abs(ms);
          if (msAbs >= d) {
            return plural(ms, msAbs, d, "day");
          }
          if (msAbs >= h) {
            return plural(ms, msAbs, h, "hour");
          }
          if (msAbs >= m) {
            return plural(ms, msAbs, m, "minute");
          }
          if (msAbs >= s) {
            return plural(ms, msAbs, s, "second");
          }
          return ms + " ms";
        }
        function plural(ms, msAbs, n, name2) {
          var isPlural = msAbs >= n * 1.5;
          return Math.round(ms / n) + " " + name2 + (isPlural ? "s" : "");
        }
      }
    });
    var require_timespan = __commonJS2({
      "node_modules/jsonwebtoken/lib/timespan.js"(exports2, module22) {
        var ms = require_ms();
        module22.exports = function(time, iat) {
          var timestamp = iat || Math.floor(Date.now() / 1e3);
          if (typeof time === "string") {
            var milliseconds = ms(time);
            if (typeof milliseconds === "undefined") {
              return;
            }
            return Math.floor(timestamp + milliseconds / 1e3);
          } else if (typeof time === "number") {
            return timestamp + time;
          } else {
            return;
          }
        };
      }
    });
    var require_semver = __commonJS2({
      "node_modules/jsonwebtoken/node_modules/semver/semver.js"(exports2, module22) {
        exports2 = module22.exports = SemVer;
        var debug4;
        if (typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
          debug4 = function() {
            var args = Array.prototype.slice.call(arguments, 0);
            args.unshift("SEMVER");
            console.log.apply(console, args);
          };
        } else {
          debug4 = function() {
          };
        }
        exports2.SEMVER_SPEC_VERSION = "2.0.0";
        var MAX_LENGTH = 256;
        var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
        var MAX_SAFE_COMPONENT_LENGTH = 16;
        var re = exports2.re = [];
        var src = exports2.src = [];
        var R = 0;
        var NUMERICIDENTIFIER = R++;
        src[NUMERICIDENTIFIER] = "0|[1-9]\\d*";
        var NUMERICIDENTIFIERLOOSE = R++;
        src[NUMERICIDENTIFIERLOOSE] = "[0-9]+";
        var NONNUMERICIDENTIFIER = R++;
        src[NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*";
        var MAINVERSION = R++;
        src[MAINVERSION] = "(" + src[NUMERICIDENTIFIER] + ")\\.(" + src[NUMERICIDENTIFIER] + ")\\.(" + src[NUMERICIDENTIFIER] + ")";
        var MAINVERSIONLOOSE = R++;
        src[MAINVERSIONLOOSE] = "(" + src[NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[NUMERICIDENTIFIERLOOSE] + ")";
        var PRERELEASEIDENTIFIER = R++;
        src[PRERELEASEIDENTIFIER] = "(?:" + src[NUMERICIDENTIFIER] + "|" + src[NONNUMERICIDENTIFIER] + ")";
        var PRERELEASEIDENTIFIERLOOSE = R++;
        src[PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[NUMERICIDENTIFIERLOOSE] + "|" + src[NONNUMERICIDENTIFIER] + ")";
        var PRERELEASE = R++;
        src[PRERELEASE] = "(?:-(" + src[PRERELEASEIDENTIFIER] + "(?:\\." + src[PRERELEASEIDENTIFIER] + ")*))";
        var PRERELEASELOOSE = R++;
        src[PRERELEASELOOSE] = "(?:-?(" + src[PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[PRERELEASEIDENTIFIERLOOSE] + ")*))";
        var BUILDIDENTIFIER = R++;
        src[BUILDIDENTIFIER] = "[0-9A-Za-z-]+";
        var BUILD = R++;
        src[BUILD] = "(?:\\+(" + src[BUILDIDENTIFIER] + "(?:\\." + src[BUILDIDENTIFIER] + ")*))";
        var FULL = R++;
        var FULLPLAIN = "v?" + src[MAINVERSION] + src[PRERELEASE] + "?" + src[BUILD] + "?";
        src[FULL] = "^" + FULLPLAIN + "$";
        var LOOSEPLAIN = "[v=\\s]*" + src[MAINVERSIONLOOSE] + src[PRERELEASELOOSE] + "?" + src[BUILD] + "?";
        var LOOSE = R++;
        src[LOOSE] = "^" + LOOSEPLAIN + "$";
        var GTLT = R++;
        src[GTLT] = "((?:<|>)?=?)";
        var XRANGEIDENTIFIERLOOSE = R++;
        src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + "|x|X|\\*";
        var XRANGEIDENTIFIER = R++;
        src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + "|x|X|\\*";
        var XRANGEPLAIN = R++;
        src[XRANGEPLAIN] = "[v=\\s]*(" + src[XRANGEIDENTIFIER] + ")(?:\\.(" + src[XRANGEIDENTIFIER] + ")(?:\\.(" + src[XRANGEIDENTIFIER] + ")(?:" + src[PRERELEASE] + ")?" + src[BUILD] + "?)?)?";
        var XRANGEPLAINLOOSE = R++;
        src[XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[XRANGEIDENTIFIERLOOSE] + ")(?:" + src[PRERELEASELOOSE] + ")?" + src[BUILD] + "?)?)?";
        var XRANGE = R++;
        src[XRANGE] = "^" + src[GTLT] + "\\s*" + src[XRANGEPLAIN] + "$";
        var XRANGELOOSE = R++;
        src[XRANGELOOSE] = "^" + src[GTLT] + "\\s*" + src[XRANGEPLAINLOOSE] + "$";
        var COERCE = R++;
        src[COERCE] = "(?:^|[^\\d])(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "})(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:$|[^\\d])";
        var LONETILDE = R++;
        src[LONETILDE] = "(?:~>?)";
        var TILDETRIM = R++;
        src[TILDETRIM] = "(\\s*)" + src[LONETILDE] + "\\s+";
        re[TILDETRIM] = new RegExp(src[TILDETRIM], "g");
        var tildeTrimReplace = "$1~";
        var TILDE = R++;
        src[TILDE] = "^" + src[LONETILDE] + src[XRANGEPLAIN] + "$";
        var TILDELOOSE = R++;
        src[TILDELOOSE] = "^" + src[LONETILDE] + src[XRANGEPLAINLOOSE] + "$";
        var LONECARET = R++;
        src[LONECARET] = "(?:\\^)";
        var CARETTRIM = R++;
        src[CARETTRIM] = "(\\s*)" + src[LONECARET] + "\\s+";
        re[CARETTRIM] = new RegExp(src[CARETTRIM], "g");
        var caretTrimReplace = "$1^";
        var CARET = R++;
        src[CARET] = "^" + src[LONECARET] + src[XRANGEPLAIN] + "$";
        var CARETLOOSE = R++;
        src[CARETLOOSE] = "^" + src[LONECARET] + src[XRANGEPLAINLOOSE] + "$";
        var COMPARATORLOOSE = R++;
        src[COMPARATORLOOSE] = "^" + src[GTLT] + "\\s*(" + LOOSEPLAIN + ")$|^$";
        var COMPARATOR = R++;
        src[COMPARATOR] = "^" + src[GTLT] + "\\s*(" + FULLPLAIN + ")$|^$";
        var COMPARATORTRIM = R++;
        src[COMPARATORTRIM] = "(\\s*)" + src[GTLT] + "\\s*(" + LOOSEPLAIN + "|" + src[XRANGEPLAIN] + ")";
        re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], "g");
        var comparatorTrimReplace = "$1$2$3";
        var HYPHENRANGE = R++;
        src[HYPHENRANGE] = "^\\s*(" + src[XRANGEPLAIN] + ")\\s+-\\s+(" + src[XRANGEPLAIN] + ")\\s*$";
        var HYPHENRANGELOOSE = R++;
        src[HYPHENRANGELOOSE] = "^\\s*(" + src[XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[XRANGEPLAINLOOSE] + ")\\s*$";
        var STAR = R++;
        src[STAR] = "(<|>)?=?\\s*\\*";
        for (i = 0; i < R; i++) {
          debug4(i, src[i]);
          if (!re[i]) {
            re[i] = new RegExp(src[i]);
          }
        }
        var i;
        exports2.parse = parse2;
        function parse2(version2, options) {
          if (!options || typeof options !== "object") {
            options = {
              loose: !!options,
              includePrerelease: false
            };
          }
          if (version2 instanceof SemVer) {
            return version2;
          }
          if (typeof version2 !== "string") {
            return null;
          }
          if (version2.length > MAX_LENGTH) {
            return null;
          }
          var r = options.loose ? re[LOOSE] : re[FULL];
          if (!r.test(version2)) {
            return null;
          }
          try {
            return new SemVer(version2, options);
          } catch (er) {
            return null;
          }
        }
        exports2.valid = valid;
        function valid(version2, options) {
          var v = parse2(version2, options);
          return v ? v.version : null;
        }
        exports2.clean = clean;
        function clean(version2, options) {
          var s = parse2(version2.trim().replace(/^[=v]+/, ""), options);
          return s ? s.version : null;
        }
        exports2.SemVer = SemVer;
        function SemVer(version2, options) {
          if (!options || typeof options !== "object") {
            options = {
              loose: !!options,
              includePrerelease: false
            };
          }
          if (version2 instanceof SemVer) {
            if (version2.loose === options.loose) {
              return version2;
            } else {
              version2 = version2.version;
            }
          } else if (typeof version2 !== "string") {
            throw new TypeError("Invalid Version: " + version2);
          }
          if (version2.length > MAX_LENGTH) {
            throw new TypeError("version is longer than " + MAX_LENGTH + " characters");
          }
          if (!(this instanceof SemVer)) {
            return new SemVer(version2, options);
          }
          debug4("SemVer", version2, options);
          this.options = options;
          this.loose = !!options.loose;
          var m = version2.trim().match(options.loose ? re[LOOSE] : re[FULL]);
          if (!m) {
            throw new TypeError("Invalid Version: " + version2);
          }
          this.raw = version2;
          this.major = +m[1];
          this.minor = +m[2];
          this.patch = +m[3];
          if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
            throw new TypeError("Invalid major version");
          }
          if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
            throw new TypeError("Invalid minor version");
          }
          if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
            throw new TypeError("Invalid patch version");
          }
          if (!m[4]) {
            this.prerelease = [];
          } else {
            this.prerelease = m[4].split(".").map(function(id) {
              if (/^[0-9]+$/.test(id)) {
                var num = +id;
                if (num >= 0 && num < MAX_SAFE_INTEGER) {
                  return num;
                }
              }
              return id;
            });
          }
          this.build = m[5] ? m[5].split(".") : [];
          this.format();
        }
        SemVer.prototype.format = function() {
          this.version = this.major + "." + this.minor + "." + this.patch;
          if (this.prerelease.length) {
            this.version += "-" + this.prerelease.join(".");
          }
          return this.version;
        };
        SemVer.prototype.toString = function() {
          return this.version;
        };
        SemVer.prototype.compare = function(other) {
          debug4("SemVer.compare", this.version, this.options, other);
          if (!(other instanceof SemVer)) {
            other = new SemVer(other, this.options);
          }
          return this.compareMain(other) || this.comparePre(other);
        };
        SemVer.prototype.compareMain = function(other) {
          if (!(other instanceof SemVer)) {
            other = new SemVer(other, this.options);
          }
          return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
        };
        SemVer.prototype.comparePre = function(other) {
          if (!(other instanceof SemVer)) {
            other = new SemVer(other, this.options);
          }
          if (this.prerelease.length && !other.prerelease.length) {
            return -1;
          } else if (!this.prerelease.length && other.prerelease.length) {
            return 1;
          } else if (!this.prerelease.length && !other.prerelease.length) {
            return 0;
          }
          var i2 = 0;
          do {
            var a = this.prerelease[i2];
            var b = other.prerelease[i2];
            debug4("prerelease compare", i2, a, b);
            if (a === void 0 && b === void 0) {
              return 0;
            } else if (b === void 0) {
              return 1;
            } else if (a === void 0) {
              return -1;
            } else if (a === b) {
              continue;
            } else {
              return compareIdentifiers(a, b);
            }
          } while (++i2);
        };
        SemVer.prototype.inc = function(release, identifier) {
          switch (release) {
            case "premajor":
              this.prerelease.length = 0;
              this.patch = 0;
              this.minor = 0;
              this.major++;
              this.inc("pre", identifier);
              break;
            case "preminor":
              this.prerelease.length = 0;
              this.patch = 0;
              this.minor++;
              this.inc("pre", identifier);
              break;
            case "prepatch":
              this.prerelease.length = 0;
              this.inc("patch", identifier);
              this.inc("pre", identifier);
              break;
            case "prerelease":
              if (this.prerelease.length === 0) {
                this.inc("patch", identifier);
              }
              this.inc("pre", identifier);
              break;
            case "major":
              if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
                this.major++;
              }
              this.minor = 0;
              this.patch = 0;
              this.prerelease = [];
              break;
            case "minor":
              if (this.patch !== 0 || this.prerelease.length === 0) {
                this.minor++;
              }
              this.patch = 0;
              this.prerelease = [];
              break;
            case "patch":
              if (this.prerelease.length === 0) {
                this.patch++;
              }
              this.prerelease = [];
              break;
            case "pre":
              if (this.prerelease.length === 0) {
                this.prerelease = [0];
              } else {
                var i2 = this.prerelease.length;
                while (--i2 >= 0) {
                  if (typeof this.prerelease[i2] === "number") {
                    this.prerelease[i2]++;
                    i2 = -2;
                  }
                }
                if (i2 === -1) {
                  this.prerelease.push(0);
                }
              }
              if (identifier) {
                if (this.prerelease[0] === identifier) {
                  if (isNaN(this.prerelease[1])) {
                    this.prerelease = [identifier, 0];
                  }
                } else {
                  this.prerelease = [identifier, 0];
                }
              }
              break;
            default:
              throw new Error("invalid increment argument: " + release);
          }
          this.format();
          this.raw = this.version;
          return this;
        };
        exports2.inc = inc;
        function inc(version2, release, loose, identifier) {
          if (typeof loose === "string") {
            identifier = loose;
            loose = void 0;
          }
          try {
            return new SemVer(version2, loose).inc(release, identifier).version;
          } catch (er) {
            return null;
          }
        }
        exports2.diff = diff;
        function diff(version1, version2) {
          if (eq(version1, version2)) {
            return null;
          } else {
            var v12 = parse2(version1);
            var v2 = parse2(version2);
            var prefix = "";
            if (v12.prerelease.length || v2.prerelease.length) {
              prefix = "pre";
              var defaultResult = "prerelease";
            }
            for (var key in v12) {
              if (key === "major" || key === "minor" || key === "patch") {
                if (v12[key] !== v2[key]) {
                  return prefix + key;
                }
              }
            }
            return defaultResult;
          }
        }
        exports2.compareIdentifiers = compareIdentifiers;
        var numeric = /^[0-9]+$/;
        function compareIdentifiers(a, b) {
          var anum = numeric.test(a);
          var bnum = numeric.test(b);
          if (anum && bnum) {
            a = +a;
            b = +b;
          }
          return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
        }
        exports2.rcompareIdentifiers = rcompareIdentifiers;
        function rcompareIdentifiers(a, b) {
          return compareIdentifiers(b, a);
        }
        exports2.major = major;
        function major(a, loose) {
          return new SemVer(a, loose).major;
        }
        exports2.minor = minor;
        function minor(a, loose) {
          return new SemVer(a, loose).minor;
        }
        exports2.patch = patch;
        function patch(a, loose) {
          return new SemVer(a, loose).patch;
        }
        exports2.compare = compare;
        function compare(a, b, loose) {
          return new SemVer(a, loose).compare(new SemVer(b, loose));
        }
        exports2.compareLoose = compareLoose;
        function compareLoose(a, b) {
          return compare(a, b, true);
        }
        exports2.rcompare = rcompare;
        function rcompare(a, b, loose) {
          return compare(b, a, loose);
        }
        exports2.sort = sort;
        function sort(list, loose) {
          return list.sort(function(a, b) {
            return exports2.compare(a, b, loose);
          });
        }
        exports2.rsort = rsort;
        function rsort(list, loose) {
          return list.sort(function(a, b) {
            return exports2.rcompare(a, b, loose);
          });
        }
        exports2.gt = gt;
        function gt(a, b, loose) {
          return compare(a, b, loose) > 0;
        }
        exports2.lt = lt;
        function lt(a, b, loose) {
          return compare(a, b, loose) < 0;
        }
        exports2.eq = eq;
        function eq(a, b, loose) {
          return compare(a, b, loose) === 0;
        }
        exports2.neq = neq;
        function neq(a, b, loose) {
          return compare(a, b, loose) !== 0;
        }
        exports2.gte = gte;
        function gte(a, b, loose) {
          return compare(a, b, loose) >= 0;
        }
        exports2.lte = lte;
        function lte(a, b, loose) {
          return compare(a, b, loose) <= 0;
        }
        exports2.cmp = cmp;
        function cmp(a, op, b, loose) {
          switch (op) {
            case "===":
              if (typeof a === "object")
                a = a.version;
              if (typeof b === "object")
                b = b.version;
              return a === b;
            case "!==":
              if (typeof a === "object")
                a = a.version;
              if (typeof b === "object")
                b = b.version;
              return a !== b;
            case "":
            case "=":
            case "==":
              return eq(a, b, loose);
            case "!=":
              return neq(a, b, loose);
            case ">":
              return gt(a, b, loose);
            case ">=":
              return gte(a, b, loose);
            case "<":
              return lt(a, b, loose);
            case "<=":
              return lte(a, b, loose);
            default:
              throw new TypeError("Invalid operator: " + op);
          }
        }
        exports2.Comparator = Comparator;
        function Comparator(comp, options) {
          if (!options || typeof options !== "object") {
            options = {
              loose: !!options,
              includePrerelease: false
            };
          }
          if (comp instanceof Comparator) {
            if (comp.loose === !!options.loose) {
              return comp;
            } else {
              comp = comp.value;
            }
          }
          if (!(this instanceof Comparator)) {
            return new Comparator(comp, options);
          }
          debug4("comparator", comp, options);
          this.options = options;
          this.loose = !!options.loose;
          this.parse(comp);
          if (this.semver === ANY) {
            this.value = "";
          } else {
            this.value = this.operator + this.semver.version;
          }
          debug4("comp", this);
        }
        var ANY = {};
        Comparator.prototype.parse = function(comp) {
          var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
          var m = comp.match(r);
          if (!m) {
            throw new TypeError("Invalid comparator: " + comp);
          }
          this.operator = m[1];
          if (this.operator === "=") {
            this.operator = "";
          }
          if (!m[2]) {
            this.semver = ANY;
          } else {
            this.semver = new SemVer(m[2], this.options.loose);
          }
        };
        Comparator.prototype.toString = function() {
          return this.value;
        };
        Comparator.prototype.test = function(version2) {
          debug4("Comparator.test", version2, this.options.loose);
          if (this.semver === ANY) {
            return true;
          }
          if (typeof version2 === "string") {
            version2 = new SemVer(version2, this.options);
          }
          return cmp(version2, this.operator, this.semver, this.options);
        };
        Comparator.prototype.intersects = function(comp, options) {
          if (!(comp instanceof Comparator)) {
            throw new TypeError("a Comparator is required");
          }
          if (!options || typeof options !== "object") {
            options = {
              loose: !!options,
              includePrerelease: false
            };
          }
          var rangeTmp;
          if (this.operator === "") {
            rangeTmp = new Range(comp.value, options);
            return satisfies(this.value, rangeTmp, options);
          } else if (comp.operator === "") {
            rangeTmp = new Range(this.value, options);
            return satisfies(comp.semver, rangeTmp, options);
          }
          var sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
          var sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
          var sameSemVer = this.semver.version === comp.semver.version;
          var differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
          var oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && ((this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<"));
          var oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && ((this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">"));
          return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
        };
        exports2.Range = Range;
        function Range(range, options) {
          if (!options || typeof options !== "object") {
            options = {
              loose: !!options,
              includePrerelease: false
            };
          }
          if (range instanceof Range) {
            if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
              return range;
            } else {
              return new Range(range.raw, options);
            }
          }
          if (range instanceof Comparator) {
            return new Range(range.value, options);
          }
          if (!(this instanceof Range)) {
            return new Range(range, options);
          }
          this.options = options;
          this.loose = !!options.loose;
          this.includePrerelease = !!options.includePrerelease;
          this.raw = range;
          this.set = range.split(/\s*\|\|\s*/).map(function(range2) {
            return this.parseRange(range2.trim());
          }, this).filter(function(c) {
            return c.length;
          });
          if (!this.set.length) {
            throw new TypeError("Invalid SemVer Range: " + range);
          }
          this.format();
        }
        Range.prototype.format = function() {
          this.range = this.set.map(function(comps) {
            return comps.join(" ").trim();
          }).join("||").trim();
          return this.range;
        };
        Range.prototype.toString = function() {
          return this.range;
        };
        Range.prototype.parseRange = function(range) {
          var loose = this.options.loose;
          range = range.trim();
          var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
          range = range.replace(hr, hyphenReplace);
          debug4("hyphen replace", range);
          range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
          debug4("comparator trim", range, re[COMPARATORTRIM]);
          range = range.replace(re[TILDETRIM], tildeTrimReplace);
          range = range.replace(re[CARETTRIM], caretTrimReplace);
          range = range.split(/\s+/).join(" ");
          var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
          var set = range.split(" ").map(function(comp) {
            return parseComparator(comp, this.options);
          }, this).join(" ").split(/\s+/);
          if (this.options.loose) {
            set = set.filter(function(comp) {
              return !!comp.match(compRe);
            });
          }
          set = set.map(function(comp) {
            return new Comparator(comp, this.options);
          }, this);
          return set;
        };
        Range.prototype.intersects = function(range, options) {
          if (!(range instanceof Range)) {
            throw new TypeError("a Range is required");
          }
          return this.set.some(function(thisComparators) {
            return thisComparators.every(function(thisComparator) {
              return range.set.some(function(rangeComparators) {
                return rangeComparators.every(function(rangeComparator) {
                  return thisComparator.intersects(rangeComparator, options);
                });
              });
            });
          });
        };
        exports2.toComparators = toComparators;
        function toComparators(range, options) {
          return new Range(range, options).set.map(function(comp) {
            return comp.map(function(c) {
              return c.value;
            }).join(" ").trim().split(" ");
          });
        }
        function parseComparator(comp, options) {
          debug4("comp", comp, options);
          comp = replaceCarets(comp, options);
          debug4("caret", comp);
          comp = replaceTildes(comp, options);
          debug4("tildes", comp);
          comp = replaceXRanges(comp, options);
          debug4("xrange", comp);
          comp = replaceStars(comp, options);
          debug4("stars", comp);
          return comp;
        }
        function isX(id) {
          return !id || id.toLowerCase() === "x" || id === "*";
        }
        function replaceTildes(comp, options) {
          return comp.trim().split(/\s+/).map(function(comp2) {
            return replaceTilde(comp2, options);
          }).join(" ");
        }
        function replaceTilde(comp, options) {
          var r = options.loose ? re[TILDELOOSE] : re[TILDE];
          return comp.replace(r, function(_, M, m, p, pr) {
            debug4("tilde", comp, _, M, m, p, pr);
            var ret;
            if (isX(M)) {
              ret = "";
            } else if (isX(m)) {
              ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
            } else if (isX(p)) {
              ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
            } else if (pr) {
              debug4("replaceTilde pr", pr);
              ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
            } else {
              ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
            }
            debug4("tilde return", ret);
            return ret;
          });
        }
        function replaceCarets(comp, options) {
          return comp.trim().split(/\s+/).map(function(comp2) {
            return replaceCaret(comp2, options);
          }).join(" ");
        }
        function replaceCaret(comp, options) {
          debug4("caret", comp, options);
          var r = options.loose ? re[CARETLOOSE] : re[CARET];
          return comp.replace(r, function(_, M, m, p, pr) {
            debug4("caret", comp, _, M, m, p, pr);
            var ret;
            if (isX(M)) {
              ret = "";
            } else if (isX(m)) {
              ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
            } else if (isX(p)) {
              if (M === "0") {
                ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
              } else {
                ret = ">=" + M + "." + m + ".0 <" + (+M + 1) + ".0.0";
              }
            } else if (pr) {
              debug4("replaceCaret pr", pr);
              if (M === "0") {
                if (m === "0") {
                  ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + m + "." + (+p + 1);
                } else {
                  ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
                }
              } else {
                ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + (+M + 1) + ".0.0";
              }
            } else {
              debug4("no pr");
              if (M === "0") {
                if (m === "0") {
                  ret = ">=" + M + "." + m + "." + p + " <" + M + "." + m + "." + (+p + 1);
                } else {
                  ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
                }
              } else {
                ret = ">=" + M + "." + m + "." + p + " <" + (+M + 1) + ".0.0";
              }
            }
            debug4("caret return", ret);
            return ret;
          });
        }
        function replaceXRanges(comp, options) {
          debug4("replaceXRanges", comp, options);
          return comp.split(/\s+/).map(function(comp2) {
            return replaceXRange(comp2, options);
          }).join(" ");
        }
        function replaceXRange(comp, options) {
          comp = comp.trim();
          var r = options.loose ? re[XRANGELOOSE] : re[XRANGE];
          return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
            debug4("xRange", comp, ret, gtlt, M, m, p, pr);
            var xM = isX(M);
            var xm = xM || isX(m);
            var xp = xm || isX(p);
            var anyX = xp;
            if (gtlt === "=" && anyX) {
              gtlt = "";
            }
            if (xM) {
              if (gtlt === ">" || gtlt === "<") {
                ret = "<0.0.0";
              } else {
                ret = "*";
              }
            } else if (gtlt && anyX) {
              if (xm) {
                m = 0;
              }
              p = 0;
              if (gtlt === ">") {
                gtlt = ">=";
                if (xm) {
                  M = +M + 1;
                  m = 0;
                  p = 0;
                } else {
                  m = +m + 1;
                  p = 0;
                }
              } else if (gtlt === "<=") {
                gtlt = "<";
                if (xm) {
                  M = +M + 1;
                } else {
                  m = +m + 1;
                }
              }
              ret = gtlt + M + "." + m + "." + p;
            } else if (xm) {
              ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
            } else if (xp) {
              ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
            }
            debug4("xRange return", ret);
            return ret;
          });
        }
        function replaceStars(comp, options) {
          debug4("replaceStars", comp, options);
          return comp.trim().replace(re[STAR], "");
        }
        function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
          if (isX(fM)) {
            from = "";
          } else if (isX(fm)) {
            from = ">=" + fM + ".0.0";
          } else if (isX(fp)) {
            from = ">=" + fM + "." + fm + ".0";
          } else {
            from = ">=" + from;
          }
          if (isX(tM)) {
            to = "";
          } else if (isX(tm)) {
            to = "<" + (+tM + 1) + ".0.0";
          } else if (isX(tp)) {
            to = "<" + tM + "." + (+tm + 1) + ".0";
          } else if (tpr) {
            to = "<=" + tM + "." + tm + "." + tp + "-" + tpr;
          } else {
            to = "<=" + to;
          }
          return (from + " " + to).trim();
        }
        Range.prototype.test = function(version2) {
          if (!version2) {
            return false;
          }
          if (typeof version2 === "string") {
            version2 = new SemVer(version2, this.options);
          }
          for (var i2 = 0; i2 < this.set.length; i2++) {
            if (testSet(this.set[i2], version2, this.options)) {
              return true;
            }
          }
          return false;
        };
        function testSet(set, version2, options) {
          for (var i2 = 0; i2 < set.length; i2++) {
            if (!set[i2].test(version2)) {
              return false;
            }
          }
          if (version2.prerelease.length && !options.includePrerelease) {
            for (i2 = 0; i2 < set.length; i2++) {
              debug4(set[i2].semver);
              if (set[i2].semver === ANY) {
                continue;
              }
              if (set[i2].semver.prerelease.length > 0) {
                var allowed = set[i2].semver;
                if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch) {
                  return true;
                }
              }
            }
            return false;
          }
          return true;
        }
        exports2.satisfies = satisfies;
        function satisfies(version2, range, options) {
          try {
            range = new Range(range, options);
          } catch (er) {
            return false;
          }
          return range.test(version2);
        }
        exports2.maxSatisfying = maxSatisfying;
        function maxSatisfying(versions, range, options) {
          var max = null;
          var maxSV = null;
          try {
            var rangeObj = new Range(range, options);
          } catch (er) {
            return null;
          }
          versions.forEach(function(v) {
            if (rangeObj.test(v)) {
              if (!max || maxSV.compare(v) === -1) {
                max = v;
                maxSV = new SemVer(max, options);
              }
            }
          });
          return max;
        }
        exports2.minSatisfying = minSatisfying;
        function minSatisfying(versions, range, options) {
          var min = null;
          var minSV = null;
          try {
            var rangeObj = new Range(range, options);
          } catch (er) {
            return null;
          }
          versions.forEach(function(v) {
            if (rangeObj.test(v)) {
              if (!min || minSV.compare(v) === 1) {
                min = v;
                minSV = new SemVer(min, options);
              }
            }
          });
          return min;
        }
        exports2.minVersion = minVersion;
        function minVersion(range, loose) {
          range = new Range(range, loose);
          var minver = new SemVer("0.0.0");
          if (range.test(minver)) {
            return minver;
          }
          minver = new SemVer("0.0.0-0");
          if (range.test(minver)) {
            return minver;
          }
          minver = null;
          for (var i2 = 0; i2 < range.set.length; ++i2) {
            var comparators = range.set[i2];
            comparators.forEach(function(comparator) {
              var compver = new SemVer(comparator.semver.version);
              switch (comparator.operator) {
                case ">":
                  if (compver.prerelease.length === 0) {
                    compver.patch++;
                  } else {
                    compver.prerelease.push(0);
                  }
                  compver.raw = compver.format();
                case "":
                case ">=":
                  if (!minver || gt(minver, compver)) {
                    minver = compver;
                  }
                  break;
                case "<":
                case "<=":
                  break;
                default:
                  throw new Error("Unexpected operation: " + comparator.operator);
              }
            });
          }
          if (minver && range.test(minver)) {
            return minver;
          }
          return null;
        }
        exports2.validRange = validRange;
        function validRange(range, options) {
          try {
            return new Range(range, options).range || "*";
          } catch (er) {
            return null;
          }
        }
        exports2.ltr = ltr;
        function ltr(version2, range, options) {
          return outside(version2, range, "<", options);
        }
        exports2.gtr = gtr;
        function gtr(version2, range, options) {
          return outside(version2, range, ">", options);
        }
        exports2.outside = outside;
        function outside(version2, range, hilo, options) {
          version2 = new SemVer(version2, options);
          range = new Range(range, options);
          var gtfn, ltefn, ltfn, comp, ecomp;
          switch (hilo) {
            case ">":
              gtfn = gt;
              ltefn = lte;
              ltfn = lt;
              comp = ">";
              ecomp = ">=";
              break;
            case "<":
              gtfn = lt;
              ltefn = gte;
              ltfn = gt;
              comp = "<";
              ecomp = "<=";
              break;
            default:
              throw new TypeError('Must provide a hilo val of "<" or ">"');
          }
          if (satisfies(version2, range, options)) {
            return false;
          }
          for (var i2 = 0; i2 < range.set.length; ++i2) {
            var comparators = range.set[i2];
            var high = null;
            var low = null;
            comparators.forEach(function(comparator) {
              if (comparator.semver === ANY) {
                comparator = new Comparator(">=0.0.0");
              }
              high = high || comparator;
              low = low || comparator;
              if (gtfn(comparator.semver, high.semver, options)) {
                high = comparator;
              } else if (ltfn(comparator.semver, low.semver, options)) {
                low = comparator;
              }
            });
            if (high.operator === comp || high.operator === ecomp) {
              return false;
            }
            if ((!low.operator || low.operator === comp) && ltefn(version2, low.semver)) {
              return false;
            } else if (low.operator === ecomp && ltfn(version2, low.semver)) {
              return false;
            }
          }
          return true;
        }
        exports2.prerelease = prerelease;
        function prerelease(version2, options) {
          var parsed = parse2(version2, options);
          return parsed && parsed.prerelease.length ? parsed.prerelease : null;
        }
        exports2.intersects = intersects;
        function intersects(r1, r2, options) {
          r1 = new Range(r1, options);
          r2 = new Range(r2, options);
          return r1.intersects(r2);
        }
        exports2.coerce = coerce;
        function coerce(version2) {
          if (version2 instanceof SemVer) {
            return version2;
          }
          if (typeof version2 !== "string") {
            return null;
          }
          var match = version2.match(re[COERCE]);
          if (match == null) {
            return null;
          }
          return parse2(match[1] + "." + (match[2] || "0") + "." + (match[3] || "0"));
        }
      }
    });
    var require_psSupported = __commonJS2({
      "node_modules/jsonwebtoken/lib/psSupported.js"(exports2, module22) {
        var semver = require_semver();
        module22.exports = semver.satisfies(process.version, "^6.12.0 || >=8.0.0");
      }
    });
    var require_verify = __commonJS2({
      "node_modules/jsonwebtoken/verify.js"(exports2, module22) {
        var JsonWebTokenError = require_JsonWebTokenError();
        var NotBeforeError = require_NotBeforeError();
        var TokenExpiredError = require_TokenExpiredError();
        var decode = require_decode();
        var timespan = require_timespan();
        var PS_SUPPORTED = require_psSupported();
        var jws = require_jws();
        var PUB_KEY_ALGS = ["RS256", "RS384", "RS512", "ES256", "ES384", "ES512"];
        var RSA_KEY_ALGS = ["RS256", "RS384", "RS512"];
        var HS_ALGS = ["HS256", "HS384", "HS512"];
        if (PS_SUPPORTED) {
          PUB_KEY_ALGS.splice(3, 0, "PS256", "PS384", "PS512");
          RSA_KEY_ALGS.splice(3, 0, "PS256", "PS384", "PS512");
        }
        module22.exports = function(jwtString, secretOrPublicKey, options, callback) {
          if (typeof options === "function" && !callback) {
            callback = options;
            options = {};
          }
          if (!options) {
            options = {};
          }
          options = Object.assign({}, options);
          var done;
          if (callback) {
            done = callback;
          } else {
            done = function(err, data) {
              if (err)
                throw err;
              return data;
            };
          }
          if (options.clockTimestamp && typeof options.clockTimestamp !== "number") {
            return done(new JsonWebTokenError("clockTimestamp must be a number"));
          }
          if (options.nonce !== void 0 && (typeof options.nonce !== "string" || options.nonce.trim() === "")) {
            return done(new JsonWebTokenError("nonce must be a non-empty string"));
          }
          var clockTimestamp = options.clockTimestamp || Math.floor(Date.now() / 1e3);
          if (!jwtString) {
            return done(new JsonWebTokenError("jwt must be provided"));
          }
          if (typeof jwtString !== "string") {
            return done(new JsonWebTokenError("jwt must be a string"));
          }
          var parts = jwtString.split(".");
          if (parts.length !== 3) {
            return done(new JsonWebTokenError("jwt malformed"));
          }
          var decodedToken;
          try {
            decodedToken = decode(jwtString, { complete: true });
          } catch (err) {
            return done(err);
          }
          if (!decodedToken) {
            return done(new JsonWebTokenError("invalid token"));
          }
          var header = decodedToken.header;
          var getSecret;
          if (typeof secretOrPublicKey === "function") {
            if (!callback) {
              return done(new JsonWebTokenError("verify must be called asynchronous if secret or public key is provided as a callback"));
            }
            getSecret = secretOrPublicKey;
          } else {
            getSecret = function(header2, secretCallback) {
              return secretCallback(null, secretOrPublicKey);
            };
          }
          return getSecret(header, function(err, secretOrPublicKey2) {
            if (err) {
              return done(new JsonWebTokenError("error in secret or public key callback: " + err.message));
            }
            var hasSignature = parts[2].trim() !== "";
            if (!hasSignature && secretOrPublicKey2) {
              return done(new JsonWebTokenError("jwt signature is required"));
            }
            if (hasSignature && !secretOrPublicKey2) {
              return done(new JsonWebTokenError("secret or public key must be provided"));
            }
            if (!hasSignature && !options.algorithms) {
              options.algorithms = ["none"];
            }
            if (!options.algorithms) {
              options.algorithms = ~secretOrPublicKey2.toString().indexOf("BEGIN CERTIFICATE") || ~secretOrPublicKey2.toString().indexOf("BEGIN PUBLIC KEY") ? PUB_KEY_ALGS : ~secretOrPublicKey2.toString().indexOf("BEGIN RSA PUBLIC KEY") ? RSA_KEY_ALGS : HS_ALGS;
            }
            if (!~options.algorithms.indexOf(decodedToken.header.alg)) {
              return done(new JsonWebTokenError("invalid algorithm"));
            }
            var valid;
            try {
              valid = jws.verify(jwtString, decodedToken.header.alg, secretOrPublicKey2);
            } catch (e) {
              return done(e);
            }
            if (!valid) {
              return done(new JsonWebTokenError("invalid signature"));
            }
            var payload = decodedToken.payload;
            if (typeof payload.nbf !== "undefined" && !options.ignoreNotBefore) {
              if (typeof payload.nbf !== "number") {
                return done(new JsonWebTokenError("invalid nbf value"));
              }
              if (payload.nbf > clockTimestamp + (options.clockTolerance || 0)) {
                return done(new NotBeforeError("jwt not active", new Date(payload.nbf * 1e3)));
              }
            }
            if (typeof payload.exp !== "undefined" && !options.ignoreExpiration) {
              if (typeof payload.exp !== "number") {
                return done(new JsonWebTokenError("invalid exp value"));
              }
              if (clockTimestamp >= payload.exp + (options.clockTolerance || 0)) {
                return done(new TokenExpiredError("jwt expired", new Date(payload.exp * 1e3)));
              }
            }
            if (options.audience) {
              var audiences = Array.isArray(options.audience) ? options.audience : [options.audience];
              var target = Array.isArray(payload.aud) ? payload.aud : [payload.aud];
              var match = target.some(function(targetAudience) {
                return audiences.some(function(audience) {
                  return audience instanceof RegExp ? audience.test(targetAudience) : audience === targetAudience;
                });
              });
              if (!match) {
                return done(new JsonWebTokenError("jwt audience invalid. expected: " + audiences.join(" or ")));
              }
            }
            if (options.issuer) {
              var invalid_issuer = typeof options.issuer === "string" && payload.iss !== options.issuer || Array.isArray(options.issuer) && options.issuer.indexOf(payload.iss) === -1;
              if (invalid_issuer) {
                return done(new JsonWebTokenError("jwt issuer invalid. expected: " + options.issuer));
              }
            }
            if (options.subject) {
              if (payload.sub !== options.subject) {
                return done(new JsonWebTokenError("jwt subject invalid. expected: " + options.subject));
              }
            }
            if (options.jwtid) {
              if (payload.jti !== options.jwtid) {
                return done(new JsonWebTokenError("jwt jwtid invalid. expected: " + options.jwtid));
              }
            }
            if (options.nonce) {
              if (payload.nonce !== options.nonce) {
                return done(new JsonWebTokenError("jwt nonce invalid. expected: " + options.nonce));
              }
            }
            if (options.maxAge) {
              if (typeof payload.iat !== "number") {
                return done(new JsonWebTokenError("iat required when maxAge is specified"));
              }
              var maxAgeTimestamp = timespan(options.maxAge, payload.iat);
              if (typeof maxAgeTimestamp === "undefined") {
                return done(new JsonWebTokenError('"maxAge" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
              }
              if (clockTimestamp >= maxAgeTimestamp + (options.clockTolerance || 0)) {
                return done(new TokenExpiredError("maxAge exceeded", new Date(maxAgeTimestamp * 1e3)));
              }
            }
            if (options.complete === true) {
              var signature = decodedToken.signature;
              return done(null, {
                header,
                payload,
                signature
              });
            }
            return done(null, payload);
          });
        };
      }
    });
    var require_lodash = __commonJS2({
      "node_modules/lodash.includes/index.js"(exports2, module22) {
        var INFINITY = 1 / 0;
        var MAX_SAFE_INTEGER = 9007199254740991;
        var MAX_INTEGER = 17976931348623157e292;
        var NAN = 0 / 0;
        var argsTag = "[object Arguments]";
        var funcTag = "[object Function]";
        var genTag = "[object GeneratorFunction]";
        var stringTag = "[object String]";
        var symbolTag = "[object Symbol]";
        var reTrim = /^\s+|\s+$/g;
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
        var reIsBinary = /^0b[01]+$/i;
        var reIsOctal = /^0o[0-7]+$/i;
        var reIsUint = /^(?:0|[1-9]\d*)$/;
        var freeParseInt = parseInt;
        function arrayMap(array, iteratee) {
          var index = -1, length = array ? array.length : 0, result = Array(length);
          while (++index < length) {
            result[index] = iteratee(array[index], index, array);
          }
          return result;
        }
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
          var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
          while (fromRight ? index-- : ++index < length) {
            if (predicate(array[index], index, array)) {
              return index;
            }
          }
          return -1;
        }
        function baseIndexOf(array, value, fromIndex) {
          if (value !== value) {
            return baseFindIndex(array, baseIsNaN, fromIndex);
          }
          var index = fromIndex - 1, length = array.length;
          while (++index < length) {
            if (array[index] === value) {
              return index;
            }
          }
          return -1;
        }
        function baseIsNaN(value) {
          return value !== value;
        }
        function baseTimes(n, iteratee) {
          var index = -1, result = Array(n);
          while (++index < n) {
            result[index] = iteratee(index);
          }
          return result;
        }
        function baseValues(object, props) {
          return arrayMap(props, function(key) {
            return object[key];
          });
        }
        function overArg(func, transform) {
          return function(arg) {
            return func(transform(arg));
          };
        }
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var objectToString = objectProto.toString;
        var propertyIsEnumerable = objectProto.propertyIsEnumerable;
        var nativeKeys = overArg(Object.keys, Object);
        var nativeMax = Math.max;
        function arrayLikeKeys(value, inherited) {
          var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
          var length = result.length, skipIndexes = !!length;
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
              result.push(key);
            }
          }
          return result;
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result = [];
          for (var key in Object(object)) {
            if (hasOwnProperty.call(object, key) && key != "constructor") {
              result.push(key);
            }
          }
          return result;
        }
        function isIndex(value, length) {
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        function isArguments(value) {
          return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
        }
        var isArray = Array.isArray;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isFunction(value) {
          var tag = isObject2(value) ? objectToString.call(value) : "";
          return tag == funcTag || tag == genTag;
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject2(value) {
          var type = typeof value;
          return !!value && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return !!value && typeof value == "object";
        }
        function isString(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag;
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result = toFinite(value), remainder = result % 1;
          return result === result ? remainder ? result - remainder : result : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject2(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject2(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = value.replace(reTrim, "");
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function values(object) {
          return object ? baseValues(object, keys(object)) : [];
        }
        module22.exports = includes;
      }
    });
    var require_lodash2 = __commonJS2({
      "node_modules/lodash.isboolean/index.js"(exports2, module22) {
        var boolTag = "[object Boolean]";
        var objectProto = Object.prototype;
        var objectToString = objectProto.toString;
        function isBoolean(value) {
          return value === true || value === false || isObjectLike(value) && objectToString.call(value) == boolTag;
        }
        function isObjectLike(value) {
          return !!value && typeof value == "object";
        }
        module22.exports = isBoolean;
      }
    });
    var require_lodash3 = __commonJS2({
      "node_modules/lodash.isinteger/index.js"(exports2, module22) {
        var INFINITY = 1 / 0;
        var MAX_INTEGER = 17976931348623157e292;
        var NAN = 0 / 0;
        var symbolTag = "[object Symbol]";
        var reTrim = /^\s+|\s+$/g;
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
        var reIsBinary = /^0b[01]+$/i;
        var reIsOctal = /^0o[0-7]+$/i;
        var freeParseInt = parseInt;
        var objectProto = Object.prototype;
        var objectToString = objectProto.toString;
        function isInteger(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isObject2(value) {
          var type = typeof value;
          return !!value && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return !!value && typeof value == "object";
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result = toFinite(value), remainder = result % 1;
          return result === result ? remainder ? result - remainder : result : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject2(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject2(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = value.replace(reTrim, "");
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        module22.exports = isInteger;
      }
    });
    var require_lodash4 = __commonJS2({
      "node_modules/lodash.isnumber/index.js"(exports2, module22) {
        var numberTag = "[object Number]";
        var objectProto = Object.prototype;
        var objectToString = objectProto.toString;
        function isObjectLike(value) {
          return !!value && typeof value == "object";
        }
        function isNumber(value) {
          return typeof value == "number" || isObjectLike(value) && objectToString.call(value) == numberTag;
        }
        module22.exports = isNumber;
      }
    });
    var require_lodash5 = __commonJS2({
      "node_modules/lodash.isplainobject/index.js"(exports2, module22) {
        var objectTag = "[object Object]";
        function isHostObject(value) {
          var result = false;
          if (value != null && typeof value.toString != "function") {
            try {
              result = !!(value + "");
            } catch (e) {
            }
          }
          return result;
        }
        function overArg(func, transform) {
          return function(arg) {
            return func(transform(arg));
          };
        }
        var funcProto = Function.prototype;
        var objectProto = Object.prototype;
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var objectCtorString = funcToString.call(Object);
        var objectToString = objectProto.toString;
        var getPrototype = overArg(Object.getPrototypeOf, Object);
        function isObjectLike(value) {
          return !!value && typeof value == "object";
        }
        function isPlainObject(value) {
          if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        module22.exports = isPlainObject;
      }
    });
    var require_lodash6 = __commonJS2({
      "node_modules/lodash.isstring/index.js"(exports2, module22) {
        var stringTag = "[object String]";
        var objectProto = Object.prototype;
        var objectToString = objectProto.toString;
        var isArray = Array.isArray;
        function isObjectLike(value) {
          return !!value && typeof value == "object";
        }
        function isString(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag;
        }
        module22.exports = isString;
      }
    });
    var require_lodash7 = __commonJS2({
      "node_modules/lodash.once/index.js"(exports2, module22) {
        var FUNC_ERROR_TEXT = "Expected a function";
        var INFINITY = 1 / 0;
        var MAX_INTEGER = 17976931348623157e292;
        var NAN = 0 / 0;
        var symbolTag = "[object Symbol]";
        var reTrim = /^\s+|\s+$/g;
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
        var reIsBinary = /^0b[01]+$/i;
        var reIsOctal = /^0o[0-7]+$/i;
        var freeParseInt = parseInt;
        var objectProto = Object.prototype;
        var objectToString = objectProto.toString;
        function before(n, func) {
          var result;
          if (typeof func != "function") {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n > 0) {
              result = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = void 0;
            }
            return result;
          };
        }
        function once(func) {
          return before(2, func);
        }
        function isObject2(value) {
          var type = typeof value;
          return !!value && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return !!value && typeof value == "object";
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result = toFinite(value), remainder = result % 1;
          return result === result ? remainder ? result - remainder : result : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject2(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject2(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = value.replace(reTrim, "");
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        module22.exports = once;
      }
    });
    var require_sign = __commonJS2({
      "node_modules/jsonwebtoken/sign.js"(exports2, module22) {
        var timespan = require_timespan();
        var PS_SUPPORTED = require_psSupported();
        var jws = require_jws();
        var includes = require_lodash();
        var isBoolean = require_lodash2();
        var isInteger = require_lodash3();
        var isNumber = require_lodash4();
        var isPlainObject = require_lodash5();
        var isString = require_lodash6();
        var once = require_lodash7();
        var SUPPORTED_ALGS = ["RS256", "RS384", "RS512", "ES256", "ES384", "ES512", "HS256", "HS384", "HS512", "none"];
        if (PS_SUPPORTED) {
          SUPPORTED_ALGS.splice(3, 0, "PS256", "PS384", "PS512");
        }
        var sign_options_schema = {
          expiresIn: { isValid: function(value) {
            return isInteger(value) || isString(value) && value;
          }, message: '"expiresIn" should be a number of seconds or string representing a timespan' },
          notBefore: { isValid: function(value) {
            return isInteger(value) || isString(value) && value;
          }, message: '"notBefore" should be a number of seconds or string representing a timespan' },
          audience: { isValid: function(value) {
            return isString(value) || Array.isArray(value);
          }, message: '"audience" must be a string or array' },
          algorithm: { isValid: includes.bind(null, SUPPORTED_ALGS), message: '"algorithm" must be a valid string enum value' },
          header: { isValid: isPlainObject, message: '"header" must be an object' },
          encoding: { isValid: isString, message: '"encoding" must be a string' },
          issuer: { isValid: isString, message: '"issuer" must be a string' },
          subject: { isValid: isString, message: '"subject" must be a string' },
          jwtid: { isValid: isString, message: '"jwtid" must be a string' },
          noTimestamp: { isValid: isBoolean, message: '"noTimestamp" must be a boolean' },
          keyid: { isValid: isString, message: '"keyid" must be a string' },
          mutatePayload: { isValid: isBoolean, message: '"mutatePayload" must be a boolean' }
        };
        var registered_claims_schema = {
          iat: { isValid: isNumber, message: '"iat" should be a number of seconds' },
          exp: { isValid: isNumber, message: '"exp" should be a number of seconds' },
          nbf: { isValid: isNumber, message: '"nbf" should be a number of seconds' }
        };
        function validate2(schema, allowUnknown, object, parameterName) {
          if (!isPlainObject(object)) {
            throw new Error('Expected "' + parameterName + '" to be a plain object.');
          }
          Object.keys(object).forEach(function(key) {
            var validator = schema[key];
            if (!validator) {
              if (!allowUnknown) {
                throw new Error('"' + key + '" is not allowed in "' + parameterName + '"');
              }
              return;
            }
            if (!validator.isValid(object[key])) {
              throw new Error(validator.message);
            }
          });
        }
        function validateOptions(options) {
          return validate2(sign_options_schema, false, options, "options");
        }
        function validatePayload(payload) {
          return validate2(registered_claims_schema, true, payload, "payload");
        }
        var options_to_payload = {
          "audience": "aud",
          "issuer": "iss",
          "subject": "sub",
          "jwtid": "jti"
        };
        var options_for_objects = [
          "expiresIn",
          "notBefore",
          "noTimestamp",
          "audience",
          "issuer",
          "subject",
          "jwtid"
        ];
        module22.exports = function(payload, secretOrPrivateKey, options, callback) {
          if (typeof options === "function") {
            callback = options;
            options = {};
          } else {
            options = options || {};
          }
          var isObjectPayload = typeof payload === "object" && !Buffer.isBuffer(payload);
          var header = Object.assign({
            alg: options.algorithm || "HS256",
            typ: isObjectPayload ? "JWT" : void 0,
            kid: options.keyid
          }, options.header);
          function failure(err) {
            if (callback) {
              return callback(err);
            }
            throw err;
          }
          if (!secretOrPrivateKey && options.algorithm !== "none") {
            return failure(new Error("secretOrPrivateKey must have a value"));
          }
          if (typeof payload === "undefined") {
            return failure(new Error("payload is required"));
          } else if (isObjectPayload) {
            try {
              validatePayload(payload);
            } catch (error) {
              return failure(error);
            }
            if (!options.mutatePayload) {
              payload = Object.assign({}, payload);
            }
          } else {
            var invalid_options = options_for_objects.filter(function(opt) {
              return typeof options[opt] !== "undefined";
            });
            if (invalid_options.length > 0) {
              return failure(new Error("invalid " + invalid_options.join(",") + " option for " + typeof payload + " payload"));
            }
          }
          if (typeof payload.exp !== "undefined" && typeof options.expiresIn !== "undefined") {
            return failure(new Error('Bad "options.expiresIn" option the payload already has an "exp" property.'));
          }
          if (typeof payload.nbf !== "undefined" && typeof options.notBefore !== "undefined") {
            return failure(new Error('Bad "options.notBefore" option the payload already has an "nbf" property.'));
          }
          try {
            validateOptions(options);
          } catch (error) {
            return failure(error);
          }
          var timestamp = payload.iat || Math.floor(Date.now() / 1e3);
          if (options.noTimestamp) {
            delete payload.iat;
          } else if (isObjectPayload) {
            payload.iat = timestamp;
          }
          if (typeof options.notBefore !== "undefined") {
            try {
              payload.nbf = timespan(options.notBefore, timestamp);
            } catch (err) {
              return failure(err);
            }
            if (typeof payload.nbf === "undefined") {
              return failure(new Error('"notBefore" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
            }
          }
          if (typeof options.expiresIn !== "undefined" && typeof payload === "object") {
            try {
              payload.exp = timespan(options.expiresIn, timestamp);
            } catch (err) {
              return failure(err);
            }
            if (typeof payload.exp === "undefined") {
              return failure(new Error('"expiresIn" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
            }
          }
          Object.keys(options_to_payload).forEach(function(key) {
            var claim = options_to_payload[key];
            if (typeof options[key] !== "undefined") {
              if (typeof payload[claim] !== "undefined") {
                return failure(new Error('Bad "options.' + key + '" option. The payload already has an "' + claim + '" property.'));
              }
              payload[claim] = options[key];
            }
          });
          var encoding = options.encoding || "utf8";
          if (typeof callback === "function") {
            callback = callback && once(callback);
            jws.createSign({
              header,
              privateKey: secretOrPrivateKey,
              payload,
              encoding
            }).once("error", callback).once("done", function(signature) {
              callback(null, signature);
            });
          } else {
            return jws.sign({ header, payload, secret: secretOrPrivateKey, encoding });
          }
        };
      }
    });
    var require_jsonwebtoken = __commonJS2({
      "node_modules/jsonwebtoken/index.js"(exports2, module22) {
        module22.exports = {
          decode: require_decode(),
          verify: require_verify(),
          sign: require_sign(),
          JsonWebTokenError: require_JsonWebTokenError(),
          NotBeforeError: require_NotBeforeError(),
          TokenExpiredError: require_TokenExpiredError()
        };
      }
    });
    var require_dist_node18 = __commonJS2({
      "node_modules/universal-github-app-jwt/dist-node/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        function _interopDefault(ex) {
          return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
        }
        var jsonwebtoken = _interopDefault(require_jsonwebtoken());
        async function getToken22({
          privateKey,
          payload
        }) {
          return jsonwebtoken.sign(payload, privateKey, {
            algorithm: "RS256"
          });
        }
        async function githubAppJwt({
          id,
          privateKey,
          now = Math.floor(Date.now() / 1e3)
        }) {
          const nowWithSafetyMargin = now - 30;
          const expiration = nowWithSafetyMargin + 60 * 10;
          const payload = {
            iat: nowWithSafetyMargin,
            exp: expiration,
            iss: id
          };
          const token = await getToken22({
            privateKey,
            payload
          });
          return {
            appId: id,
            expiration,
            token
          };
        }
        exports2.githubAppJwt = githubAppJwt;
      }
    });
    var require_iterator = __commonJS2({
      "node_modules/lru-cache/node_modules/yallist/iterator.js"(exports2, module22) {
        "use strict";
        module22.exports = function(Yallist) {
          Yallist.prototype[Symbol.iterator] = function* () {
            for (let walker = this.head; walker; walker = walker.next) {
              yield walker.value;
            }
          };
        };
      }
    });
    var require_yallist = __commonJS2({
      "node_modules/lru-cache/node_modules/yallist/yallist.js"(exports2, module22) {
        "use strict";
        module22.exports = Yallist;
        Yallist.Node = Node;
        Yallist.create = Yallist;
        function Yallist(list) {
          var self = this;
          if (!(self instanceof Yallist)) {
            self = new Yallist();
          }
          self.tail = null;
          self.head = null;
          self.length = 0;
          if (list && typeof list.forEach === "function") {
            list.forEach(function(item) {
              self.push(item);
            });
          } else if (arguments.length > 0) {
            for (var i = 0, l = arguments.length; i < l; i++) {
              self.push(arguments[i]);
            }
          }
          return self;
        }
        Yallist.prototype.removeNode = function(node) {
          if (node.list !== this) {
            throw new Error("removing node which does not belong to this list");
          }
          var next = node.next;
          var prev = node.prev;
          if (next) {
            next.prev = prev;
          }
          if (prev) {
            prev.next = next;
          }
          if (node === this.head) {
            this.head = next;
          }
          if (node === this.tail) {
            this.tail = prev;
          }
          node.list.length--;
          node.next = null;
          node.prev = null;
          node.list = null;
          return next;
        };
        Yallist.prototype.unshiftNode = function(node) {
          if (node === this.head) {
            return;
          }
          if (node.list) {
            node.list.removeNode(node);
          }
          var head = this.head;
          node.list = this;
          node.next = head;
          if (head) {
            head.prev = node;
          }
          this.head = node;
          if (!this.tail) {
            this.tail = node;
          }
          this.length++;
        };
        Yallist.prototype.pushNode = function(node) {
          if (node === this.tail) {
            return;
          }
          if (node.list) {
            node.list.removeNode(node);
          }
          var tail = this.tail;
          node.list = this;
          node.prev = tail;
          if (tail) {
            tail.next = node;
          }
          this.tail = node;
          if (!this.head) {
            this.head = node;
          }
          this.length++;
        };
        Yallist.prototype.push = function() {
          for (var i = 0, l = arguments.length; i < l; i++) {
            push(this, arguments[i]);
          }
          return this.length;
        };
        Yallist.prototype.unshift = function() {
          for (var i = 0, l = arguments.length; i < l; i++) {
            unshift(this, arguments[i]);
          }
          return this.length;
        };
        Yallist.prototype.pop = function() {
          if (!this.tail) {
            return void 0;
          }
          var res = this.tail.value;
          this.tail = this.tail.prev;
          if (this.tail) {
            this.tail.next = null;
          } else {
            this.head = null;
          }
          this.length--;
          return res;
        };
        Yallist.prototype.shift = function() {
          if (!this.head) {
            return void 0;
          }
          var res = this.head.value;
          this.head = this.head.next;
          if (this.head) {
            this.head.prev = null;
          } else {
            this.tail = null;
          }
          this.length--;
          return res;
        };
        Yallist.prototype.forEach = function(fn, thisp) {
          thisp = thisp || this;
          for (var walker = this.head, i = 0; walker !== null; i++) {
            fn.call(thisp, walker.value, i, this);
            walker = walker.next;
          }
        };
        Yallist.prototype.forEachReverse = function(fn, thisp) {
          thisp = thisp || this;
          for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
            fn.call(thisp, walker.value, i, this);
            walker = walker.prev;
          }
        };
        Yallist.prototype.get = function(n) {
          for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
            walker = walker.next;
          }
          if (i === n && walker !== null) {
            return walker.value;
          }
        };
        Yallist.prototype.getReverse = function(n) {
          for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
            walker = walker.prev;
          }
          if (i === n && walker !== null) {
            return walker.value;
          }
        };
        Yallist.prototype.map = function(fn, thisp) {
          thisp = thisp || this;
          var res = new Yallist();
          for (var walker = this.head; walker !== null; ) {
            res.push(fn.call(thisp, walker.value, this));
            walker = walker.next;
          }
          return res;
        };
        Yallist.prototype.mapReverse = function(fn, thisp) {
          thisp = thisp || this;
          var res = new Yallist();
          for (var walker = this.tail; walker !== null; ) {
            res.push(fn.call(thisp, walker.value, this));
            walker = walker.prev;
          }
          return res;
        };
        Yallist.prototype.reduce = function(fn, initial) {
          var acc;
          var walker = this.head;
          if (arguments.length > 1) {
            acc = initial;
          } else if (this.head) {
            walker = this.head.next;
            acc = this.head.value;
          } else {
            throw new TypeError("Reduce of empty list with no initial value");
          }
          for (var i = 0; walker !== null; i++) {
            acc = fn(acc, walker.value, i);
            walker = walker.next;
          }
          return acc;
        };
        Yallist.prototype.reduceReverse = function(fn, initial) {
          var acc;
          var walker = this.tail;
          if (arguments.length > 1) {
            acc = initial;
          } else if (this.tail) {
            walker = this.tail.prev;
            acc = this.tail.value;
          } else {
            throw new TypeError("Reduce of empty list with no initial value");
          }
          for (var i = this.length - 1; walker !== null; i--) {
            acc = fn(acc, walker.value, i);
            walker = walker.prev;
          }
          return acc;
        };
        Yallist.prototype.toArray = function() {
          var arr = new Array(this.length);
          for (var i = 0, walker = this.head; walker !== null; i++) {
            arr[i] = walker.value;
            walker = walker.next;
          }
          return arr;
        };
        Yallist.prototype.toArrayReverse = function() {
          var arr = new Array(this.length);
          for (var i = 0, walker = this.tail; walker !== null; i++) {
            arr[i] = walker.value;
            walker = walker.prev;
          }
          return arr;
        };
        Yallist.prototype.slice = function(from, to) {
          to = to || this.length;
          if (to < 0) {
            to += this.length;
          }
          from = from || 0;
          if (from < 0) {
            from += this.length;
          }
          var ret = new Yallist();
          if (to < from || to < 0) {
            return ret;
          }
          if (from < 0) {
            from = 0;
          }
          if (to > this.length) {
            to = this.length;
          }
          for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
            walker = walker.next;
          }
          for (; walker !== null && i < to; i++, walker = walker.next) {
            ret.push(walker.value);
          }
          return ret;
        };
        Yallist.prototype.sliceReverse = function(from, to) {
          to = to || this.length;
          if (to < 0) {
            to += this.length;
          }
          from = from || 0;
          if (from < 0) {
            from += this.length;
          }
          var ret = new Yallist();
          if (to < from || to < 0) {
            return ret;
          }
          if (from < 0) {
            from = 0;
          }
          if (to > this.length) {
            to = this.length;
          }
          for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
            walker = walker.prev;
          }
          for (; walker !== null && i > from; i--, walker = walker.prev) {
            ret.push(walker.value);
          }
          return ret;
        };
        Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
          if (start > this.length) {
            start = this.length - 1;
          }
          if (start < 0) {
            start = this.length + start;
          }
          for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
            walker = walker.next;
          }
          var ret = [];
          for (var i = 0; walker && i < deleteCount; i++) {
            ret.push(walker.value);
            walker = this.removeNode(walker);
          }
          if (walker === null) {
            walker = this.tail;
          }
          if (walker !== this.head && walker !== this.tail) {
            walker = walker.prev;
          }
          for (var i = 0; i < nodes.length; i++) {
            walker = insert(this, walker, nodes[i]);
          }
          return ret;
        };
        Yallist.prototype.reverse = function() {
          var head = this.head;
          var tail = this.tail;
          for (var walker = head; walker !== null; walker = walker.prev) {
            var p = walker.prev;
            walker.prev = walker.next;
            walker.next = p;
          }
          this.head = tail;
          this.tail = head;
          return this;
        };
        function insert(self, node, value) {
          var inserted = node === self.head ? new Node(value, null, node, self) : new Node(value, node, node.next, self);
          if (inserted.next === null) {
            self.tail = inserted;
          }
          if (inserted.prev === null) {
            self.head = inserted;
          }
          self.length++;
          return inserted;
        }
        function push(self, item) {
          self.tail = new Node(item, self.tail, null, self);
          if (!self.head) {
            self.head = self.tail;
          }
          self.length++;
        }
        function unshift(self, item) {
          self.head = new Node(item, null, self.head, self);
          if (!self.tail) {
            self.tail = self.head;
          }
          self.length++;
        }
        function Node(value, prev, next, list) {
          if (!(this instanceof Node)) {
            return new Node(value, prev, next, list);
          }
          this.list = list;
          this.value = value;
          if (prev) {
            prev.next = this;
            this.prev = prev;
          } else {
            this.prev = null;
          }
          if (next) {
            next.prev = this;
            this.next = next;
          } else {
            this.next = null;
          }
        }
        try {
          require_iterator()(Yallist);
        } catch (er) {
        }
      }
    });
    var require_lru_cache = __commonJS2({
      "node_modules/lru-cache/index.js"(exports2, module22) {
        "use strict";
        var Yallist = require_yallist();
        var MAX = Symbol("max");
        var LENGTH = Symbol("length");
        var LENGTH_CALCULATOR = Symbol("lengthCalculator");
        var ALLOW_STALE = Symbol("allowStale");
        var MAX_AGE = Symbol("maxAge");
        var DISPOSE = Symbol("dispose");
        var NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
        var LRU_LIST = Symbol("lruList");
        var CACHE = Symbol("cache");
        var UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
        var naiveLength = () => 1;
        var LRUCache = class {
          constructor(options) {
            if (typeof options === "number")
              options = { max: options };
            if (!options)
              options = {};
            if (options.max && (typeof options.max !== "number" || options.max < 0))
              throw new TypeError("max must be a non-negative number");
            const max = this[MAX] = options.max || Infinity;
            const lc = options.length || naiveLength;
            this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
            this[ALLOW_STALE] = options.stale || false;
            if (options.maxAge && typeof options.maxAge !== "number")
              throw new TypeError("maxAge must be a number");
            this[MAX_AGE] = options.maxAge || 0;
            this[DISPOSE] = options.dispose;
            this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
            this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
            this.reset();
          }
          set max(mL) {
            if (typeof mL !== "number" || mL < 0)
              throw new TypeError("max must be a non-negative number");
            this[MAX] = mL || Infinity;
            trim(this);
          }
          get max() {
            return this[MAX];
          }
          set allowStale(allowStale) {
            this[ALLOW_STALE] = !!allowStale;
          }
          get allowStale() {
            return this[ALLOW_STALE];
          }
          set maxAge(mA) {
            if (typeof mA !== "number")
              throw new TypeError("maxAge must be a non-negative number");
            this[MAX_AGE] = mA;
            trim(this);
          }
          get maxAge() {
            return this[MAX_AGE];
          }
          set lengthCalculator(lC) {
            if (typeof lC !== "function")
              lC = naiveLength;
            if (lC !== this[LENGTH_CALCULATOR]) {
              this[LENGTH_CALCULATOR] = lC;
              this[LENGTH] = 0;
              this[LRU_LIST].forEach((hit) => {
                hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
                this[LENGTH] += hit.length;
              });
            }
            trim(this);
          }
          get lengthCalculator() {
            return this[LENGTH_CALCULATOR];
          }
          get length() {
            return this[LENGTH];
          }
          get itemCount() {
            return this[LRU_LIST].length;
          }
          rforEach(fn, thisp) {
            thisp = thisp || this;
            for (let walker = this[LRU_LIST].tail; walker !== null; ) {
              const prev = walker.prev;
              forEachStep(this, fn, walker, thisp);
              walker = prev;
            }
          }
          forEach(fn, thisp) {
            thisp = thisp || this;
            for (let walker = this[LRU_LIST].head; walker !== null; ) {
              const next = walker.next;
              forEachStep(this, fn, walker, thisp);
              walker = next;
            }
          }
          keys() {
            return this[LRU_LIST].toArray().map((k) => k.key);
          }
          values() {
            return this[LRU_LIST].toArray().map((k) => k.value);
          }
          reset() {
            if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
              this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value));
            }
            this[CACHE] = /* @__PURE__ */ new Map();
            this[LRU_LIST] = new Yallist();
            this[LENGTH] = 0;
          }
          dump() {
            return this[LRU_LIST].map((hit) => isStale(this, hit) ? false : {
              k: hit.key,
              v: hit.value,
              e: hit.now + (hit.maxAge || 0)
            }).toArray().filter((h) => h);
          }
          dumpLru() {
            return this[LRU_LIST];
          }
          set(key, value, maxAge) {
            maxAge = maxAge || this[MAX_AGE];
            if (maxAge && typeof maxAge !== "number")
              throw new TypeError("maxAge must be a number");
            const now = maxAge ? Date.now() : 0;
            const len = this[LENGTH_CALCULATOR](value, key);
            if (this[CACHE].has(key)) {
              if (len > this[MAX]) {
                del(this, this[CACHE].get(key));
                return false;
              }
              const node = this[CACHE].get(key);
              const item = node.value;
              if (this[DISPOSE]) {
                if (!this[NO_DISPOSE_ON_SET])
                  this[DISPOSE](key, item.value);
              }
              item.now = now;
              item.maxAge = maxAge;
              item.value = value;
              this[LENGTH] += len - item.length;
              item.length = len;
              this.get(key);
              trim(this);
              return true;
            }
            const hit = new Entry(key, value, len, now, maxAge);
            if (hit.length > this[MAX]) {
              if (this[DISPOSE])
                this[DISPOSE](key, value);
              return false;
            }
            this[LENGTH] += hit.length;
            this[LRU_LIST].unshift(hit);
            this[CACHE].set(key, this[LRU_LIST].head);
            trim(this);
            return true;
          }
          has(key) {
            if (!this[CACHE].has(key))
              return false;
            const hit = this[CACHE].get(key).value;
            return !isStale(this, hit);
          }
          get(key) {
            return get(this, key, true);
          }
          peek(key) {
            return get(this, key, false);
          }
          pop() {
            const node = this[LRU_LIST].tail;
            if (!node)
              return null;
            del(this, node);
            return node.value;
          }
          del(key) {
            del(this, this[CACHE].get(key));
          }
          load(arr) {
            this.reset();
            const now = Date.now();
            for (let l = arr.length - 1; l >= 0; l--) {
              const hit = arr[l];
              const expiresAt = hit.e || 0;
              if (expiresAt === 0)
                this.set(hit.k, hit.v);
              else {
                const maxAge = expiresAt - now;
                if (maxAge > 0) {
                  this.set(hit.k, hit.v, maxAge);
                }
              }
            }
          }
          prune() {
            this[CACHE].forEach((value, key) => get(this, key, false));
          }
        };
        var get = (self, key, doUse) => {
          const node = self[CACHE].get(key);
          if (node) {
            const hit = node.value;
            if (isStale(self, hit)) {
              del(self, node);
              if (!self[ALLOW_STALE])
                return void 0;
            } else {
              if (doUse) {
                if (self[UPDATE_AGE_ON_GET])
                  node.value.now = Date.now();
                self[LRU_LIST].unshiftNode(node);
              }
            }
            return hit.value;
          }
        };
        var isStale = (self, hit) => {
          if (!hit || !hit.maxAge && !self[MAX_AGE])
            return false;
          const diff = Date.now() - hit.now;
          return hit.maxAge ? diff > hit.maxAge : self[MAX_AGE] && diff > self[MAX_AGE];
        };
        var trim = (self) => {
          if (self[LENGTH] > self[MAX]) {
            for (let walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && walker !== null; ) {
              const prev = walker.prev;
              del(self, walker);
              walker = prev;
            }
          }
        };
        var del = (self, node) => {
          if (node) {
            const hit = node.value;
            if (self[DISPOSE])
              self[DISPOSE](hit.key, hit.value);
            self[LENGTH] -= hit.length;
            self[CACHE].delete(hit.key);
            self[LRU_LIST].removeNode(node);
          }
        };
        var Entry = class {
          constructor(key, value, length, now, maxAge) {
            this.key = key;
            this.value = value;
            this.length = length;
            this.now = now;
            this.maxAge = maxAge || 0;
          }
        };
        var forEachStep = (self, fn, node, thisp) => {
          let hit = node.value;
          if (isStale(self, hit)) {
            del(self, node);
            if (!self[ALLOW_STALE])
              hit = void 0;
          }
          if (hit)
            fn.call(thisp, hit.value, hit.key, self);
        };
        module22.exports = LRUCache;
      }
    });
    var require_dist_node19 = __commonJS2({
      "node_modules/@octokit/auth-app/dist-node/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        function _interopDefault(ex) {
          return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
        }
        var universalUserAgent = require_dist_node();
        var request = require_dist_node5();
        var authOauthApp = require_dist_node17();
        var deprecation = require_dist_node3();
        var universalGithubAppJwt = require_dist_node18();
        var LRU = _interopDefault(require_lru_cache());
        var authOauthUser = require_dist_node16();
        function ownKeys(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly) {
              symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            }
            keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread2(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            if (i % 2) {
              ownKeys(Object(source), true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function _objectWithoutPropertiesLoose(source, excluded) {
          if (source == null)
            return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;
          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            target[key] = source[key];
          }
          return target;
        }
        function _objectWithoutProperties(source, excluded) {
          if (source == null)
            return {};
          var target = _objectWithoutPropertiesLoose(source, excluded);
          var key, i;
          if (Object.getOwnPropertySymbols) {
            var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
            for (i = 0; i < sourceSymbolKeys.length; i++) {
              key = sourceSymbolKeys[i];
              if (excluded.indexOf(key) >= 0)
                continue;
              if (!Object.prototype.propertyIsEnumerable.call(source, key))
                continue;
              target[key] = source[key];
            }
          }
          return target;
        }
        async function getAppAuthentication({
          appId,
          privateKey,
          timeDifference
        }) {
          try {
            const appAuthentication = await universalGithubAppJwt.githubAppJwt({
              id: +appId,
              privateKey,
              now: timeDifference && Math.floor(Date.now() / 1e3) + timeDifference
            });
            return {
              type: "app",
              token: appAuthentication.token,
              appId: appAuthentication.appId,
              expiresAt: new Date(appAuthentication.expiration * 1e3).toISOString()
            };
          } catch (error) {
            if (privateKey === "-----BEGIN RSA PRIVATE KEY-----") {
              throw new Error("The 'privateKey` option contains only the first line '-----BEGIN RSA PRIVATE KEY-----'. If you are setting it using a `.env` file, make sure it is set on a single line with newlines replaced by '\n'");
            } else {
              throw error;
            }
          }
        }
        function getCache() {
          return new LRU({
            max: 15e3,
            maxAge: 1e3 * 60 * 59
          });
        }
        async function get(cache, options) {
          const cacheKey = optionsToCacheKey(options);
          const result = await cache.get(cacheKey);
          if (!result) {
            return;
          }
          const [token, createdAt, expiresAt, repositorySelection, permissionsString, singleFileName] = result.split("|");
          const permissions = options.permissions || permissionsString.split(/,/).reduce((permissions2, string) => {
            if (/!$/.test(string)) {
              permissions2[string.slice(0, -1)] = "write";
            } else {
              permissions2[string] = "read";
            }
            return permissions2;
          }, {});
          return {
            token,
            createdAt,
            expiresAt,
            permissions,
            repositoryIds: options.repositoryIds,
            repositoryNames: options.repositoryNames,
            singleFileName,
            repositorySelection
          };
        }
        async function set(cache, options, data) {
          const key = optionsToCacheKey(options);
          const permissionsString = options.permissions ? "" : Object.keys(data.permissions).map((name2) => `${name2}${data.permissions[name2] === "write" ? "!" : ""}`).join(",");
          const value = [data.token, data.createdAt, data.expiresAt, data.repositorySelection, permissionsString, data.singleFileName].join("|");
          await cache.set(key, value);
        }
        function optionsToCacheKey({
          installationId,
          permissions = {},
          repositoryIds = [],
          repositoryNames = []
        }) {
          const permissionsString = Object.keys(permissions).sort().map((name2) => permissions[name2] === "read" ? name2 : `${name2}!`).join(",");
          const repositoryIdsString = repositoryIds.sort().join(",");
          const repositoryNamesString = repositoryNames.join(",");
          return [installationId, repositoryIdsString, repositoryNamesString, permissionsString].filter(Boolean).join("|");
        }
        function toTokenAuthentication({
          installationId,
          token,
          createdAt,
          expiresAt,
          repositorySelection,
          permissions,
          repositoryIds,
          repositoryNames,
          singleFileName
        }) {
          return Object.assign({
            type: "token",
            tokenType: "installation",
            token,
            installationId,
            permissions,
            createdAt,
            expiresAt,
            repositorySelection
          }, repositoryIds ? {
            repositoryIds
          } : null, repositoryNames ? {
            repositoryNames
          } : null, singleFileName ? {
            singleFileName
          } : null);
        }
        var _excluded = ["type", "factory", "oauthApp"];
        async function getInstallationAuthentication(state, options, customRequest) {
          const installationId = Number(options.installationId || state.installationId);
          if (!installationId) {
            throw new Error("[@octokit/auth-app] installationId option is required for installation authentication.");
          }
          if (options.factory) {
            const _state$options = _objectSpread2(_objectSpread2({}, state), options), {
              type,
              factory,
              oauthApp
            } = _state$options, factoryAuthOptions = _objectWithoutProperties(_state$options, _excluded);
            return factory(factoryAuthOptions);
          }
          const optionsWithInstallationTokenFromState = Object.assign({
            installationId
          }, options);
          if (!options.refresh) {
            const result = await get(state.cache, optionsWithInstallationTokenFromState);
            if (result) {
              const {
                token: token2,
                createdAt: createdAt2,
                expiresAt: expiresAt2,
                permissions: permissions2,
                repositoryIds: repositoryIds2,
                repositoryNames: repositoryNames2,
                singleFileName: singleFileName2,
                repositorySelection: repositorySelection2
              } = result;
              return toTokenAuthentication({
                installationId,
                token: token2,
                createdAt: createdAt2,
                expiresAt: expiresAt2,
                permissions: permissions2,
                repositorySelection: repositorySelection2,
                repositoryIds: repositoryIds2,
                repositoryNames: repositoryNames2,
                singleFileName: singleFileName2
              });
            }
          }
          const appAuthentication = await getAppAuthentication(state);
          const request2 = customRequest || state.request;
          const {
            data: {
              token,
              expires_at: expiresAt,
              repositories,
              permissions: permissionsOptional,
              repository_selection: repositorySelectionOptional,
              single_file: singleFileName
            }
          } = await request2("POST /app/installations/{installation_id}/access_tokens", {
            installation_id: installationId,
            repository_ids: options.repositoryIds,
            repositories: options.repositoryNames,
            permissions: options.permissions,
            mediaType: {
              previews: ["machine-man"]
            },
            headers: {
              authorization: `bearer ${appAuthentication.token}`
            }
          });
          const permissions = permissionsOptional || {};
          const repositorySelection = repositorySelectionOptional || "all";
          const repositoryIds = repositories ? repositories.map((r) => r.id) : void 0;
          const repositoryNames = repositories ? repositories.map((repo) => repo.name) : void 0;
          const createdAt = new Date().toISOString();
          await set(state.cache, optionsWithInstallationTokenFromState, {
            token,
            createdAt,
            expiresAt,
            repositorySelection,
            permissions,
            repositoryIds,
            repositoryNames,
            singleFileName
          });
          return toTokenAuthentication({
            installationId,
            token,
            createdAt,
            expiresAt,
            repositorySelection,
            permissions,
            repositoryIds,
            repositoryNames,
            singleFileName
          });
        }
        async function auth(state, authOptions) {
          switch (authOptions.type) {
            case "app":
              return getAppAuthentication(state);
            case "oauth":
              state.log.warn(new deprecation.Deprecation(`[@octokit/auth-app] {type: "oauth"} is deprecated. Use {type: "oauth-app"} instead`));
            case "oauth-app":
              return state.oauthApp({
                type: "oauth-app"
              });
            case "installation":
              return getInstallationAuthentication(state, _objectSpread2(_objectSpread2({}, authOptions), {}, {
                type: "installation"
              }));
            case "oauth-user":
              return state.oauthApp(authOptions);
            default:
              throw new Error(`Invalid auth type: ${authOptions.type}`);
          }
        }
        var PATHS = ["/app", "/app/hook/config", "/app/hook/deliveries", "/app/hook/deliveries/{delivery_id}", "/app/hook/deliveries/{delivery_id}/attempts", "/app/installations", "/app/installations/{installation_id}", "/app/installations/{installation_id}/access_tokens", "/app/installations/{installation_id}/suspended", "/marketplace_listing/accounts/{account_id}", "/marketplace_listing/plan", "/marketplace_listing/plans", "/marketplace_listing/plans/{plan_id}/accounts", "/marketplace_listing/stubbed/accounts/{account_id}", "/marketplace_listing/stubbed/plan", "/marketplace_listing/stubbed/plans", "/marketplace_listing/stubbed/plans/{plan_id}/accounts", "/orgs/{org}/installation", "/repos/{owner}/{repo}/installation", "/users/{username}/installation"];
        function routeMatcher(paths) {
          const regexes = paths.map((p) => p.split("/").map((c) => c.startsWith("{") ? "(?:.+?)" : c).join("/"));
          const regex = `^(?:${regexes.map((r) => `(?:${r})`).join("|")})[^/]*$`;
          return new RegExp(regex, "i");
        }
        var REGEX = routeMatcher(PATHS);
        function requiresAppAuth(url) {
          return !!url && REGEX.test(url);
        }
        var FIVE_SECONDS_IN_MS = 5 * 1e3;
        function isNotTimeSkewError(error) {
          return !(error.message.match(/'Expiration time' claim \('exp'\) must be a numeric value representing the future time at which the assertion expires/) || error.message.match(/'Issued at' claim \('iat'\) must be an Integer representing the time that the assertion was issued/));
        }
        async function hook(state, request2, route, parameters) {
          const endpoint = request2.endpoint.merge(route, parameters);
          const url = endpoint.url;
          if (/\/login\/oauth\/access_token$/.test(url)) {
            return request2(endpoint);
          }
          if (requiresAppAuth(url.replace(request2.endpoint.DEFAULTS.baseUrl, ""))) {
            const {
              token: token2
            } = await getAppAuthentication(state);
            endpoint.headers.authorization = `bearer ${token2}`;
            let response;
            try {
              response = await request2(endpoint);
            } catch (error) {
              if (isNotTimeSkewError(error)) {
                throw error;
              }
              if (typeof error.response.headers.date === "undefined") {
                throw error;
              }
              const diff = Math.floor((Date.parse(error.response.headers.date) - Date.parse(new Date().toString())) / 1e3);
              state.log.warn(error.message);
              state.log.warn(`[@octokit/auth-app] GitHub API time and system time are different by ${diff} seconds. Retrying request with the difference accounted for.`);
              const {
                token: token3
              } = await getAppAuthentication(_objectSpread2(_objectSpread2({}, state), {}, {
                timeDifference: diff
              }));
              endpoint.headers.authorization = `bearer ${token3}`;
              return request2(endpoint);
            }
            return response;
          }
          if (authOauthUser.requiresBasicAuth(url)) {
            const authentication = await state.oauthApp({
              type: "oauth-app"
            });
            endpoint.headers.authorization = authentication.headers.authorization;
            return request2(endpoint);
          }
          const {
            token,
            createdAt
          } = await getInstallationAuthentication(state, {}, request2);
          endpoint.headers.authorization = `token ${token}`;
          return sendRequestWithRetries(state, request2, endpoint, createdAt);
        }
        async function sendRequestWithRetries(state, request2, options, createdAt, retries = 0) {
          const timeSinceTokenCreationInMs = +new Date() - +new Date(createdAt);
          try {
            return await request2(options);
          } catch (error) {
            if (error.status !== 401) {
              throw error;
            }
            if (timeSinceTokenCreationInMs >= FIVE_SECONDS_IN_MS) {
              if (retries > 0) {
                error.message = `After ${retries} retries within ${timeSinceTokenCreationInMs / 1e3}s of creating the installation access token, the response remains 401. At this point, the cause may be an authentication problem or a system outage. Please check https://www.githubstatus.com for status information`;
              }
              throw error;
            }
            ++retries;
            const awaitTime = retries * 1e3;
            state.log.warn(`[@octokit/auth-app] Retrying after 401 response to account for token replication delay (retry: ${retries}, wait: ${awaitTime / 1e3}s)`);
            await new Promise((resolve) => setTimeout(resolve, awaitTime));
            return sendRequestWithRetries(state, request2, options, createdAt, retries);
          }
        }
        var VERSION = "3.6.1";
        function createAppAuth2(options) {
          if (!options.appId) {
            throw new Error("[@octokit/auth-app] appId option is required");
          }
          if (!options.privateKey) {
            throw new Error("[@octokit/auth-app] privateKey option is required");
          }
          if ("installationId" in options && !options.installationId) {
            throw new Error("[@octokit/auth-app] installationId is set to a falsy value");
          }
          const log = Object.assign({
            warn: console.warn.bind(console)
          }, options.log);
          const request$1 = options.request || request.request.defaults({
            headers: {
              "user-agent": `octokit-auth-app.js/${VERSION} ${universalUserAgent.getUserAgent()}`
            }
          });
          const state = Object.assign({
            request: request$1,
            cache: getCache()
          }, options, options.installationId ? {
            installationId: Number(options.installationId)
          } : {}, {
            log,
            oauthApp: authOauthApp.createOAuthAppAuth({
              clientType: "github-app",
              clientId: options.clientId || "",
              clientSecret: options.clientSecret || "",
              request: request$1
            })
          });
          return Object.assign(auth.bind(null, state), {
            hook: hook.bind(null, state)
          });
        }
        Object.defineProperty(exports2, "createOAuthUserAuth", {
          enumerable: true,
          get: function() {
            return authOauthUser.createOAuthUserAuth;
          }
        });
        exports2.createAppAuth = createAppAuth2;
      }
    });
    var require_utils22 = __commonJS2({
      "node_modules/node-rsa/src/utils.js"(exports2, module22) {
        var crypt = require("crypto");
        module22.exports.linebrk = function(str, maxLen) {
          var res = "";
          var i = 0;
          while (i + maxLen < str.length) {
            res += str.substring(i, i + maxLen) + "\n";
            i += maxLen;
          }
          return res + str.substring(i, str.length);
        };
        module22.exports.detectEnvironment = function() {
          if (typeof window !== "undefined" && window && !(process && process.title === "node")) {
            return "browser";
          }
          return "node";
        };
        module22.exports.get32IntFromBuffer = function(buffer, offset) {
          offset = offset || 0;
          var size = 0;
          if ((size = buffer.length - offset) > 0) {
            if (size >= 4) {
              return buffer.readUIntBE(offset, size);
            } else {
              var res = 0;
              for (var i = offset + size, d = 0; i > offset; i--, d += 2) {
                res += buffer[i - 1] * Math.pow(16, d);
              }
              return res;
            }
          } else {
            return NaN;
          }
        };
        module22.exports._ = {
          isObject: function(value) {
            var type = typeof value;
            return !!value && (type == "object" || type == "function");
          },
          isString: function(value) {
            return typeof value == "string" || value instanceof String;
          },
          isNumber: function(value) {
            return typeof value == "number" || !isNaN(parseFloat(value)) && isFinite(value);
          },
          omit: function(obj, removeProp) {
            var newObj = {};
            for (var prop in obj) {
              if (!obj.hasOwnProperty(prop) || prop === removeProp) {
                continue;
              }
              newObj[prop] = obj[prop];
            }
            return newObj;
          }
        };
        module22.exports.trimSurroundingText = function(data, opening, closing) {
          var trimStartIndex = 0;
          var trimEndIndex = data.length;
          var openingBoundaryIndex = data.indexOf(opening);
          if (openingBoundaryIndex >= 0) {
            trimStartIndex = openingBoundaryIndex + opening.length;
          }
          var closingBoundaryIndex = data.indexOf(closing, openingBoundaryIndex);
          if (closingBoundaryIndex >= 0) {
            trimEndIndex = closingBoundaryIndex;
          }
          return data.substring(trimStartIndex, trimEndIndex);
        };
      }
    });
    var require_jsbn = __commonJS2({
      "node_modules/node-rsa/src/libs/jsbn.js"(exports2, module22) {
        var crypt = require("crypto");
        var _ = require_utils22()._;
        var dbits;
        var canary = 244837814094590;
        var j_lm = (canary & 16777215) == 15715070;
        function BigInteger(a, b) {
          if (a != null) {
            if (typeof a == "number") {
              this.fromNumber(a, b);
            } else if (Buffer.isBuffer(a)) {
              this.fromBuffer(a);
            } else if (b == null && typeof a != "string") {
              this.fromByteArray(a);
            } else {
              this.fromString(a, b);
            }
          }
        }
        function nbi() {
          return new BigInteger(null);
        }
        function am3(i, x, w, j, c, n) {
          var xl = x & 16383, xh = x >> 14;
          while (--n >= 0) {
            var l = this[i] & 16383;
            var h = this[i++] >> 14;
            var m = xh * l + h * xl;
            l = xl * l + ((m & 16383) << 14) + w[j] + c;
            c = (l >> 28) + (m >> 14) + xh * h;
            w[j++] = l & 268435455;
          }
          return c;
        }
        BigInteger.prototype.am = am3;
        dbits = 28;
        BigInteger.prototype.DB = dbits;
        BigInteger.prototype.DM = (1 << dbits) - 1;
        BigInteger.prototype.DV = 1 << dbits;
        var BI_FP = 52;
        BigInteger.prototype.FV = Math.pow(2, BI_FP);
        BigInteger.prototype.F1 = BI_FP - dbits;
        BigInteger.prototype.F2 = 2 * dbits - BI_FP;
        var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
        var BI_RC = new Array();
        var rr;
        var vv;
        rr = "0".charCodeAt(0);
        for (vv = 0; vv <= 9; ++vv)
          BI_RC[rr++] = vv;
        rr = "a".charCodeAt(0);
        for (vv = 10; vv < 36; ++vv)
          BI_RC[rr++] = vv;
        rr = "A".charCodeAt(0);
        for (vv = 10; vv < 36; ++vv)
          BI_RC[rr++] = vv;
        function int2char(n) {
          return BI_RM.charAt(n);
        }
        function intAt(s, i) {
          var c = BI_RC[s.charCodeAt(i)];
          return c == null ? -1 : c;
        }
        function bnpCopyTo(r) {
          for (var i = this.t - 1; i >= 0; --i)
            r[i] = this[i];
          r.t = this.t;
          r.s = this.s;
        }
        function bnpFromInt(x) {
          this.t = 1;
          this.s = x < 0 ? -1 : 0;
          if (x > 0)
            this[0] = x;
          else if (x < -1)
            this[0] = x + DV;
          else
            this.t = 0;
        }
        function nbv(i) {
          var r = nbi();
          r.fromInt(i);
          return r;
        }
        function bnpFromString(data, radix, unsigned) {
          var k;
          switch (radix) {
            case 2:
              k = 1;
              break;
            case 4:
              k = 2;
              break;
            case 8:
              k = 3;
              break;
            case 16:
              k = 4;
              break;
            case 32:
              k = 5;
              break;
            case 256:
              k = 8;
              break;
            default:
              this.fromRadix(data, radix);
              return;
          }
          this.t = 0;
          this.s = 0;
          var i = data.length;
          var mi = false;
          var sh = 0;
          while (--i >= 0) {
            var x = k == 8 ? data[i] & 255 : intAt(data, i);
            if (x < 0) {
              if (data.charAt(i) == "-")
                mi = true;
              continue;
            }
            mi = false;
            if (sh === 0)
              this[this.t++] = x;
            else if (sh + k > this.DB) {
              this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
              this[this.t++] = x >> this.DB - sh;
            } else
              this[this.t - 1] |= x << sh;
            sh += k;
            if (sh >= this.DB)
              sh -= this.DB;
          }
          if (!unsigned && k == 8 && (data[0] & 128) != 0) {
            this.s = -1;
            if (sh > 0)
              this[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;
          }
          this.clamp();
          if (mi)
            BigInteger.ZERO.subTo(this, this);
        }
        function bnpFromByteArray(a, unsigned) {
          this.fromString(a, 256, unsigned);
        }
        function bnpFromBuffer(a) {
          this.fromString(a, 256, true);
        }
        function bnpClamp() {
          var c = this.s & this.DM;
          while (this.t > 0 && this[this.t - 1] == c)
            --this.t;
        }
        function bnToString(b) {
          if (this.s < 0)
            return "-" + this.negate().toString(b);
          var k;
          if (b == 16)
            k = 4;
          else if (b == 8)
            k = 3;
          else if (b == 2)
            k = 1;
          else if (b == 32)
            k = 5;
          else if (b == 4)
            k = 2;
          else
            return this.toRadix(b);
          var km = (1 << k) - 1, d, m = false, r = "", i = this.t;
          var p = this.DB - i * this.DB % k;
          if (i-- > 0) {
            if (p < this.DB && (d = this[i] >> p) > 0) {
              m = true;
              r = int2char(d);
            }
            while (i >= 0) {
              if (p < k) {
                d = (this[i] & (1 << p) - 1) << k - p;
                d |= this[--i] >> (p += this.DB - k);
              } else {
                d = this[i] >> (p -= k) & km;
                if (p <= 0) {
                  p += this.DB;
                  --i;
                }
              }
              if (d > 0)
                m = true;
              if (m)
                r += int2char(d);
            }
          }
          return m ? r : "0";
        }
        function bnNegate() {
          var r = nbi();
          BigInteger.ZERO.subTo(this, r);
          return r;
        }
        function bnAbs() {
          return this.s < 0 ? this.negate() : this;
        }
        function bnCompareTo(a) {
          var r = this.s - a.s;
          if (r != 0)
            return r;
          var i = this.t;
          r = i - a.t;
          if (r != 0)
            return this.s < 0 ? -r : r;
          while (--i >= 0)
            if ((r = this[i] - a[i]) != 0)
              return r;
          return 0;
        }
        function nbits(x) {
          var r = 1, t;
          if ((t = x >>> 16) != 0) {
            x = t;
            r += 16;
          }
          if ((t = x >> 8) != 0) {
            x = t;
            r += 8;
          }
          if ((t = x >> 4) != 0) {
            x = t;
            r += 4;
          }
          if ((t = x >> 2) != 0) {
            x = t;
            r += 2;
          }
          if ((t = x >> 1) != 0) {
            x = t;
            r += 1;
          }
          return r;
        }
        function bnBitLength() {
          if (this.t <= 0)
            return 0;
          return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
        }
        function bnpDLShiftTo(n, r) {
          var i;
          for (i = this.t - 1; i >= 0; --i)
            r[i + n] = this[i];
          for (i = n - 1; i >= 0; --i)
            r[i] = 0;
          r.t = this.t + n;
          r.s = this.s;
        }
        function bnpDRShiftTo(n, r) {
          for (var i = n; i < this.t; ++i)
            r[i - n] = this[i];
          r.t = Math.max(this.t - n, 0);
          r.s = this.s;
        }
        function bnpLShiftTo(n, r) {
          var bs = n % this.DB;
          var cbs = this.DB - bs;
          var bm = (1 << cbs) - 1;
          var ds = Math.floor(n / this.DB), c = this.s << bs & this.DM, i;
          for (i = this.t - 1; i >= 0; --i) {
            r[i + ds + 1] = this[i] >> cbs | c;
            c = (this[i] & bm) << bs;
          }
          for (i = ds - 1; i >= 0; --i)
            r[i] = 0;
          r[ds] = c;
          r.t = this.t + ds + 1;
          r.s = this.s;
          r.clamp();
        }
        function bnpRShiftTo(n, r) {
          r.s = this.s;
          var ds = Math.floor(n / this.DB);
          if (ds >= this.t) {
            r.t = 0;
            return;
          }
          var bs = n % this.DB;
          var cbs = this.DB - bs;
          var bm = (1 << bs) - 1;
          r[0] = this[ds] >> bs;
          for (var i = ds + 1; i < this.t; ++i) {
            r[i - ds - 1] |= (this[i] & bm) << cbs;
            r[i - ds] = this[i] >> bs;
          }
          if (bs > 0)
            r[this.t - ds - 1] |= (this.s & bm) << cbs;
          r.t = this.t - ds;
          r.clamp();
        }
        function bnpSubTo(a, r) {
          var i = 0, c = 0, m = Math.min(a.t, this.t);
          while (i < m) {
            c += this[i] - a[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
          }
          if (a.t < this.t) {
            c -= a.s;
            while (i < this.t) {
              c += this[i];
              r[i++] = c & this.DM;
              c >>= this.DB;
            }
            c += this.s;
          } else {
            c += this.s;
            while (i < a.t) {
              c -= a[i];
              r[i++] = c & this.DM;
              c >>= this.DB;
            }
            c -= a.s;
          }
          r.s = c < 0 ? -1 : 0;
          if (c < -1)
            r[i++] = this.DV + c;
          else if (c > 0)
            r[i++] = c;
          r.t = i;
          r.clamp();
        }
        function bnpMultiplyTo(a, r) {
          var x = this.abs(), y = a.abs();
          var i = x.t;
          r.t = i + y.t;
          while (--i >= 0)
            r[i] = 0;
          for (i = 0; i < y.t; ++i)
            r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
          r.s = 0;
          r.clamp();
          if (this.s != a.s)
            BigInteger.ZERO.subTo(r, r);
        }
        function bnpSquareTo(r) {
          var x = this.abs();
          var i = r.t = 2 * x.t;
          while (--i >= 0)
            r[i] = 0;
          for (i = 0; i < x.t - 1; ++i) {
            var c = x.am(i, x[i], r, 2 * i, 0, 1);
            if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
              r[i + x.t] -= x.DV;
              r[i + x.t + 1] = 1;
            }
          }
          if (r.t > 0)
            r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
          r.s = 0;
          r.clamp();
        }
        function bnpDivRemTo(m, q, r) {
          var pm = m.abs();
          if (pm.t <= 0)
            return;
          var pt = this.abs();
          if (pt.t < pm.t) {
            if (q != null)
              q.fromInt(0);
            if (r != null)
              this.copyTo(r);
            return;
          }
          if (r == null)
            r = nbi();
          var y = nbi(), ts = this.s, ms = m.s;
          var nsh = this.DB - nbits(pm[pm.t - 1]);
          if (nsh > 0) {
            pm.lShiftTo(nsh, y);
            pt.lShiftTo(nsh, r);
          } else {
            pm.copyTo(y);
            pt.copyTo(r);
          }
          var ys = y.t;
          var y0 = y[ys - 1];
          if (y0 === 0)
            return;
          var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
          var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;
          var i = r.t, j = i - ys, t = q == null ? nbi() : q;
          y.dlShiftTo(j, t);
          if (r.compareTo(t) >= 0) {
            r[r.t++] = 1;
            r.subTo(t, r);
          }
          BigInteger.ONE.dlShiftTo(ys, t);
          t.subTo(y, y);
          while (y.t < ys)
            y[y.t++] = 0;
          while (--j >= 0) {
            var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
            if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
              y.dlShiftTo(j, t);
              r.subTo(t, r);
              while (r[i] < --qd)
                r.subTo(t, r);
            }
          }
          if (q != null) {
            r.drShiftTo(ys, q);
            if (ts != ms)
              BigInteger.ZERO.subTo(q, q);
          }
          r.t = ys;
          r.clamp();
          if (nsh > 0)
            r.rShiftTo(nsh, r);
          if (ts < 0)
            BigInteger.ZERO.subTo(r, r);
        }
        function bnMod(a) {
          var r = nbi();
          this.abs().divRemTo(a, null, r);
          if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0)
            a.subTo(r, r);
          return r;
        }
        function Classic(m) {
          this.m = m;
        }
        function cConvert(x) {
          if (x.s < 0 || x.compareTo(this.m) >= 0)
            return x.mod(this.m);
          else
            return x;
        }
        function cRevert(x) {
          return x;
        }
        function cReduce(x) {
          x.divRemTo(this.m, null, x);
        }
        function cMulTo(x, y, r) {
          x.multiplyTo(y, r);
          this.reduce(r);
        }
        function cSqrTo(x, r) {
          x.squareTo(r);
          this.reduce(r);
        }
        Classic.prototype.convert = cConvert;
        Classic.prototype.revert = cRevert;
        Classic.prototype.reduce = cReduce;
        Classic.prototype.mulTo = cMulTo;
        Classic.prototype.sqrTo = cSqrTo;
        function bnpInvDigit() {
          if (this.t < 1)
            return 0;
          var x = this[0];
          if ((x & 1) === 0)
            return 0;
          var y = x & 3;
          y = y * (2 - (x & 15) * y) & 15;
          y = y * (2 - (x & 255) * y) & 255;
          y = y * (2 - ((x & 65535) * y & 65535)) & 65535;
          y = y * (2 - x * y % this.DV) % this.DV;
          return y > 0 ? this.DV - y : -y;
        }
        function Montgomery(m) {
          this.m = m;
          this.mp = m.invDigit();
          this.mpl = this.mp & 32767;
          this.mph = this.mp >> 15;
          this.um = (1 << m.DB - 15) - 1;
          this.mt2 = 2 * m.t;
        }
        function montConvert(x) {
          var r = nbi();
          x.abs().dlShiftTo(this.m.t, r);
          r.divRemTo(this.m, null, r);
          if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0)
            this.m.subTo(r, r);
          return r;
        }
        function montRevert(x) {
          var r = nbi();
          x.copyTo(r);
          this.reduce(r);
          return r;
        }
        function montReduce(x) {
          while (x.t <= this.mt2)
            x[x.t++] = 0;
          for (var i = 0; i < this.m.t; ++i) {
            var j = x[i] & 32767;
            var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;
            j = i + this.m.t;
            x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
            while (x[j] >= x.DV) {
              x[j] -= x.DV;
              x[++j]++;
            }
          }
          x.clamp();
          x.drShiftTo(this.m.t, x);
          if (x.compareTo(this.m) >= 0)
            x.subTo(this.m, x);
        }
        function montSqrTo(x, r) {
          x.squareTo(r);
          this.reduce(r);
        }
        function montMulTo(x, y, r) {
          x.multiplyTo(y, r);
          this.reduce(r);
        }
        Montgomery.prototype.convert = montConvert;
        Montgomery.prototype.revert = montRevert;
        Montgomery.prototype.reduce = montReduce;
        Montgomery.prototype.mulTo = montMulTo;
        Montgomery.prototype.sqrTo = montSqrTo;
        function bnpIsEven() {
          return (this.t > 0 ? this[0] & 1 : this.s) === 0;
        }
        function bnpExp(e, z) {
          if (e > 4294967295 || e < 1)
            return BigInteger.ONE;
          var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e) - 1;
          g.copyTo(r);
          while (--i >= 0) {
            z.sqrTo(r, r2);
            if ((e & 1 << i) > 0)
              z.mulTo(r2, g, r);
            else {
              var t = r;
              r = r2;
              r2 = t;
            }
          }
          return z.revert(r);
        }
        function bnModPowInt(e, m) {
          var z;
          if (e < 256 || m.isEven())
            z = new Classic(m);
          else
            z = new Montgomery(m);
          return this.exp(e, z);
        }
        function bnClone() {
          var r = nbi();
          this.copyTo(r);
          return r;
        }
        function bnIntValue() {
          if (this.s < 0) {
            if (this.t == 1)
              return this[0] - this.DV;
            else if (this.t === 0)
              return -1;
          } else if (this.t == 1)
            return this[0];
          else if (this.t === 0)
            return 0;
          return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
        }
        function bnByteValue() {
          return this.t == 0 ? this.s : this[0] << 24 >> 24;
        }
        function bnShortValue() {
          return this.t == 0 ? this.s : this[0] << 16 >> 16;
        }
        function bnpChunkSize(r) {
          return Math.floor(Math.LN2 * this.DB / Math.log(r));
        }
        function bnSigNum() {
          if (this.s < 0)
            return -1;
          else if (this.t <= 0 || this.t == 1 && this[0] <= 0)
            return 0;
          else
            return 1;
        }
        function bnpToRadix(b) {
          if (b == null)
            b = 10;
          if (this.signum() === 0 || b < 2 || b > 36)
            return "0";
          var cs = this.chunkSize(b);
          var a = Math.pow(b, cs);
          var d = nbv(a), y = nbi(), z = nbi(), r = "";
          this.divRemTo(d, y, z);
          while (y.signum() > 0) {
            r = (a + z.intValue()).toString(b).substr(1) + r;
            y.divRemTo(d, y, z);
          }
          return z.intValue().toString(b) + r;
        }
        function bnpFromRadix(s, b) {
          this.fromInt(0);
          if (b == null)
            b = 10;
          var cs = this.chunkSize(b);
          var d = Math.pow(b, cs), mi = false, j = 0, w = 0;
          for (var i = 0; i < s.length; ++i) {
            var x = intAt(s, i);
            if (x < 0) {
              if (s.charAt(i) == "-" && this.signum() === 0)
                mi = true;
              continue;
            }
            w = b * w + x;
            if (++j >= cs) {
              this.dMultiply(d);
              this.dAddOffset(w, 0);
              j = 0;
              w = 0;
            }
          }
          if (j > 0) {
            this.dMultiply(Math.pow(b, j));
            this.dAddOffset(w, 0);
          }
          if (mi)
            BigInteger.ZERO.subTo(this, this);
        }
        function bnpFromNumber(a, b) {
          if (typeof b == "number") {
            if (a < 2)
              this.fromInt(1);
            else {
              this.fromNumber(a);
              if (!this.testBit(a - 1))
                this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);
              if (this.isEven())
                this.dAddOffset(1, 0);
              while (!this.isProbablePrime(b)) {
                this.dAddOffset(2, 0);
                if (this.bitLength() > a)
                  this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);
              }
            }
          } else {
            var x = crypt.randomBytes((a >> 3) + 1);
            var t = a & 7;
            if (t > 0)
              x[0] &= (1 << t) - 1;
            else
              x[0] = 0;
            this.fromByteArray(x);
          }
        }
        function bnToByteArray() {
          var i = this.t, r = new Array();
          r[0] = this.s;
          var p = this.DB - i * this.DB % 8, d, k = 0;
          if (i-- > 0) {
            if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p)
              r[k++] = d | this.s << this.DB - p;
            while (i >= 0) {
              if (p < 8) {
                d = (this[i] & (1 << p) - 1) << 8 - p;
                d |= this[--i] >> (p += this.DB - 8);
              } else {
                d = this[i] >> (p -= 8) & 255;
                if (p <= 0) {
                  p += this.DB;
                  --i;
                }
              }
              if ((d & 128) != 0)
                d |= -256;
              if (k === 0 && (this.s & 128) != (d & 128))
                ++k;
              if (k > 0 || d != this.s)
                r[k++] = d;
            }
          }
          return r;
        }
        function bnToBuffer(trimOrSize) {
          var res = Buffer.from(this.toByteArray());
          if (trimOrSize === true && res[0] === 0) {
            res = res.slice(1);
          } else if (_.isNumber(trimOrSize)) {
            if (res.length > trimOrSize) {
              for (var i = 0; i < res.length - trimOrSize; i++) {
                if (res[i] !== 0) {
                  return null;
                }
              }
              return res.slice(res.length - trimOrSize);
            } else if (res.length < trimOrSize) {
              var padded = Buffer.alloc(trimOrSize);
              padded.fill(0, 0, trimOrSize - res.length);
              res.copy(padded, trimOrSize - res.length);
              return padded;
            }
          }
          return res;
        }
        function bnEquals(a) {
          return this.compareTo(a) == 0;
        }
        function bnMin(a) {
          return this.compareTo(a) < 0 ? this : a;
        }
        function bnMax(a) {
          return this.compareTo(a) > 0 ? this : a;
        }
        function bnpBitwiseTo(a, op, r) {
          var i, f, m = Math.min(a.t, this.t);
          for (i = 0; i < m; ++i)
            r[i] = op(this[i], a[i]);
          if (a.t < this.t) {
            f = a.s & this.DM;
            for (i = m; i < this.t; ++i)
              r[i] = op(this[i], f);
            r.t = this.t;
          } else {
            f = this.s & this.DM;
            for (i = m; i < a.t; ++i)
              r[i] = op(f, a[i]);
            r.t = a.t;
          }
          r.s = op(this.s, a.s);
          r.clamp();
        }
        function op_and(x, y) {
          return x & y;
        }
        function bnAnd(a) {
          var r = nbi();
          this.bitwiseTo(a, op_and, r);
          return r;
        }
        function op_or(x, y) {
          return x | y;
        }
        function bnOr(a) {
          var r = nbi();
          this.bitwiseTo(a, op_or, r);
          return r;
        }
        function op_xor(x, y) {
          return x ^ y;
        }
        function bnXor(a) {
          var r = nbi();
          this.bitwiseTo(a, op_xor, r);
          return r;
        }
        function op_andnot(x, y) {
          return x & ~y;
        }
        function bnAndNot(a) {
          var r = nbi();
          this.bitwiseTo(a, op_andnot, r);
          return r;
        }
        function bnNot() {
          var r = nbi();
          for (var i = 0; i < this.t; ++i)
            r[i] = this.DM & ~this[i];
          r.t = this.t;
          r.s = ~this.s;
          return r;
        }
        function bnShiftLeft(n) {
          var r = nbi();
          if (n < 0)
            this.rShiftTo(-n, r);
          else
            this.lShiftTo(n, r);
          return r;
        }
        function bnShiftRight(n) {
          var r = nbi();
          if (n < 0)
            this.lShiftTo(-n, r);
          else
            this.rShiftTo(n, r);
          return r;
        }
        function lbit(x) {
          if (x === 0)
            return -1;
          var r = 0;
          if ((x & 65535) === 0) {
            x >>= 16;
            r += 16;
          }
          if ((x & 255) === 0) {
            x >>= 8;
            r += 8;
          }
          if ((x & 15) === 0) {
            x >>= 4;
            r += 4;
          }
          if ((x & 3) === 0) {
            x >>= 2;
            r += 2;
          }
          if ((x & 1) === 0)
            ++r;
          return r;
        }
        function bnGetLowestSetBit() {
          for (var i = 0; i < this.t; ++i)
            if (this[i] != 0)
              return i * this.DB + lbit(this[i]);
          if (this.s < 0)
            return this.t * this.DB;
          return -1;
        }
        function cbit(x) {
          var r = 0;
          while (x != 0) {
            x &= x - 1;
            ++r;
          }
          return r;
        }
        function bnBitCount() {
          var r = 0, x = this.s & this.DM;
          for (var i = 0; i < this.t; ++i)
            r += cbit(this[i] ^ x);
          return r;
        }
        function bnTestBit(n) {
          var j = Math.floor(n / this.DB);
          if (j >= this.t)
            return this.s != 0;
          return (this[j] & 1 << n % this.DB) != 0;
        }
        function bnpChangeBit(n, op) {
          var r = BigInteger.ONE.shiftLeft(n);
          this.bitwiseTo(r, op, r);
          return r;
        }
        function bnSetBit(n) {
          return this.changeBit(n, op_or);
        }
        function bnClearBit(n) {
          return this.changeBit(n, op_andnot);
        }
        function bnFlipBit(n) {
          return this.changeBit(n, op_xor);
        }
        function bnpAddTo(a, r) {
          var i = 0, c = 0, m = Math.min(a.t, this.t);
          while (i < m) {
            c += this[i] + a[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
          }
          if (a.t < this.t) {
            c += a.s;
            while (i < this.t) {
              c += this[i];
              r[i++] = c & this.DM;
              c >>= this.DB;
            }
            c += this.s;
          } else {
            c += this.s;
            while (i < a.t) {
              c += a[i];
              r[i++] = c & this.DM;
              c >>= this.DB;
            }
            c += a.s;
          }
          r.s = c < 0 ? -1 : 0;
          if (c > 0)
            r[i++] = c;
          else if (c < -1)
            r[i++] = this.DV + c;
          r.t = i;
          r.clamp();
        }
        function bnAdd(a) {
          var r = nbi();
          this.addTo(a, r);
          return r;
        }
        function bnSubtract(a) {
          var r = nbi();
          this.subTo(a, r);
          return r;
        }
        function bnMultiply(a) {
          var r = nbi();
          this.multiplyTo(a, r);
          return r;
        }
        function bnSquare() {
          var r = nbi();
          this.squareTo(r);
          return r;
        }
        function bnDivide(a) {
          var r = nbi();
          this.divRemTo(a, r, null);
          return r;
        }
        function bnRemainder(a) {
          var r = nbi();
          this.divRemTo(a, null, r);
          return r;
        }
        function bnDivideAndRemainder(a) {
          var q = nbi(), r = nbi();
          this.divRemTo(a, q, r);
          return new Array(q, r);
        }
        function bnpDMultiply(n) {
          this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
          ++this.t;
          this.clamp();
        }
        function bnpDAddOffset(n, w) {
          if (n === 0)
            return;
          while (this.t <= w)
            this[this.t++] = 0;
          this[w] += n;
          while (this[w] >= this.DV) {
            this[w] -= this.DV;
            if (++w >= this.t)
              this[this.t++] = 0;
            ++this[w];
          }
        }
        function NullExp() {
        }
        function nNop(x) {
          return x;
        }
        function nMulTo(x, y, r) {
          x.multiplyTo(y, r);
        }
        function nSqrTo(x, r) {
          x.squareTo(r);
        }
        NullExp.prototype.convert = nNop;
        NullExp.prototype.revert = nNop;
        NullExp.prototype.mulTo = nMulTo;
        NullExp.prototype.sqrTo = nSqrTo;
        function bnPow(e) {
          return this.exp(e, new NullExp());
        }
        function bnpMultiplyLowerTo(a, n, r) {
          var i = Math.min(this.t + a.t, n);
          r.s = 0;
          r.t = i;
          while (i > 0)
            r[--i] = 0;
          var j;
          for (j = r.t - this.t; i < j; ++i)
            r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);
          for (j = Math.min(a.t, n); i < j; ++i)
            this.am(0, a[i], r, i, 0, n - i);
          r.clamp();
        }
        function bnpMultiplyUpperTo(a, n, r) {
          --n;
          var i = r.t = this.t + a.t - n;
          r.s = 0;
          while (--i >= 0)
            r[i] = 0;
          for (i = Math.max(n - this.t, 0); i < a.t; ++i)
            r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);
          r.clamp();
          r.drShiftTo(1, r);
        }
        function Barrett(m) {
          this.r2 = nbi();
          this.q3 = nbi();
          BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);
          this.mu = this.r2.divide(m);
          this.m = m;
        }
        function barrettConvert(x) {
          if (x.s < 0 || x.t > 2 * this.m.t)
            return x.mod(this.m);
          else if (x.compareTo(this.m) < 0)
            return x;
          else {
            var r = nbi();
            x.copyTo(r);
            this.reduce(r);
            return r;
          }
        }
        function barrettRevert(x) {
          return x;
        }
        function barrettReduce(x) {
          x.drShiftTo(this.m.t - 1, this.r2);
          if (x.t > this.m.t + 1) {
            x.t = this.m.t + 1;
            x.clamp();
          }
          this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
          this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);
          while (x.compareTo(this.r2) < 0)
            x.dAddOffset(1, this.m.t + 1);
          x.subTo(this.r2, x);
          while (x.compareTo(this.m) >= 0)
            x.subTo(this.m, x);
        }
        function barrettSqrTo(x, r) {
          x.squareTo(r);
          this.reduce(r);
        }
        function barrettMulTo(x, y, r) {
          x.multiplyTo(y, r);
          this.reduce(r);
        }
        Barrett.prototype.convert = barrettConvert;
        Barrett.prototype.revert = barrettRevert;
        Barrett.prototype.reduce = barrettReduce;
        Barrett.prototype.mulTo = barrettMulTo;
        Barrett.prototype.sqrTo = barrettSqrTo;
        function bnModPow(e, m) {
          var i = e.bitLength(), k, r = nbv(1), z;
          if (i <= 0)
            return r;
          else if (i < 18)
            k = 1;
          else if (i < 48)
            k = 3;
          else if (i < 144)
            k = 4;
          else if (i < 768)
            k = 5;
          else
            k = 6;
          if (i < 8)
            z = new Classic(m);
          else if (m.isEven())
            z = new Barrett(m);
          else
            z = new Montgomery(m);
          var g = new Array(), n = 3, k1 = k - 1, km = (1 << k) - 1;
          g[1] = z.convert(this);
          if (k > 1) {
            var g2 = nbi();
            z.sqrTo(g[1], g2);
            while (n <= km) {
              g[n] = nbi();
              z.mulTo(g2, g[n - 2], g[n]);
              n += 2;
            }
          }
          var j = e.t - 1, w, is1 = true, r2 = nbi(), t;
          i = nbits(e[j]) - 1;
          while (j >= 0) {
            if (i >= k1)
              w = e[j] >> i - k1 & km;
            else {
              w = (e[j] & (1 << i + 1) - 1) << k1 - i;
              if (j > 0)
                w |= e[j - 1] >> this.DB + i - k1;
            }
            n = k;
            while ((w & 1) === 0) {
              w >>= 1;
              --n;
            }
            if ((i -= n) < 0) {
              i += this.DB;
              --j;
            }
            if (is1) {
              g[w].copyTo(r);
              is1 = false;
            } else {
              while (n > 1) {
                z.sqrTo(r, r2);
                z.sqrTo(r2, r);
                n -= 2;
              }
              if (n > 0)
                z.sqrTo(r, r2);
              else {
                t = r;
                r = r2;
                r2 = t;
              }
              z.mulTo(r2, g[w], r);
            }
            while (j >= 0 && (e[j] & 1 << i) === 0) {
              z.sqrTo(r, r2);
              t = r;
              r = r2;
              r2 = t;
              if (--i < 0) {
                i = this.DB - 1;
                --j;
              }
            }
          }
          return z.revert(r);
        }
        function bnGCD(a) {
          var x = this.s < 0 ? this.negate() : this.clone();
          var y = a.s < 0 ? a.negate() : a.clone();
          if (x.compareTo(y) < 0) {
            var t = x;
            x = y;
            y = t;
          }
          var i = x.getLowestSetBit(), g = y.getLowestSetBit();
          if (g < 0)
            return x;
          if (i < g)
            g = i;
          if (g > 0) {
            x.rShiftTo(g, x);
            y.rShiftTo(g, y);
          }
          while (x.signum() > 0) {
            if ((i = x.getLowestSetBit()) > 0)
              x.rShiftTo(i, x);
            if ((i = y.getLowestSetBit()) > 0)
              y.rShiftTo(i, y);
            if (x.compareTo(y) >= 0) {
              x.subTo(y, x);
              x.rShiftTo(1, x);
            } else {
              y.subTo(x, y);
              y.rShiftTo(1, y);
            }
          }
          if (g > 0)
            y.lShiftTo(g, y);
          return y;
        }
        function bnpModInt(n) {
          if (n <= 0)
            return 0;
          var d = this.DV % n, r = this.s < 0 ? n - 1 : 0;
          if (this.t > 0)
            if (d === 0)
              r = this[0] % n;
            else
              for (var i = this.t - 1; i >= 0; --i)
                r = (d * r + this[i]) % n;
          return r;
        }
        function bnModInverse(m) {
          var ac = m.isEven();
          if (this.isEven() && ac || m.signum() === 0)
            return BigInteger.ZERO;
          var u = m.clone(), v = this.clone();
          var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);
          while (u.signum() != 0) {
            while (u.isEven()) {
              u.rShiftTo(1, u);
              if (ac) {
                if (!a.isEven() || !b.isEven()) {
                  a.addTo(this, a);
                  b.subTo(m, b);
                }
                a.rShiftTo(1, a);
              } else if (!b.isEven())
                b.subTo(m, b);
              b.rShiftTo(1, b);
            }
            while (v.isEven()) {
              v.rShiftTo(1, v);
              if (ac) {
                if (!c.isEven() || !d.isEven()) {
                  c.addTo(this, c);
                  d.subTo(m, d);
                }
                c.rShiftTo(1, c);
              } else if (!d.isEven())
                d.subTo(m, d);
              d.rShiftTo(1, d);
            }
            if (u.compareTo(v) >= 0) {
              u.subTo(v, u);
              if (ac)
                a.subTo(c, a);
              b.subTo(d, b);
            } else {
              v.subTo(u, v);
              if (ac)
                c.subTo(a, c);
              d.subTo(b, d);
            }
          }
          if (v.compareTo(BigInteger.ONE) != 0)
            return BigInteger.ZERO;
          if (d.compareTo(m) >= 0)
            return d.subtract(m);
          if (d.signum() < 0)
            d.addTo(m, d);
          else
            return d;
          if (d.signum() < 0)
            return d.add(m);
          else
            return d;
        }
        var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];
        var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];
        function bnIsProbablePrime(t) {
          var i, x = this.abs();
          if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {
            for (i = 0; i < lowprimes.length; ++i)
              if (x[0] == lowprimes[i])
                return true;
            return false;
          }
          if (x.isEven())
            return false;
          i = 1;
          while (i < lowprimes.length) {
            var m = lowprimes[i], j = i + 1;
            while (j < lowprimes.length && m < lplim)
              m *= lowprimes[j++];
            m = x.modInt(m);
            while (i < j)
              if (m % lowprimes[i++] === 0)
                return false;
          }
          return x.millerRabin(t);
        }
        function bnpMillerRabin(t) {
          var n1 = this.subtract(BigInteger.ONE);
          var k = n1.getLowestSetBit();
          if (k <= 0)
            return false;
          var r = n1.shiftRight(k);
          t = t + 1 >> 1;
          if (t > lowprimes.length)
            t = lowprimes.length;
          var a = nbi();
          for (var i = 0; i < t; ++i) {
            a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);
            var y = a.modPow(r, this);
            if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
              var j = 1;
              while (j++ < k && y.compareTo(n1) != 0) {
                y = y.modPowInt(2, this);
                if (y.compareTo(BigInteger.ONE) === 0)
                  return false;
              }
              if (y.compareTo(n1) != 0)
                return false;
            }
          }
          return true;
        }
        BigInteger.prototype.copyTo = bnpCopyTo;
        BigInteger.prototype.fromInt = bnpFromInt;
        BigInteger.prototype.fromString = bnpFromString;
        BigInteger.prototype.fromByteArray = bnpFromByteArray;
        BigInteger.prototype.fromBuffer = bnpFromBuffer;
        BigInteger.prototype.clamp = bnpClamp;
        BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
        BigInteger.prototype.drShiftTo = bnpDRShiftTo;
        BigInteger.prototype.lShiftTo = bnpLShiftTo;
        BigInteger.prototype.rShiftTo = bnpRShiftTo;
        BigInteger.prototype.subTo = bnpSubTo;
        BigInteger.prototype.multiplyTo = bnpMultiplyTo;
        BigInteger.prototype.squareTo = bnpSquareTo;
        BigInteger.prototype.divRemTo = bnpDivRemTo;
        BigInteger.prototype.invDigit = bnpInvDigit;
        BigInteger.prototype.isEven = bnpIsEven;
        BigInteger.prototype.exp = bnpExp;
        BigInteger.prototype.chunkSize = bnpChunkSize;
        BigInteger.prototype.toRadix = bnpToRadix;
        BigInteger.prototype.fromRadix = bnpFromRadix;
        BigInteger.prototype.fromNumber = bnpFromNumber;
        BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
        BigInteger.prototype.changeBit = bnpChangeBit;
        BigInteger.prototype.addTo = bnpAddTo;
        BigInteger.prototype.dMultiply = bnpDMultiply;
        BigInteger.prototype.dAddOffset = bnpDAddOffset;
        BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
        BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
        BigInteger.prototype.modInt = bnpModInt;
        BigInteger.prototype.millerRabin = bnpMillerRabin;
        BigInteger.prototype.toString = bnToString;
        BigInteger.prototype.negate = bnNegate;
        BigInteger.prototype.abs = bnAbs;
        BigInteger.prototype.compareTo = bnCompareTo;
        BigInteger.prototype.bitLength = bnBitLength;
        BigInteger.prototype.mod = bnMod;
        BigInteger.prototype.modPowInt = bnModPowInt;
        BigInteger.prototype.clone = bnClone;
        BigInteger.prototype.intValue = bnIntValue;
        BigInteger.prototype.byteValue = bnByteValue;
        BigInteger.prototype.shortValue = bnShortValue;
        BigInteger.prototype.signum = bnSigNum;
        BigInteger.prototype.toByteArray = bnToByteArray;
        BigInteger.prototype.toBuffer = bnToBuffer;
        BigInteger.prototype.equals = bnEquals;
        BigInteger.prototype.min = bnMin;
        BigInteger.prototype.max = bnMax;
        BigInteger.prototype.and = bnAnd;
        BigInteger.prototype.or = bnOr;
        BigInteger.prototype.xor = bnXor;
        BigInteger.prototype.andNot = bnAndNot;
        BigInteger.prototype.not = bnNot;
        BigInteger.prototype.shiftLeft = bnShiftLeft;
        BigInteger.prototype.shiftRight = bnShiftRight;
        BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
        BigInteger.prototype.bitCount = bnBitCount;
        BigInteger.prototype.testBit = bnTestBit;
        BigInteger.prototype.setBit = bnSetBit;
        BigInteger.prototype.clearBit = bnClearBit;
        BigInteger.prototype.flipBit = bnFlipBit;
        BigInteger.prototype.add = bnAdd;
        BigInteger.prototype.subtract = bnSubtract;
        BigInteger.prototype.multiply = bnMultiply;
        BigInteger.prototype.divide = bnDivide;
        BigInteger.prototype.remainder = bnRemainder;
        BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
        BigInteger.prototype.modPow = bnModPow;
        BigInteger.prototype.modInverse = bnModInverse;
        BigInteger.prototype.pow = bnPow;
        BigInteger.prototype.gcd = bnGCD;
        BigInteger.prototype.isProbablePrime = bnIsProbablePrime;
        BigInteger.int2char = int2char;
        BigInteger.ZERO = nbv(0);
        BigInteger.ONE = nbv(1);
        BigInteger.prototype.square = bnSquare;
        module22.exports = BigInteger;
      }
    });
    var require_pkcs1 = __commonJS2({
      "node_modules/node-rsa/src/schemes/pkcs1.js"(exports2, module22) {
        var BigInteger = require_jsbn();
        var crypt = require("crypto");
        var constants = require("constants");
        var SIGN_INFO_HEAD = {
          md2: Buffer.from("3020300c06082a864886f70d020205000410", "hex"),
          md5: Buffer.from("3020300c06082a864886f70d020505000410", "hex"),
          sha1: Buffer.from("3021300906052b0e03021a05000414", "hex"),
          sha224: Buffer.from("302d300d06096086480165030402040500041c", "hex"),
          sha256: Buffer.from("3031300d060960864801650304020105000420", "hex"),
          sha384: Buffer.from("3041300d060960864801650304020205000430", "hex"),
          sha512: Buffer.from("3051300d060960864801650304020305000440", "hex"),
          ripemd160: Buffer.from("3021300906052b2403020105000414", "hex"),
          rmd160: Buffer.from("3021300906052b2403020105000414", "hex")
        };
        var SIGN_ALG_TO_HASH_ALIASES = {
          "ripemd160": "rmd160"
        };
        var DEFAULT_HASH_FUNCTION = "sha256";
        module22.exports = {
          isEncryption: true,
          isSignature: true
        };
        module22.exports.makeScheme = function(key, options) {
          function Scheme(key2, options2) {
            this.key = key2;
            this.options = options2;
          }
          Scheme.prototype.maxMessageLength = function() {
            if (this.options.encryptionSchemeOptions && this.options.encryptionSchemeOptions.padding == constants.RSA_NO_PADDING) {
              return this.key.encryptedDataLength;
            }
            return this.key.encryptedDataLength - 11;
          };
          Scheme.prototype.encPad = function(buffer, options2) {
            options2 = options2 || {};
            var filled;
            if (buffer.length > this.key.maxMessageLength) {
              throw new Error("Message too long for RSA (n=" + this.key.encryptedDataLength + ", l=" + buffer.length + ")");
            }
            if (this.options.encryptionSchemeOptions && this.options.encryptionSchemeOptions.padding == constants.RSA_NO_PADDING) {
              filled = Buffer.alloc(this.key.maxMessageLength - buffer.length);
              filled.fill(0);
              return Buffer.concat([filled, buffer]);
            }
            if (options2.type === 1) {
              filled = Buffer.alloc(this.key.encryptedDataLength - buffer.length - 1);
              filled.fill(255, 0, filled.length - 1);
              filled[0] = 1;
              filled[filled.length - 1] = 0;
              return Buffer.concat([filled, buffer]);
            } else {
              filled = Buffer.alloc(this.key.encryptedDataLength - buffer.length);
              filled[0] = 0;
              filled[1] = 2;
              var rand = crypt.randomBytes(filled.length - 3);
              for (var i = 0; i < rand.length; i++) {
                var r = rand[i];
                while (r === 0) {
                  r = crypt.randomBytes(1)[0];
                }
                filled[i + 2] = r;
              }
              filled[filled.length - 1] = 0;
              return Buffer.concat([filled, buffer]);
            }
          };
          Scheme.prototype.encUnPad = function(buffer, options2) {
            options2 = options2 || {};
            var i = 0;
            if (this.options.encryptionSchemeOptions && this.options.encryptionSchemeOptions.padding == constants.RSA_NO_PADDING) {
              var unPad;
              if (typeof buffer.lastIndexOf == "function") {
                unPad = buffer.slice(buffer.lastIndexOf("\0") + 1, buffer.length);
              } else {
                unPad = buffer.slice(String.prototype.lastIndexOf.call(buffer, "\0") + 1, buffer.length);
              }
              return unPad;
            }
            if (buffer.length < 4) {
              return null;
            }
            if (options2.type === 1) {
              if (buffer[0] !== 0 || buffer[1] !== 1) {
                return null;
              }
              i = 3;
              while (buffer[i] !== 0) {
                if (buffer[i] != 255 || ++i >= buffer.length) {
                  return null;
                }
              }
            } else {
              if (buffer[0] !== 0 || buffer[1] !== 2) {
                return null;
              }
              i = 3;
              while (buffer[i] !== 0) {
                if (++i >= buffer.length) {
                  return null;
                }
              }
            }
            return buffer.slice(i + 1, buffer.length);
          };
          Scheme.prototype.sign = function(buffer) {
            var hashAlgorithm = this.options.signingSchemeOptions.hash || DEFAULT_HASH_FUNCTION;
            if (this.options.environment === "browser") {
              hashAlgorithm = SIGN_ALG_TO_HASH_ALIASES[hashAlgorithm] || hashAlgorithm;
              var hasher = crypt.createHash(hashAlgorithm);
              hasher.update(buffer);
              var hash = this.pkcs1pad(hasher.digest(), hashAlgorithm);
              var res = this.key.$doPrivate(new BigInteger(hash)).toBuffer(this.key.encryptedDataLength);
              return res;
            } else {
              var signer = crypt.createSign("RSA-" + hashAlgorithm.toUpperCase());
              signer.update(buffer);
              return signer.sign(this.options.rsaUtils.exportKey("private"));
            }
          };
          Scheme.prototype.verify = function(buffer, signature, signature_encoding) {
            if (this.options.encryptionSchemeOptions && this.options.encryptionSchemeOptions.padding == constants.RSA_NO_PADDING) {
              return false;
            }
            var hashAlgorithm = this.options.signingSchemeOptions.hash || DEFAULT_HASH_FUNCTION;
            if (this.options.environment === "browser") {
              hashAlgorithm = SIGN_ALG_TO_HASH_ALIASES[hashAlgorithm] || hashAlgorithm;
              if (signature_encoding) {
                signature = Buffer.from(signature, signature_encoding);
              }
              var hasher = crypt.createHash(hashAlgorithm);
              hasher.update(buffer);
              var hash = this.pkcs1pad(hasher.digest(), hashAlgorithm);
              var m = this.key.$doPublic(new BigInteger(signature));
              return m.toBuffer().toString("hex") == hash.toString("hex");
            } else {
              var verifier = crypt.createVerify("RSA-" + hashAlgorithm.toUpperCase());
              verifier.update(buffer);
              return verifier.verify(this.options.rsaUtils.exportKey("public"), signature, signature_encoding);
            }
          };
          Scheme.prototype.pkcs0pad = function(buffer) {
            var filled = Buffer.alloc(this.key.maxMessageLength - buffer.length);
            filled.fill(0);
            return Buffer.concat([filled, buffer]);
          };
          Scheme.prototype.pkcs0unpad = function(buffer) {
            var unPad;
            if (typeof buffer.lastIndexOf == "function") {
              unPad = buffer.slice(buffer.lastIndexOf("\0") + 1, buffer.length);
            } else {
              unPad = buffer.slice(String.prototype.lastIndexOf.call(buffer, "\0") + 1, buffer.length);
            }
            return unPad;
          };
          Scheme.prototype.pkcs1pad = function(hashBuf, hashAlgorithm) {
            var digest = SIGN_INFO_HEAD[hashAlgorithm];
            if (!digest) {
              throw Error("Unsupported hash algorithm");
            }
            var data = Buffer.concat([digest, hashBuf]);
            if (data.length + 10 > this.key.encryptedDataLength) {
              throw Error("Key is too short for signing algorithm (" + hashAlgorithm + ")");
            }
            var filled = Buffer.alloc(this.key.encryptedDataLength - data.length - 1);
            filled.fill(255, 0, filled.length - 1);
            filled[0] = 1;
            filled[filled.length - 1] = 0;
            var res = Buffer.concat([filled, data]);
            return res;
          };
          return new Scheme(key, options);
        };
      }
    });
    var require_oaep = __commonJS2({
      "node_modules/node-rsa/src/schemes/oaep.js"(exports2, module22) {
        var BigInteger = require_jsbn();
        var crypt = require("crypto");
        module22.exports = {
          isEncryption: true,
          isSignature: false
        };
        module22.exports.digestLength = {
          md4: 16,
          md5: 16,
          ripemd160: 20,
          rmd160: 20,
          sha1: 20,
          sha224: 28,
          sha256: 32,
          sha384: 48,
          sha512: 64
        };
        var DEFAULT_HASH_FUNCTION = "sha1";
        module22.exports.eme_oaep_mgf1 = function(seed, maskLength, hashFunction) {
          hashFunction = hashFunction || DEFAULT_HASH_FUNCTION;
          var hLen = module22.exports.digestLength[hashFunction];
          var count = Math.ceil(maskLength / hLen);
          var T = Buffer.alloc(hLen * count);
          var c = Buffer.alloc(4);
          for (var i = 0; i < count; ++i) {
            var hash = crypt.createHash(hashFunction);
            hash.update(seed);
            c.writeUInt32BE(i, 0);
            hash.update(c);
            hash.digest().copy(T, i * hLen);
          }
          return T.slice(0, maskLength);
        };
        module22.exports.makeScheme = function(key, options) {
          function Scheme(key2, options2) {
            this.key = key2;
            this.options = options2;
          }
          Scheme.prototype.maxMessageLength = function() {
            return this.key.encryptedDataLength - 2 * module22.exports.digestLength[this.options.encryptionSchemeOptions.hash || DEFAULT_HASH_FUNCTION] - 2;
          };
          Scheme.prototype.encPad = function(buffer) {
            var hash = this.options.encryptionSchemeOptions.hash || DEFAULT_HASH_FUNCTION;
            var mgf = this.options.encryptionSchemeOptions.mgf || module22.exports.eme_oaep_mgf1;
            var label = this.options.encryptionSchemeOptions.label || Buffer.alloc(0);
            var emLen = this.key.encryptedDataLength;
            var hLen = module22.exports.digestLength[hash];
            if (buffer.length > emLen - 2 * hLen - 2) {
              throw new Error("Message is too long to encode into an encoded message with a length of " + emLen + " bytes, increaseemLen to fix this error (minimum value for given parameters and options: " + (emLen - 2 * hLen - 2) + ")");
            }
            var lHash = crypt.createHash(hash);
            lHash.update(label);
            lHash = lHash.digest();
            var PS = Buffer.alloc(emLen - buffer.length - 2 * hLen - 1);
            PS.fill(0);
            PS[PS.length - 1] = 1;
            var DB = Buffer.concat([lHash, PS, buffer]);
            var seed = crypt.randomBytes(hLen);
            var mask = mgf(seed, DB.length, hash);
            for (var i = 0; i < DB.length; i++) {
              DB[i] ^= mask[i];
            }
            mask = mgf(DB, hLen, hash);
            for (i = 0; i < seed.length; i++) {
              seed[i] ^= mask[i];
            }
            var em = Buffer.alloc(1 + seed.length + DB.length);
            em[0] = 0;
            seed.copy(em, 1);
            DB.copy(em, 1 + seed.length);
            return em;
          };
          Scheme.prototype.encUnPad = function(buffer) {
            var hash = this.options.encryptionSchemeOptions.hash || DEFAULT_HASH_FUNCTION;
            var mgf = this.options.encryptionSchemeOptions.mgf || module22.exports.eme_oaep_mgf1;
            var label = this.options.encryptionSchemeOptions.label || Buffer.alloc(0);
            var hLen = module22.exports.digestLength[hash];
            if (buffer.length < 2 * hLen + 2) {
              throw new Error("Error decoding message, the supplied message is not long enough to be a valid OAEP encoded message");
            }
            var seed = buffer.slice(1, hLen + 1);
            var DB = buffer.slice(1 + hLen);
            var mask = mgf(DB, hLen, hash);
            for (var i = 0; i < seed.length; i++) {
              seed[i] ^= mask[i];
            }
            mask = mgf(seed, DB.length, hash);
            for (i = 0; i < DB.length; i++) {
              DB[i] ^= mask[i];
            }
            var lHash = crypt.createHash(hash);
            lHash.update(label);
            lHash = lHash.digest();
            var lHashEM = DB.slice(0, hLen);
            if (lHashEM.toString("hex") != lHash.toString("hex")) {
              throw new Error("Error decoding message, the lHash calculated from the label provided and the lHash in the encrypted data do not match.");
            }
            i = hLen;
            while (DB[i++] === 0 && i < DB.length)
              ;
            if (DB[i - 1] != 1) {
              throw new Error("Error decoding message, there is no padding message separator byte");
            }
            return DB.slice(i);
          };
          return new Scheme(key, options);
        };
      }
    });
    var require_pss = __commonJS2({
      "node_modules/node-rsa/src/schemes/pss.js"(exports2, module22) {
        var BigInteger = require_jsbn();
        var crypt = require("crypto");
        module22.exports = {
          isEncryption: false,
          isSignature: true
        };
        var DEFAULT_HASH_FUNCTION = "sha1";
        var DEFAULT_SALT_LENGTH = 20;
        module22.exports.makeScheme = function(key, options) {
          var OAEP = require_schemes().pkcs1_oaep;
          function Scheme(key2, options2) {
            this.key = key2;
            this.options = options2;
          }
          Scheme.prototype.sign = function(buffer) {
            var mHash = crypt.createHash(this.options.signingSchemeOptions.hash || DEFAULT_HASH_FUNCTION);
            mHash.update(buffer);
            var encoded = this.emsa_pss_encode(mHash.digest(), this.key.keySize - 1);
            return this.key.$doPrivate(new BigInteger(encoded)).toBuffer(this.key.encryptedDataLength);
          };
          Scheme.prototype.verify = function(buffer, signature, signature_encoding) {
            if (signature_encoding) {
              signature = Buffer.from(signature, signature_encoding);
            }
            signature = new BigInteger(signature);
            var emLen = Math.ceil((this.key.keySize - 1) / 8);
            var m = this.key.$doPublic(signature).toBuffer(emLen);
            var mHash = crypt.createHash(this.options.signingSchemeOptions.hash || DEFAULT_HASH_FUNCTION);
            mHash.update(buffer);
            return this.emsa_pss_verify(mHash.digest(), m, this.key.keySize - 1);
          };
          Scheme.prototype.emsa_pss_encode = function(mHash, emBits) {
            var hash = this.options.signingSchemeOptions.hash || DEFAULT_HASH_FUNCTION;
            var mgf = this.options.signingSchemeOptions.mgf || OAEP.eme_oaep_mgf1;
            var sLen = this.options.signingSchemeOptions.saltLength || DEFAULT_SALT_LENGTH;
            var hLen = OAEP.digestLength[hash];
            var emLen = Math.ceil(emBits / 8);
            if (emLen < hLen + sLen + 2) {
              throw new Error("Output length passed to emBits(" + emBits + ") is too small for the options specified(" + hash + ", " + sLen + "). To fix this issue increase the value of emBits. (minimum size: " + (8 * hLen + 8 * sLen + 9) + ")");
            }
            var salt = crypt.randomBytes(sLen);
            var Mapostrophe = Buffer.alloc(8 + hLen + sLen);
            Mapostrophe.fill(0, 0, 8);
            mHash.copy(Mapostrophe, 8);
            salt.copy(Mapostrophe, 8 + mHash.length);
            var H = crypt.createHash(hash);
            H.update(Mapostrophe);
            H = H.digest();
            var PS = Buffer.alloc(emLen - salt.length - hLen - 2);
            PS.fill(0);
            var DB = Buffer.alloc(PS.length + 1 + salt.length);
            PS.copy(DB);
            DB[PS.length] = 1;
            salt.copy(DB, PS.length + 1);
            var dbMask = mgf(H, DB.length, hash);
            var maskedDB = Buffer.alloc(DB.length);
            for (var i = 0; i < dbMask.length; i++) {
              maskedDB[i] = DB[i] ^ dbMask[i];
            }
            var bits = 8 * emLen - emBits;
            var mask = 255 ^ 255 >> 8 - bits << 8 - bits;
            maskedDB[0] = maskedDB[0] & mask;
            var EM = Buffer.alloc(maskedDB.length + H.length + 1);
            maskedDB.copy(EM, 0);
            H.copy(EM, maskedDB.length);
            EM[EM.length - 1] = 188;
            return EM;
          };
          Scheme.prototype.emsa_pss_verify = function(mHash, EM, emBits) {
            var hash = this.options.signingSchemeOptions.hash || DEFAULT_HASH_FUNCTION;
            var mgf = this.options.signingSchemeOptions.mgf || OAEP.eme_oaep_mgf1;
            var sLen = this.options.signingSchemeOptions.saltLength || DEFAULT_SALT_LENGTH;
            var hLen = OAEP.digestLength[hash];
            var emLen = Math.ceil(emBits / 8);
            if (emLen < hLen + sLen + 2 || EM[EM.length - 1] != 188) {
              return false;
            }
            var DB = Buffer.alloc(emLen - hLen - 1);
            EM.copy(DB, 0, 0, emLen - hLen - 1);
            var mask = 0;
            for (var i = 0, bits = 8 * emLen - emBits; i < bits; i++) {
              mask |= 1 << 7 - i;
            }
            if ((DB[0] & mask) !== 0) {
              return false;
            }
            var H = EM.slice(emLen - hLen - 1, emLen - 1);
            var dbMask = mgf(H, DB.length, hash);
            for (i = 0; i < DB.length; i++) {
              DB[i] ^= dbMask[i];
            }
            bits = 8 * emLen - emBits;
            mask = 255 ^ 255 >> 8 - bits << 8 - bits;
            DB[0] = DB[0] & mask;
            for (i = 0; DB[i] === 0 && i < DB.length; i++)
              ;
            if (DB[i] != 1) {
              return false;
            }
            var salt = DB.slice(DB.length - sLen);
            var Mapostrophe = Buffer.alloc(8 + hLen + sLen);
            Mapostrophe.fill(0, 0, 8);
            mHash.copy(Mapostrophe, 8);
            salt.copy(Mapostrophe, 8 + mHash.length);
            var Hapostrophe = crypt.createHash(hash);
            Hapostrophe.update(Mapostrophe);
            Hapostrophe = Hapostrophe.digest();
            return H.toString("hex") === Hapostrophe.toString("hex");
          };
          return new Scheme(key, options);
        };
      }
    });
    var require_schemes = __commonJS2({
      "node_modules/node-rsa/src/schemes/schemes.js"(exports2, module22) {
        module22.exports = {
          pkcs1: require_pkcs1(),
          pkcs1_oaep: require_oaep(),
          pss: require_pss(),
          isEncryption: function(scheme) {
            return module22.exports[scheme] && module22.exports[scheme].isEncryption;
          },
          isSignature: function(scheme) {
            return module22.exports[scheme] && module22.exports[scheme].isSignature;
          }
        };
      }
    });
    var require_js = __commonJS2({
      "node_modules/node-rsa/src/encryptEngines/js.js"(exports2, module22) {
        var BigInteger = require_jsbn();
        var schemes = require_schemes();
        module22.exports = function(keyPair, options) {
          var pkcs1Scheme = schemes.pkcs1.makeScheme(keyPair, options);
          return {
            encrypt: function(buffer, usePrivate) {
              var m, c;
              if (usePrivate) {
                m = new BigInteger(pkcs1Scheme.encPad(buffer, { type: 1 }));
                c = keyPair.$doPrivate(m);
              } else {
                m = new BigInteger(keyPair.encryptionScheme.encPad(buffer));
                c = keyPair.$doPublic(m);
              }
              return c.toBuffer(keyPair.encryptedDataLength);
            },
            decrypt: function(buffer, usePublic) {
              var m, c = new BigInteger(buffer);
              if (usePublic) {
                m = keyPair.$doPublic(c);
                return pkcs1Scheme.encUnPad(m.toBuffer(keyPair.encryptedDataLength), { type: 1 });
              } else {
                m = keyPair.$doPrivate(c);
                return keyPair.encryptionScheme.encUnPad(m.toBuffer(keyPair.encryptedDataLength));
              }
            }
          };
        };
      }
    });
    var require_io = __commonJS2({
      "node_modules/node-rsa/src/encryptEngines/io.js"(exports2, module22) {
        var crypto4 = require("crypto");
        var constants = require("constants");
        var schemes = require_schemes();
        module22.exports = function(keyPair, options) {
          var pkcs1Scheme = schemes.pkcs1.makeScheme(keyPair, options);
          return {
            encrypt: function(buffer, usePrivate) {
              var padding;
              if (usePrivate) {
                padding = constants.RSA_PKCS1_PADDING;
                if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {
                  padding = options.encryptionSchemeOptions.padding;
                }
                return crypto4.privateEncrypt({
                  key: options.rsaUtils.exportKey("private"),
                  padding
                }, buffer);
              } else {
                padding = constants.RSA_PKCS1_OAEP_PADDING;
                if (options.encryptionScheme === "pkcs1") {
                  padding = constants.RSA_PKCS1_PADDING;
                }
                if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {
                  padding = options.encryptionSchemeOptions.padding;
                }
                var data = buffer;
                if (padding === constants.RSA_NO_PADDING) {
                  data = pkcs1Scheme.pkcs0pad(buffer);
                }
                return crypto4.publicEncrypt({
                  key: options.rsaUtils.exportKey("public"),
                  padding
                }, data);
              }
            },
            decrypt: function(buffer, usePublic) {
              var padding;
              if (usePublic) {
                padding = constants.RSA_PKCS1_PADDING;
                if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {
                  padding = options.encryptionSchemeOptions.padding;
                }
                return crypto4.publicDecrypt({
                  key: options.rsaUtils.exportKey("public"),
                  padding
                }, buffer);
              } else {
                padding = constants.RSA_PKCS1_OAEP_PADDING;
                if (options.encryptionScheme === "pkcs1") {
                  padding = constants.RSA_PKCS1_PADDING;
                }
                if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {
                  padding = options.encryptionSchemeOptions.padding;
                }
                var res = crypto4.privateDecrypt({
                  key: options.rsaUtils.exportKey("private"),
                  padding
                }, buffer);
                if (padding === constants.RSA_NO_PADDING) {
                  return pkcs1Scheme.pkcs0unpad(res);
                }
                return res;
              }
            }
          };
        };
      }
    });
    var require_node12 = __commonJS2({
      "node_modules/node-rsa/src/encryptEngines/node12.js"(exports2, module22) {
        var crypto4 = require("crypto");
        var constants = require("constants");
        var schemes = require_schemes();
        module22.exports = function(keyPair, options) {
          var jsEngine = require_js()(keyPair, options);
          var pkcs1Scheme = schemes.pkcs1.makeScheme(keyPair, options);
          return {
            encrypt: function(buffer, usePrivate) {
              if (usePrivate) {
                return jsEngine.encrypt(buffer, usePrivate);
              }
              var padding = constants.RSA_PKCS1_OAEP_PADDING;
              if (options.encryptionScheme === "pkcs1") {
                padding = constants.RSA_PKCS1_PADDING;
              }
              if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {
                padding = options.encryptionSchemeOptions.padding;
              }
              var data = buffer;
              if (padding === constants.RSA_NO_PADDING) {
                data = pkcs1Scheme.pkcs0pad(buffer);
              }
              return crypto4.publicEncrypt({
                key: options.rsaUtils.exportKey("public"),
                padding
              }, data);
            },
            decrypt: function(buffer, usePublic) {
              if (usePublic) {
                return jsEngine.decrypt(buffer, usePublic);
              }
              var padding = constants.RSA_PKCS1_OAEP_PADDING;
              if (options.encryptionScheme === "pkcs1") {
                padding = constants.RSA_PKCS1_PADDING;
              }
              if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {
                padding = options.encryptionSchemeOptions.padding;
              }
              var res = crypto4.privateDecrypt({
                key: options.rsaUtils.exportKey("private"),
                padding
              }, buffer);
              if (padding === constants.RSA_NO_PADDING) {
                return pkcs1Scheme.pkcs0unpad(res);
              }
              return res;
            }
          };
        };
      }
    });
    var require_encryptEngines = __commonJS2({
      "node_modules/node-rsa/src/encryptEngines/encryptEngines.js"(exports2, module22) {
        var crypt = require("crypto");
        module22.exports = {
          getEngine: function(keyPair, options) {
            var engine = require_js();
            if (options.environment === "node") {
              if (typeof crypt.publicEncrypt === "function" && typeof crypt.privateDecrypt === "function") {
                if (typeof crypt.privateEncrypt === "function" && typeof crypt.publicDecrypt === "function") {
                  engine = require_io();
                } else {
                  engine = require_node12();
                }
              }
            }
            return engine(keyPair, options);
          }
        };
      }
    });
    var require_rsa = __commonJS2({
      "node_modules/node-rsa/src/libs/rsa.js"(exports2, module22) {
        var _ = require_utils22()._;
        var crypt = require("crypto");
        var BigInteger = require_jsbn();
        var utils = require_utils22();
        var schemes = require_schemes();
        var encryptEngines = require_encryptEngines();
        exports2.BigInteger = BigInteger;
        module22.exports.Key = function() {
          function RSAKey() {
            this.n = null;
            this.e = 0;
            this.d = null;
            this.p = null;
            this.q = null;
            this.dmp1 = null;
            this.dmq1 = null;
            this.coeff = null;
          }
          RSAKey.prototype.setOptions = function(options) {
            var signingSchemeProvider = schemes[options.signingScheme];
            var encryptionSchemeProvider = schemes[options.encryptionScheme];
            if (signingSchemeProvider === encryptionSchemeProvider) {
              this.signingScheme = this.encryptionScheme = encryptionSchemeProvider.makeScheme(this, options);
            } else {
              this.encryptionScheme = encryptionSchemeProvider.makeScheme(this, options);
              this.signingScheme = signingSchemeProvider.makeScheme(this, options);
            }
            this.encryptEngine = encryptEngines.getEngine(this, options);
          };
          RSAKey.prototype.generate = function(B, E) {
            var qs = B >> 1;
            this.e = parseInt(E, 16);
            var ee = new BigInteger(E, 16);
            while (true) {
              while (true) {
                this.p = new BigInteger(B - qs, 1);
                if (this.p.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) === 0 && this.p.isProbablePrime(10))
                  break;
              }
              while (true) {
                this.q = new BigInteger(qs, 1);
                if (this.q.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) === 0 && this.q.isProbablePrime(10))
                  break;
              }
              if (this.p.compareTo(this.q) <= 0) {
                var t = this.p;
                this.p = this.q;
                this.q = t;
              }
              var p1 = this.p.subtract(BigInteger.ONE);
              var q1 = this.q.subtract(BigInteger.ONE);
              var phi = p1.multiply(q1);
              if (phi.gcd(ee).compareTo(BigInteger.ONE) === 0) {
                this.n = this.p.multiply(this.q);
                if (this.n.bitLength() < B) {
                  continue;
                }
                this.d = ee.modInverse(phi);
                this.dmp1 = this.d.mod(p1);
                this.dmq1 = this.d.mod(q1);
                this.coeff = this.q.modInverse(this.p);
                break;
              }
            }
            this.$$recalculateCache();
          };
          RSAKey.prototype.setPrivate = function(N, E, D, P, Q, DP, DQ, C) {
            if (N && E && D && N.length > 0 && (_.isNumber(E) || E.length > 0) && D.length > 0) {
              this.n = new BigInteger(N);
              this.e = _.isNumber(E) ? E : utils.get32IntFromBuffer(E, 0);
              this.d = new BigInteger(D);
              if (P && Q && DP && DQ && C) {
                this.p = new BigInteger(P);
                this.q = new BigInteger(Q);
                this.dmp1 = new BigInteger(DP);
                this.dmq1 = new BigInteger(DQ);
                this.coeff = new BigInteger(C);
              } else {
              }
              this.$$recalculateCache();
            } else {
              throw Error("Invalid RSA private key");
            }
          };
          RSAKey.prototype.setPublic = function(N, E) {
            if (N && E && N.length > 0 && (_.isNumber(E) || E.length > 0)) {
              this.n = new BigInteger(N);
              this.e = _.isNumber(E) ? E : utils.get32IntFromBuffer(E, 0);
              this.$$recalculateCache();
            } else {
              throw Error("Invalid RSA public key");
            }
          };
          RSAKey.prototype.$doPrivate = function(x) {
            if (this.p || this.q) {
              return x.modPow(this.d, this.n);
            }
            var xp = x.mod(this.p).modPow(this.dmp1, this.p);
            var xq = x.mod(this.q).modPow(this.dmq1, this.q);
            while (xp.compareTo(xq) < 0) {
              xp = xp.add(this.p);
            }
            return xp.subtract(xq).multiply(this.coeff).mod(this.p).multiply(this.q).add(xq);
          };
          RSAKey.prototype.$doPublic = function(x) {
            return x.modPowInt(this.e, this.n);
          };
          RSAKey.prototype.encrypt = function(buffer, usePrivate) {
            var buffers = [];
            var results = [];
            var bufferSize = buffer.length;
            var buffersCount = Math.ceil(bufferSize / this.maxMessageLength) || 1;
            var dividedSize = Math.ceil(bufferSize / buffersCount || 1);
            if (buffersCount == 1) {
              buffers.push(buffer);
            } else {
              for (var bufNum = 0; bufNum < buffersCount; bufNum++) {
                buffers.push(buffer.slice(bufNum * dividedSize, (bufNum + 1) * dividedSize));
              }
            }
            for (var i = 0; i < buffers.length; i++) {
              results.push(this.encryptEngine.encrypt(buffers[i], usePrivate));
            }
            return Buffer.concat(results);
          };
          RSAKey.prototype.decrypt = function(buffer, usePublic) {
            if (buffer.length % this.encryptedDataLength > 0) {
              throw Error("Incorrect data or key");
            }
            var result = [];
            var offset = 0;
            var length = 0;
            var buffersCount = buffer.length / this.encryptedDataLength;
            for (var i = 0; i < buffersCount; i++) {
              offset = i * this.encryptedDataLength;
              length = offset + this.encryptedDataLength;
              result.push(this.encryptEngine.decrypt(buffer.slice(offset, Math.min(length, buffer.length)), usePublic));
            }
            return Buffer.concat(result);
          };
          RSAKey.prototype.sign = function(buffer) {
            return this.signingScheme.sign.apply(this.signingScheme, arguments);
          };
          RSAKey.prototype.verify = function(buffer, signature, signature_encoding) {
            return this.signingScheme.verify.apply(this.signingScheme, arguments);
          };
          RSAKey.prototype.isPrivate = function() {
            return this.n && this.e && this.d && true || false;
          };
          RSAKey.prototype.isPublic = function(strict) {
            return this.n && this.e && !(strict && this.d) || false;
          };
          Object.defineProperty(RSAKey.prototype, "keySize", {
            get: function() {
              return this.cache.keyBitLength;
            }
          });
          Object.defineProperty(RSAKey.prototype, "encryptedDataLength", {
            get: function() {
              return this.cache.keyByteLength;
            }
          });
          Object.defineProperty(RSAKey.prototype, "maxMessageLength", {
            get: function() {
              return this.encryptionScheme.maxMessageLength();
            }
          });
          RSAKey.prototype.$$recalculateCache = function() {
            this.cache = this.cache || {};
            this.cache.keyBitLength = this.n.bitLength();
            this.cache.keyByteLength = this.cache.keyBitLength + 6 >> 3;
          };
          return RSAKey;
        }();
      }
    });
    var require_errors2 = __commonJS2({
      "node_modules/asn1/lib/ber/errors.js"(exports2, module22) {
        module22.exports = {
          newInvalidAsn1Error: function(msg) {
            var e = new Error();
            e.name = "InvalidAsn1Error";
            e.message = msg || "";
            return e;
          }
        };
      }
    });
    var require_types = __commonJS2({
      "node_modules/asn1/lib/ber/types.js"(exports2, module22) {
        module22.exports = {
          EOC: 0,
          Boolean: 1,
          Integer: 2,
          BitString: 3,
          OctetString: 4,
          Null: 5,
          OID: 6,
          ObjectDescriptor: 7,
          External: 8,
          Real: 9,
          Enumeration: 10,
          PDV: 11,
          Utf8String: 12,
          RelativeOID: 13,
          Sequence: 16,
          Set: 17,
          NumericString: 18,
          PrintableString: 19,
          T61String: 20,
          VideotexString: 21,
          IA5String: 22,
          UTCTime: 23,
          GeneralizedTime: 24,
          GraphicString: 25,
          VisibleString: 26,
          GeneralString: 28,
          UniversalString: 29,
          CharacterString: 30,
          BMPString: 31,
          Constructor: 32,
          Context: 128
        };
      }
    });
    var require_safer = __commonJS2({
      "node_modules/safer-buffer/safer.js"(exports2, module22) {
        "use strict";
        var buffer = require("buffer");
        var Buffer2 = buffer.Buffer;
        var safer = {};
        var key;
        for (key in buffer) {
          if (!buffer.hasOwnProperty(key))
            continue;
          if (key === "SlowBuffer" || key === "Buffer")
            continue;
          safer[key] = buffer[key];
        }
        var Safer = safer.Buffer = {};
        for (key in Buffer2) {
          if (!Buffer2.hasOwnProperty(key))
            continue;
          if (key === "allocUnsafe" || key === "allocUnsafeSlow")
            continue;
          Safer[key] = Buffer2[key];
        }
        safer.Buffer.prototype = Buffer2.prototype;
        if (!Safer.from || Safer.from === Uint8Array.from) {
          Safer.from = function(value, encodingOrOffset, length) {
            if (typeof value === "number") {
              throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
            }
            if (value && typeof value.length === "undefined") {
              throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
            }
            return Buffer2(value, encodingOrOffset, length);
          };
        }
        if (!Safer.alloc) {
          Safer.alloc = function(size, fill, encoding) {
            if (typeof size !== "number") {
              throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
            }
            if (size < 0 || size >= 2 * (1 << 30)) {
              throw new RangeError('The value "' + size + '" is invalid for option "size"');
            }
            var buf = Buffer2(size);
            if (!fill || fill.length === 0) {
              buf.fill(0);
            } else if (typeof encoding === "string") {
              buf.fill(fill, encoding);
            } else {
              buf.fill(fill);
            }
            return buf;
          };
        }
        if (!safer.kStringMaxLength) {
          try {
            safer.kStringMaxLength = process.binding("buffer").kStringMaxLength;
          } catch (e) {
          }
        }
        if (!safer.constants) {
          safer.constants = {
            MAX_LENGTH: safer.kMaxLength
          };
          if (safer.kStringMaxLength) {
            safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
          }
        }
        module22.exports = safer;
      }
    });
    var require_reader = __commonJS2({
      "node_modules/asn1/lib/ber/reader.js"(exports2, module22) {
        var assert = require("assert");
        var Buffer2 = require_safer().Buffer;
        var ASN1 = require_types();
        var errors = require_errors2();
        var newInvalidAsn1Error = errors.newInvalidAsn1Error;
        function Reader(data) {
          if (!data || !Buffer2.isBuffer(data))
            throw new TypeError("data must be a node Buffer");
          this._buf = data;
          this._size = data.length;
          this._len = 0;
          this._offset = 0;
        }
        Object.defineProperty(Reader.prototype, "length", {
          enumerable: true,
          get: function() {
            return this._len;
          }
        });
        Object.defineProperty(Reader.prototype, "offset", {
          enumerable: true,
          get: function() {
            return this._offset;
          }
        });
        Object.defineProperty(Reader.prototype, "remain", {
          get: function() {
            return this._size - this._offset;
          }
        });
        Object.defineProperty(Reader.prototype, "buffer", {
          get: function() {
            return this._buf.slice(this._offset);
          }
        });
        Reader.prototype.readByte = function(peek) {
          if (this._size - this._offset < 1)
            return null;
          var b = this._buf[this._offset] & 255;
          if (!peek)
            this._offset += 1;
          return b;
        };
        Reader.prototype.peek = function() {
          return this.readByte(true);
        };
        Reader.prototype.readLength = function(offset) {
          if (offset === void 0)
            offset = this._offset;
          if (offset >= this._size)
            return null;
          var lenB = this._buf[offset++] & 255;
          if (lenB === null)
            return null;
          if ((lenB & 128) === 128) {
            lenB &= 127;
            if (lenB === 0)
              throw newInvalidAsn1Error("Indefinite length not supported");
            if (lenB > 4)
              throw newInvalidAsn1Error("encoding too long");
            if (this._size - offset < lenB)
              return null;
            this._len = 0;
            for (var i = 0; i < lenB; i++)
              this._len = (this._len << 8) + (this._buf[offset++] & 255);
          } else {
            this._len = lenB;
          }
          return offset;
        };
        Reader.prototype.readSequence = function(tag) {
          var seq = this.peek();
          if (seq === null)
            return null;
          if (tag !== void 0 && tag !== seq)
            throw newInvalidAsn1Error("Expected 0x" + tag.toString(16) + ": got 0x" + seq.toString(16));
          var o = this.readLength(this._offset + 1);
          if (o === null)
            return null;
          this._offset = o;
          return seq;
        };
        Reader.prototype.readInt = function() {
          return this._readTag(ASN1.Integer);
        };
        Reader.prototype.readBoolean = function() {
          return this._readTag(ASN1.Boolean) === 0 ? false : true;
        };
        Reader.prototype.readEnumeration = function() {
          return this._readTag(ASN1.Enumeration);
        };
        Reader.prototype.readString = function(tag, retbuf) {
          if (!tag)
            tag = ASN1.OctetString;
          var b = this.peek();
          if (b === null)
            return null;
          if (b !== tag)
            throw newInvalidAsn1Error("Expected 0x" + tag.toString(16) + ": got 0x" + b.toString(16));
          var o = this.readLength(this._offset + 1);
          if (o === null)
            return null;
          if (this.length > this._size - o)
            return null;
          this._offset = o;
          if (this.length === 0)
            return retbuf ? Buffer2.alloc(0) : "";
          var str = this._buf.slice(this._offset, this._offset + this.length);
          this._offset += this.length;
          return retbuf ? str : str.toString("utf8");
        };
        Reader.prototype.readOID = function(tag) {
          if (!tag)
            tag = ASN1.OID;
          var b = this.readString(tag, true);
          if (b === null)
            return null;
          var values = [];
          var value = 0;
          for (var i = 0; i < b.length; i++) {
            var byte = b[i] & 255;
            value <<= 7;
            value += byte & 127;
            if ((byte & 128) === 0) {
              values.push(value);
              value = 0;
            }
          }
          value = values.shift();
          values.unshift(value % 40);
          values.unshift(value / 40 >> 0);
          return values.join(".");
        };
        Reader.prototype._readTag = function(tag) {
          assert.ok(tag !== void 0);
          var b = this.peek();
          if (b === null)
            return null;
          if (b !== tag)
            throw newInvalidAsn1Error("Expected 0x" + tag.toString(16) + ": got 0x" + b.toString(16));
          var o = this.readLength(this._offset + 1);
          if (o === null)
            return null;
          if (this.length > 4)
            throw newInvalidAsn1Error("Integer too long: " + this.length);
          if (this.length > this._size - o)
            return null;
          this._offset = o;
          var fb = this._buf[this._offset];
          var value = 0;
          for (var i = 0; i < this.length; i++) {
            value <<= 8;
            value |= this._buf[this._offset++] & 255;
          }
          if ((fb & 128) === 128 && i !== 4)
            value -= 1 << i * 8;
          return value >> 0;
        };
        module22.exports = Reader;
      }
    });
    var require_writer = __commonJS2({
      "node_modules/asn1/lib/ber/writer.js"(exports2, module22) {
        var assert = require("assert");
        var Buffer2 = require_safer().Buffer;
        var ASN1 = require_types();
        var errors = require_errors2();
        var newInvalidAsn1Error = errors.newInvalidAsn1Error;
        var DEFAULT_OPTS = {
          size: 1024,
          growthFactor: 8
        };
        function merge(from, to) {
          assert.ok(from);
          assert.equal(typeof from, "object");
          assert.ok(to);
          assert.equal(typeof to, "object");
          var keys = Object.getOwnPropertyNames(from);
          keys.forEach(function(key) {
            if (to[key])
              return;
            var value = Object.getOwnPropertyDescriptor(from, key);
            Object.defineProperty(to, key, value);
          });
          return to;
        }
        function Writer(options) {
          options = merge(DEFAULT_OPTS, options || {});
          this._buf = Buffer2.alloc(options.size || 1024);
          this._size = this._buf.length;
          this._offset = 0;
          this._options = options;
          this._seq = [];
        }
        Object.defineProperty(Writer.prototype, "buffer", {
          get: function() {
            if (this._seq.length)
              throw newInvalidAsn1Error(this._seq.length + " unended sequence(s)");
            return this._buf.slice(0, this._offset);
          }
        });
        Writer.prototype.writeByte = function(b) {
          if (typeof b !== "number")
            throw new TypeError("argument must be a Number");
          this._ensure(1);
          this._buf[this._offset++] = b;
        };
        Writer.prototype.writeInt = function(i, tag) {
          if (typeof i !== "number")
            throw new TypeError("argument must be a Number");
          if (typeof tag !== "number")
            tag = ASN1.Integer;
          var sz = 4;
          while (((i & 4286578688) === 0 || (i & 4286578688) === 4286578688 >> 0) && sz > 1) {
            sz--;
            i <<= 8;
          }
          if (sz > 4)
            throw newInvalidAsn1Error("BER ints cannot be > 0xffffffff");
          this._ensure(2 + sz);
          this._buf[this._offset++] = tag;
          this._buf[this._offset++] = sz;
          while (sz-- > 0) {
            this._buf[this._offset++] = (i & 4278190080) >>> 24;
            i <<= 8;
          }
        };
        Writer.prototype.writeNull = function() {
          this.writeByte(ASN1.Null);
          this.writeByte(0);
        };
        Writer.prototype.writeEnumeration = function(i, tag) {
          if (typeof i !== "number")
            throw new TypeError("argument must be a Number");
          if (typeof tag !== "number")
            tag = ASN1.Enumeration;
          return this.writeInt(i, tag);
        };
        Writer.prototype.writeBoolean = function(b, tag) {
          if (typeof b !== "boolean")
            throw new TypeError("argument must be a Boolean");
          if (typeof tag !== "number")
            tag = ASN1.Boolean;
          this._ensure(3);
          this._buf[this._offset++] = tag;
          this._buf[this._offset++] = 1;
          this._buf[this._offset++] = b ? 255 : 0;
        };
        Writer.prototype.writeString = function(s, tag) {
          if (typeof s !== "string")
            throw new TypeError("argument must be a string (was: " + typeof s + ")");
          if (typeof tag !== "number")
            tag = ASN1.OctetString;
          var len = Buffer2.byteLength(s);
          this.writeByte(tag);
          this.writeLength(len);
          if (len) {
            this._ensure(len);
            this._buf.write(s, this._offset);
            this._offset += len;
          }
        };
        Writer.prototype.writeBuffer = function(buf, tag) {
          if (typeof tag !== "number")
            throw new TypeError("tag must be a number");
          if (!Buffer2.isBuffer(buf))
            throw new TypeError("argument must be a buffer");
          this.writeByte(tag);
          this.writeLength(buf.length);
          this._ensure(buf.length);
          buf.copy(this._buf, this._offset, 0, buf.length);
          this._offset += buf.length;
        };
        Writer.prototype.writeStringArray = function(strings) {
          if (!strings instanceof Array)
            throw new TypeError("argument must be an Array[String]");
          var self = this;
          strings.forEach(function(s) {
            self.writeString(s);
          });
        };
        Writer.prototype.writeOID = function(s, tag) {
          if (typeof s !== "string")
            throw new TypeError("argument must be a string");
          if (typeof tag !== "number")
            tag = ASN1.OID;
          if (!/^([0-9]+\.){3,}[0-9]+$/.test(s))
            throw new Error("argument is not a valid OID string");
          function encodeOctet(bytes2, octet) {
            if (octet < 128) {
              bytes2.push(octet);
            } else if (octet < 16384) {
              bytes2.push(octet >>> 7 | 128);
              bytes2.push(octet & 127);
            } else if (octet < 2097152) {
              bytes2.push(octet >>> 14 | 128);
              bytes2.push((octet >>> 7 | 128) & 255);
              bytes2.push(octet & 127);
            } else if (octet < 268435456) {
              bytes2.push(octet >>> 21 | 128);
              bytes2.push((octet >>> 14 | 128) & 255);
              bytes2.push((octet >>> 7 | 128) & 255);
              bytes2.push(octet & 127);
            } else {
              bytes2.push((octet >>> 28 | 128) & 255);
              bytes2.push((octet >>> 21 | 128) & 255);
              bytes2.push((octet >>> 14 | 128) & 255);
              bytes2.push((octet >>> 7 | 128) & 255);
              bytes2.push(octet & 127);
            }
          }
          var tmp = s.split(".");
          var bytes = [];
          bytes.push(parseInt(tmp[0], 10) * 40 + parseInt(tmp[1], 10));
          tmp.slice(2).forEach(function(b) {
            encodeOctet(bytes, parseInt(b, 10));
          });
          var self = this;
          this._ensure(2 + bytes.length);
          this.writeByte(tag);
          this.writeLength(bytes.length);
          bytes.forEach(function(b) {
            self.writeByte(b);
          });
        };
        Writer.prototype.writeLength = function(len) {
          if (typeof len !== "number")
            throw new TypeError("argument must be a Number");
          this._ensure(4);
          if (len <= 127) {
            this._buf[this._offset++] = len;
          } else if (len <= 255) {
            this._buf[this._offset++] = 129;
            this._buf[this._offset++] = len;
          } else if (len <= 65535) {
            this._buf[this._offset++] = 130;
            this._buf[this._offset++] = len >> 8;
            this._buf[this._offset++] = len;
          } else if (len <= 16777215) {
            this._buf[this._offset++] = 131;
            this._buf[this._offset++] = len >> 16;
            this._buf[this._offset++] = len >> 8;
            this._buf[this._offset++] = len;
          } else {
            throw newInvalidAsn1Error("Length too long (> 4 bytes)");
          }
        };
        Writer.prototype.startSequence = function(tag) {
          if (typeof tag !== "number")
            tag = ASN1.Sequence | ASN1.Constructor;
          this.writeByte(tag);
          this._seq.push(this._offset);
          this._ensure(3);
          this._offset += 3;
        };
        Writer.prototype.endSequence = function() {
          var seq = this._seq.pop();
          var start = seq + 3;
          var len = this._offset - start;
          if (len <= 127) {
            this._shift(start, len, -2);
            this._buf[seq] = len;
          } else if (len <= 255) {
            this._shift(start, len, -1);
            this._buf[seq] = 129;
            this._buf[seq + 1] = len;
          } else if (len <= 65535) {
            this._buf[seq] = 130;
            this._buf[seq + 1] = len >> 8;
            this._buf[seq + 2] = len;
          } else if (len <= 16777215) {
            this._shift(start, len, 1);
            this._buf[seq] = 131;
            this._buf[seq + 1] = len >> 16;
            this._buf[seq + 2] = len >> 8;
            this._buf[seq + 3] = len;
          } else {
            throw newInvalidAsn1Error("Sequence too long");
          }
        };
        Writer.prototype._shift = function(start, len, shift) {
          assert.ok(start !== void 0);
          assert.ok(len !== void 0);
          assert.ok(shift);
          this._buf.copy(this._buf, start + shift, start, start + len);
          this._offset += shift;
        };
        Writer.prototype._ensure = function(len) {
          assert.ok(len);
          if (this._size - this._offset < len) {
            var sz = this._size * this._options.growthFactor;
            if (sz - this._offset < len)
              sz += len;
            var buf = Buffer2.alloc(sz);
            this._buf.copy(buf, 0, 0, this._offset);
            this._buf = buf;
            this._size = sz;
          }
        };
        module22.exports = Writer;
      }
    });
    var require_ber = __commonJS2({
      "node_modules/asn1/lib/ber/index.js"(exports2, module22) {
        var errors = require_errors2();
        var types = require_types();
        var Reader = require_reader();
        var Writer = require_writer();
        module22.exports = {
          Reader,
          Writer
        };
        for (t in types) {
          if (types.hasOwnProperty(t))
            module22.exports[t] = types[t];
        }
        var t;
        for (e in errors) {
          if (errors.hasOwnProperty(e))
            module22.exports[e] = errors[e];
        }
        var e;
      }
    });
    var require_lib3 = __commonJS2({
      "node_modules/asn1/lib/index.js"(exports2, module22) {
        var Ber = require_ber();
        module22.exports = {
          Ber,
          BerReader: Ber.Reader,
          BerWriter: Ber.Writer
        };
      }
    });
    var require_pkcs12 = __commonJS2({
      "node_modules/node-rsa/src/formats/pkcs1.js"(exports2, module22) {
        var ber = require_lib3().Ber;
        var _ = require_utils22()._;
        var utils = require_utils22();
        var PRIVATE_OPENING_BOUNDARY = "-----BEGIN RSA PRIVATE KEY-----";
        var PRIVATE_CLOSING_BOUNDARY = "-----END RSA PRIVATE KEY-----";
        var PUBLIC_OPENING_BOUNDARY = "-----BEGIN RSA PUBLIC KEY-----";
        var PUBLIC_CLOSING_BOUNDARY = "-----END RSA PUBLIC KEY-----";
        module22.exports = {
          privateExport: function(key, options) {
            options = options || {};
            var n = key.n.toBuffer();
            var d = key.d.toBuffer();
            var p = key.p.toBuffer();
            var q = key.q.toBuffer();
            var dmp1 = key.dmp1.toBuffer();
            var dmq1 = key.dmq1.toBuffer();
            var coeff = key.coeff.toBuffer();
            var length = n.length + d.length + p.length + q.length + dmp1.length + dmq1.length + coeff.length + 512;
            var writer = new ber.Writer({ size: length });
            writer.startSequence();
            writer.writeInt(0);
            writer.writeBuffer(n, 2);
            writer.writeInt(key.e);
            writer.writeBuffer(d, 2);
            writer.writeBuffer(p, 2);
            writer.writeBuffer(q, 2);
            writer.writeBuffer(dmp1, 2);
            writer.writeBuffer(dmq1, 2);
            writer.writeBuffer(coeff, 2);
            writer.endSequence();
            if (options.type === "der") {
              return writer.buffer;
            } else {
              return PRIVATE_OPENING_BOUNDARY + "\n" + utils.linebrk(writer.buffer.toString("base64"), 64) + "\n" + PRIVATE_CLOSING_BOUNDARY;
            }
          },
          privateImport: function(key, data, options) {
            options = options || {};
            var buffer;
            if (options.type !== "der") {
              if (Buffer.isBuffer(data)) {
                data = data.toString("utf8");
              }
              if (_.isString(data)) {
                var pem = utils.trimSurroundingText(data, PRIVATE_OPENING_BOUNDARY, PRIVATE_CLOSING_BOUNDARY).replace(/\s+|\n\r|\n|\r$/gm, "");
                buffer = Buffer.from(pem, "base64");
              } else {
                throw Error("Unsupported key format");
              }
            } else if (Buffer.isBuffer(data)) {
              buffer = data;
            } else {
              throw Error("Unsupported key format");
            }
            var reader = new ber.Reader(buffer);
            reader.readSequence();
            reader.readString(2, true);
            key.setPrivate(reader.readString(2, true), reader.readString(2, true), reader.readString(2, true), reader.readString(2, true), reader.readString(2, true), reader.readString(2, true), reader.readString(2, true), reader.readString(2, true));
          },
          publicExport: function(key, options) {
            options = options || {};
            var n = key.n.toBuffer();
            var length = n.length + 512;
            var bodyWriter = new ber.Writer({ size: length });
            bodyWriter.startSequence();
            bodyWriter.writeBuffer(n, 2);
            bodyWriter.writeInt(key.e);
            bodyWriter.endSequence();
            if (options.type === "der") {
              return bodyWriter.buffer;
            } else {
              return PUBLIC_OPENING_BOUNDARY + "\n" + utils.linebrk(bodyWriter.buffer.toString("base64"), 64) + "\n" + PUBLIC_CLOSING_BOUNDARY;
            }
          },
          publicImport: function(key, data, options) {
            options = options || {};
            var buffer;
            if (options.type !== "der") {
              if (Buffer.isBuffer(data)) {
                data = data.toString("utf8");
              }
              if (_.isString(data)) {
                var pem = utils.trimSurroundingText(data, PUBLIC_OPENING_BOUNDARY, PUBLIC_CLOSING_BOUNDARY).replace(/\s+|\n\r|\n|\r$/gm, "");
                buffer = Buffer.from(pem, "base64");
              }
            } else if (Buffer.isBuffer(data)) {
              buffer = data;
            } else {
              throw Error("Unsupported key format");
            }
            var body = new ber.Reader(buffer);
            body.readSequence();
            key.setPublic(body.readString(2, true), body.readString(2, true));
          },
          autoImport: function(key, data) {
            if (/^[\S\s]*-----BEGIN RSA PRIVATE KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END RSA PRIVATE KEY-----[\S\s]*$/g.test(data)) {
              module22.exports.privateImport(key, data);
              return true;
            }
            if (/^[\S\s]*-----BEGIN RSA PUBLIC KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END RSA PUBLIC KEY-----[\S\s]*$/g.test(data)) {
              module22.exports.publicImport(key, data);
              return true;
            }
            return false;
          }
        };
      }
    });
    var require_pkcs8 = __commonJS2({
      "node_modules/node-rsa/src/formats/pkcs8.js"(exports2, module22) {
        var ber = require_lib3().Ber;
        var _ = require_utils22()._;
        var PUBLIC_RSA_OID = "1.2.840.113549.1.1.1";
        var utils = require_utils22();
        var PRIVATE_OPENING_BOUNDARY = "-----BEGIN PRIVATE KEY-----";
        var PRIVATE_CLOSING_BOUNDARY = "-----END PRIVATE KEY-----";
        var PUBLIC_OPENING_BOUNDARY = "-----BEGIN PUBLIC KEY-----";
        var PUBLIC_CLOSING_BOUNDARY = "-----END PUBLIC KEY-----";
        module22.exports = {
          privateExport: function(key, options) {
            options = options || {};
            var n = key.n.toBuffer();
            var d = key.d.toBuffer();
            var p = key.p.toBuffer();
            var q = key.q.toBuffer();
            var dmp1 = key.dmp1.toBuffer();
            var dmq1 = key.dmq1.toBuffer();
            var coeff = key.coeff.toBuffer();
            var length = n.length + d.length + p.length + q.length + dmp1.length + dmq1.length + coeff.length + 512;
            var bodyWriter = new ber.Writer({ size: length });
            bodyWriter.startSequence();
            bodyWriter.writeInt(0);
            bodyWriter.writeBuffer(n, 2);
            bodyWriter.writeInt(key.e);
            bodyWriter.writeBuffer(d, 2);
            bodyWriter.writeBuffer(p, 2);
            bodyWriter.writeBuffer(q, 2);
            bodyWriter.writeBuffer(dmp1, 2);
            bodyWriter.writeBuffer(dmq1, 2);
            bodyWriter.writeBuffer(coeff, 2);
            bodyWriter.endSequence();
            var writer = new ber.Writer({ size: length });
            writer.startSequence();
            writer.writeInt(0);
            writer.startSequence();
            writer.writeOID(PUBLIC_RSA_OID);
            writer.writeNull();
            writer.endSequence();
            writer.writeBuffer(bodyWriter.buffer, 4);
            writer.endSequence();
            if (options.type === "der") {
              return writer.buffer;
            } else {
              return PRIVATE_OPENING_BOUNDARY + "\n" + utils.linebrk(writer.buffer.toString("base64"), 64) + "\n" + PRIVATE_CLOSING_BOUNDARY;
            }
          },
          privateImport: function(key, data, options) {
            options = options || {};
            var buffer;
            if (options.type !== "der") {
              if (Buffer.isBuffer(data)) {
                data = data.toString("utf8");
              }
              if (_.isString(data)) {
                var pem = utils.trimSurroundingText(data, PRIVATE_OPENING_BOUNDARY, PRIVATE_CLOSING_BOUNDARY).replace("-----END PRIVATE KEY-----", "").replace(/\s+|\n\r|\n|\r$/gm, "");
                buffer = Buffer.from(pem, "base64");
              } else {
                throw Error("Unsupported key format");
              }
            } else if (Buffer.isBuffer(data)) {
              buffer = data;
            } else {
              throw Error("Unsupported key format");
            }
            var reader = new ber.Reader(buffer);
            reader.readSequence();
            reader.readInt(0);
            var header = new ber.Reader(reader.readString(48, true));
            if (header.readOID(6, true) !== PUBLIC_RSA_OID) {
              throw Error("Invalid Public key format");
            }
            var body = new ber.Reader(reader.readString(4, true));
            body.readSequence();
            body.readString(2, true);
            key.setPrivate(body.readString(2, true), body.readString(2, true), body.readString(2, true), body.readString(2, true), body.readString(2, true), body.readString(2, true), body.readString(2, true), body.readString(2, true));
          },
          publicExport: function(key, options) {
            options = options || {};
            var n = key.n.toBuffer();
            var length = n.length + 512;
            var bodyWriter = new ber.Writer({ size: length });
            bodyWriter.writeByte(0);
            bodyWriter.startSequence();
            bodyWriter.writeBuffer(n, 2);
            bodyWriter.writeInt(key.e);
            bodyWriter.endSequence();
            var writer = new ber.Writer({ size: length });
            writer.startSequence();
            writer.startSequence();
            writer.writeOID(PUBLIC_RSA_OID);
            writer.writeNull();
            writer.endSequence();
            writer.writeBuffer(bodyWriter.buffer, 3);
            writer.endSequence();
            if (options.type === "der") {
              return writer.buffer;
            } else {
              return PUBLIC_OPENING_BOUNDARY + "\n" + utils.linebrk(writer.buffer.toString("base64"), 64) + "\n" + PUBLIC_CLOSING_BOUNDARY;
            }
          },
          publicImport: function(key, data, options) {
            options = options || {};
            var buffer;
            if (options.type !== "der") {
              if (Buffer.isBuffer(data)) {
                data = data.toString("utf8");
              }
              if (_.isString(data)) {
                var pem = utils.trimSurroundingText(data, PUBLIC_OPENING_BOUNDARY, PUBLIC_CLOSING_BOUNDARY).replace(/\s+|\n\r|\n|\r$/gm, "");
                buffer = Buffer.from(pem, "base64");
              }
            } else if (Buffer.isBuffer(data)) {
              buffer = data;
            } else {
              throw Error("Unsupported key format");
            }
            var reader = new ber.Reader(buffer);
            reader.readSequence();
            var header = new ber.Reader(reader.readString(48, true));
            if (header.readOID(6, true) !== PUBLIC_RSA_OID) {
              throw Error("Invalid Public key format");
            }
            var body = new ber.Reader(reader.readString(3, true));
            body.readByte();
            body.readSequence();
            key.setPublic(body.readString(2, true), body.readString(2, true));
          },
          autoImport: function(key, data) {
            if (/^[\S\s]*-----BEGIN PRIVATE KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END PRIVATE KEY-----[\S\s]*$/g.test(data)) {
              module22.exports.privateImport(key, data);
              return true;
            }
            if (/^[\S\s]*-----BEGIN PUBLIC KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END PUBLIC KEY-----[\S\s]*$/g.test(data)) {
              module22.exports.publicImport(key, data);
              return true;
            }
            return false;
          }
        };
      }
    });
    var require_components = __commonJS2({
      "node_modules/node-rsa/src/formats/components.js"(exports2, module22) {
        var _ = require_utils22()._;
        var utils = require_utils22();
        module22.exports = {
          privateExport: function(key, options) {
            return {
              n: key.n.toBuffer(),
              e: key.e,
              d: key.d.toBuffer(),
              p: key.p.toBuffer(),
              q: key.q.toBuffer(),
              dmp1: key.dmp1.toBuffer(),
              dmq1: key.dmq1.toBuffer(),
              coeff: key.coeff.toBuffer()
            };
          },
          privateImport: function(key, data, options) {
            if (data.n && data.e && data.d && data.p && data.q && data.dmp1 && data.dmq1 && data.coeff) {
              key.setPrivate(data.n, data.e, data.d, data.p, data.q, data.dmp1, data.dmq1, data.coeff);
            } else {
              throw Error("Invalid key data");
            }
          },
          publicExport: function(key, options) {
            return {
              n: key.n.toBuffer(),
              e: key.e
            };
          },
          publicImport: function(key, data, options) {
            if (data.n && data.e) {
              key.setPublic(data.n, data.e);
            } else {
              throw Error("Invalid key data");
            }
          },
          autoImport: function(key, data) {
            if (data.n && data.e) {
              if (data.d && data.p && data.q && data.dmp1 && data.dmq1 && data.coeff) {
                module22.exports.privateImport(key, data);
                return true;
              } else {
                module22.exports.publicImport(key, data);
                return true;
              }
            }
            return false;
          }
        };
      }
    });
    var require_openssh = __commonJS2({
      "node_modules/node-rsa/src/formats/openssh.js"(exports2, module22) {
        var _ = require_utils22()._;
        var utils = require_utils22();
        var BigInteger = require_jsbn();
        var PRIVATE_OPENING_BOUNDARY = "-----BEGIN OPENSSH PRIVATE KEY-----";
        var PRIVATE_CLOSING_BOUNDARY = "-----END OPENSSH PRIVATE KEY-----";
        module22.exports = {
          privateExport: function(key, options) {
            const nbuf = key.n.toBuffer();
            let ebuf = Buffer.alloc(4);
            ebuf.writeUInt32BE(key.e, 0);
            while (ebuf[0] === 0)
              ebuf = ebuf.slice(1);
            const dbuf = key.d.toBuffer();
            const coeffbuf = key.coeff.toBuffer();
            const pbuf = key.p.toBuffer();
            const qbuf = key.q.toBuffer();
            let commentbuf;
            if (typeof key.sshcomment !== "undefined") {
              commentbuf = Buffer.from(key.sshcomment);
            } else {
              commentbuf = Buffer.from([]);
            }
            const pubkeyLength = 11 + 4 + ebuf.byteLength + 4 + nbuf.byteLength;
            const privateKeyLength = 8 + 11 + 4 + nbuf.byteLength + 4 + ebuf.byteLength + 4 + dbuf.byteLength + 4 + coeffbuf.byteLength + 4 + pbuf.byteLength + 4 + qbuf.byteLength + 4 + commentbuf.byteLength;
            let length = 15 + 16 + 4 + 4 + 4 + pubkeyLength + 4 + privateKeyLength;
            const paddingLength = Math.ceil(privateKeyLength / 8) * 8 - privateKeyLength;
            length += paddingLength;
            const buf = Buffer.alloc(length);
            const writer = { buf, off: 0 };
            buf.write("openssh-key-v1", "utf8");
            buf.writeUInt8(0, 14);
            writer.off += 15;
            writeOpenSSHKeyString(writer, Buffer.from("none"));
            writeOpenSSHKeyString(writer, Buffer.from("none"));
            writeOpenSSHKeyString(writer, Buffer.from(""));
            writer.off = writer.buf.writeUInt32BE(1, writer.off);
            writer.off = writer.buf.writeUInt32BE(pubkeyLength, writer.off);
            writeOpenSSHKeyString(writer, Buffer.from("ssh-rsa"));
            writeOpenSSHKeyString(writer, ebuf);
            writeOpenSSHKeyString(writer, nbuf);
            writer.off = writer.buf.writeUInt32BE(length - 47 - pubkeyLength, writer.off);
            writer.off += 8;
            writeOpenSSHKeyString(writer, Buffer.from("ssh-rsa"));
            writeOpenSSHKeyString(writer, nbuf);
            writeOpenSSHKeyString(writer, ebuf);
            writeOpenSSHKeyString(writer, dbuf);
            writeOpenSSHKeyString(writer, coeffbuf);
            writeOpenSSHKeyString(writer, pbuf);
            writeOpenSSHKeyString(writer, qbuf);
            writeOpenSSHKeyString(writer, commentbuf);
            let pad = 1;
            while (writer.off < length) {
              writer.off = writer.buf.writeUInt8(pad++, writer.off);
            }
            if (options.type === "der") {
              return writer.buf;
            } else {
              return PRIVATE_OPENING_BOUNDARY + "\n" + utils.linebrk(buf.toString("base64"), 70) + "\n" + PRIVATE_CLOSING_BOUNDARY + "\n";
            }
          },
          privateImport: function(key, data, options) {
            options = options || {};
            var buffer;
            if (options.type !== "der") {
              if (Buffer.isBuffer(data)) {
                data = data.toString("utf8");
              }
              if (_.isString(data)) {
                var pem = utils.trimSurroundingText(data, PRIVATE_OPENING_BOUNDARY, PRIVATE_CLOSING_BOUNDARY).replace(/\s+|\n\r|\n|\r$/gm, "");
                buffer = Buffer.from(pem, "base64");
              } else {
                throw Error("Unsupported key format");
              }
            } else if (Buffer.isBuffer(data)) {
              buffer = data;
            } else {
              throw Error("Unsupported key format");
            }
            const reader = { buf: buffer, off: 0 };
            if (buffer.slice(0, 14).toString("ascii") !== "openssh-key-v1")
              throw "Invalid file format.";
            reader.off += 15;
            if (readOpenSSHKeyString(reader).toString("ascii") !== "none")
              throw Error("Unsupported key type");
            if (readOpenSSHKeyString(reader).toString("ascii") !== "none")
              throw Error("Unsupported key type");
            if (readOpenSSHKeyString(reader).toString("ascii") !== "")
              throw Error("Unsupported key type");
            reader.off += 4;
            reader.off += 4;
            if (readOpenSSHKeyString(reader).toString("ascii") !== "ssh-rsa")
              throw Error("Unsupported key type");
            readOpenSSHKeyString(reader);
            readOpenSSHKeyString(reader);
            reader.off += 12;
            if (readOpenSSHKeyString(reader).toString("ascii") !== "ssh-rsa")
              throw Error("Unsupported key type");
            const n = readOpenSSHKeyString(reader);
            const e = readOpenSSHKeyString(reader);
            const d = readOpenSSHKeyString(reader);
            const coeff = readOpenSSHKeyString(reader);
            const p = readOpenSSHKeyString(reader);
            const q = readOpenSSHKeyString(reader);
            const dint = new BigInteger(d);
            const qint = new BigInteger(q);
            const pint = new BigInteger(p);
            const dp = dint.mod(pint.subtract(BigInteger.ONE));
            const dq = dint.mod(qint.subtract(BigInteger.ONE));
            key.setPrivate(n, e, d, p, q, dp.toBuffer(), dq.toBuffer(), coeff);
            key.sshcomment = readOpenSSHKeyString(reader).toString("ascii");
          },
          publicExport: function(key, options) {
            let ebuf = Buffer.alloc(4);
            ebuf.writeUInt32BE(key.e, 0);
            while (ebuf[0] === 0)
              ebuf = ebuf.slice(1);
            const nbuf = key.n.toBuffer();
            const buf = Buffer.alloc(ebuf.byteLength + 4 + nbuf.byteLength + 4 + "ssh-rsa".length + 4);
            const writer = { buf, off: 0 };
            writeOpenSSHKeyString(writer, Buffer.from("ssh-rsa"));
            writeOpenSSHKeyString(writer, ebuf);
            writeOpenSSHKeyString(writer, nbuf);
            let comment = key.sshcomment || "";
            if (options.type === "der") {
              return writer.buf;
            } else {
              return "ssh-rsa " + buf.toString("base64") + " " + comment + "\n";
            }
          },
          publicImport: function(key, data, options) {
            options = options || {};
            var buffer;
            if (options.type !== "der") {
              if (Buffer.isBuffer(data)) {
                data = data.toString("utf8");
              }
              if (_.isString(data)) {
                if (data.substring(0, 8) !== "ssh-rsa ")
                  throw Error("Unsupported key format");
                let pemEnd = data.indexOf(" ", 8);
                if (pemEnd === -1) {
                  pemEnd = data.length;
                } else {
                  key.sshcomment = data.substring(pemEnd + 1).replace(/\s+|\n\r|\n|\r$/gm, "");
                }
                const pem = data.substring(8, pemEnd).replace(/\s+|\n\r|\n|\r$/gm, "");
                buffer = Buffer.from(pem, "base64");
              } else {
                throw Error("Unsupported key format");
              }
            } else if (Buffer.isBuffer(data)) {
              buffer = data;
            } else {
              throw Error("Unsupported key format");
            }
            const reader = { buf: buffer, off: 0 };
            const type = readOpenSSHKeyString(reader).toString("ascii");
            if (type !== "ssh-rsa")
              throw Error("Invalid key type: " + type);
            const e = readOpenSSHKeyString(reader);
            const n = readOpenSSHKeyString(reader);
            key.setPublic(n, e);
          },
          autoImport: function(key, data) {
            if (/^[\S\s]*-----BEGIN OPENSSH PRIVATE KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END OPENSSH PRIVATE KEY-----[\S\s]*$/g.test(data)) {
              module22.exports.privateImport(key, data);
              return true;
            }
            if (/^[\S\s]*ssh-rsa \s*(?=(([A-Za-z0-9+/=]+\s*)+))\1[\S\s]*$/g.test(data)) {
              module22.exports.publicImport(key, data);
              return true;
            }
            return false;
          }
        };
        function readOpenSSHKeyString(reader) {
          const len = reader.buf.readInt32BE(reader.off);
          reader.off += 4;
          const res = reader.buf.slice(reader.off, reader.off + len);
          reader.off += len;
          return res;
        }
        function writeOpenSSHKeyString(writer, data) {
          writer.buf.writeInt32BE(data.byteLength, writer.off);
          writer.off += 4;
          writer.off += data.copy(writer.buf, writer.off);
        }
      }
    });
    var require_formats = __commonJS2({
      "node_modules/node-rsa/src/formats/formats.js"(exports2, module22) {
        var _ = require_utils22()._;
        function formatParse(format) {
          format = format.split("-");
          var keyType = "private";
          var keyOpt = { type: "default" };
          for (var i = 1; i < format.length; i++) {
            if (format[i]) {
              switch (format[i]) {
                case "public":
                  keyType = format[i];
                  break;
                case "private":
                  keyType = format[i];
                  break;
                case "pem":
                  keyOpt.type = format[i];
                  break;
                case "der":
                  keyOpt.type = format[i];
                  break;
              }
            }
          }
          return { scheme: format[0], keyType, keyOpt };
        }
        module22.exports = {
          pkcs1: require_pkcs12(),
          pkcs8: require_pkcs8(),
          components: require_components(),
          openssh: require_openssh(),
          isPrivateExport: function(format) {
            return module22.exports[format] && typeof module22.exports[format].privateExport === "function";
          },
          isPrivateImport: function(format) {
            return module22.exports[format] && typeof module22.exports[format].privateImport === "function";
          },
          isPublicExport: function(format) {
            return module22.exports[format] && typeof module22.exports[format].publicExport === "function";
          },
          isPublicImport: function(format) {
            return module22.exports[format] && typeof module22.exports[format].publicImport === "function";
          },
          detectAndImport: function(key, data, format) {
            if (format === void 0) {
              for (var scheme in module22.exports) {
                if (typeof module22.exports[scheme].autoImport === "function" && module22.exports[scheme].autoImport(key, data)) {
                  return true;
                }
              }
            } else if (format) {
              var fmt = formatParse(format);
              if (module22.exports[fmt.scheme]) {
                if (fmt.keyType === "private") {
                  module22.exports[fmt.scheme].privateImport(key, data, fmt.keyOpt);
                } else {
                  module22.exports[fmt.scheme].publicImport(key, data, fmt.keyOpt);
                }
              } else {
                throw Error("Unsupported key format");
              }
            }
            return false;
          },
          detectAndExport: function(key, format) {
            if (format) {
              var fmt = formatParse(format);
              if (module22.exports[fmt.scheme]) {
                if (fmt.keyType === "private") {
                  if (!key.isPrivate()) {
                    throw Error("This is not private key");
                  }
                  return module22.exports[fmt.scheme].privateExport(key, fmt.keyOpt);
                } else {
                  if (!key.isPublic()) {
                    throw Error("This is not public key");
                  }
                  return module22.exports[fmt.scheme].publicExport(key, fmt.keyOpt);
                }
              } else {
                throw Error("Unsupported key format");
              }
            }
          }
        };
      }
    });
    var require_NodeRSA = __commonJS2({
      "node_modules/node-rsa/src/NodeRSA.js"(exports2, module22) {
        var constants = require("constants");
        var rsa = require_rsa();
        var crypt = require("crypto");
        var ber = require_lib3().Ber;
        var _ = require_utils22()._;
        var utils = require_utils22();
        var schemes = require_schemes();
        var formats = require_formats();
        if (typeof constants.RSA_NO_PADDING === "undefined") {
          constants.RSA_NO_PADDING = 3;
        }
        module22.exports = function() {
          var SUPPORTED_HASH_ALGORITHMS = {
            node10: ["md4", "md5", "ripemd160", "sha1", "sha224", "sha256", "sha384", "sha512"],
            node: ["md4", "md5", "ripemd160", "sha1", "sha224", "sha256", "sha384", "sha512"],
            iojs: ["md4", "md5", "ripemd160", "sha1", "sha224", "sha256", "sha384", "sha512"],
            browser: ["md5", "ripemd160", "sha1", "sha256", "sha512"]
          };
          var DEFAULT_ENCRYPTION_SCHEME = "pkcs1_oaep";
          var DEFAULT_SIGNING_SCHEME = "pkcs1";
          var DEFAULT_EXPORT_FORMAT = "private";
          var EXPORT_FORMAT_ALIASES = {
            "private": "pkcs1-private-pem",
            "private-der": "pkcs1-private-der",
            "public": "pkcs8-public-pem",
            "public-der": "pkcs8-public-der"
          };
          function NodeRSA2(key, format, options) {
            if (!(this instanceof NodeRSA2)) {
              return new NodeRSA2(key, format, options);
            }
            if (_.isObject(format)) {
              options = format;
              format = void 0;
            }
            this.$options = {
              signingScheme: DEFAULT_SIGNING_SCHEME,
              signingSchemeOptions: {
                hash: "sha256",
                saltLength: null
              },
              encryptionScheme: DEFAULT_ENCRYPTION_SCHEME,
              encryptionSchemeOptions: {
                hash: "sha1",
                label: null
              },
              environment: utils.detectEnvironment(),
              rsaUtils: this
            };
            this.keyPair = new rsa.Key();
            this.$cache = {};
            if (Buffer.isBuffer(key) || _.isString(key)) {
              this.importKey(key, format);
            } else if (_.isObject(key)) {
              this.generateKeyPair(key.b, key.e);
            }
            this.setOptions(options);
          }
          NodeRSA2.prototype.setOptions = function(options) {
            options = options || {};
            if (options.environment) {
              this.$options.environment = options.environment;
            }
            if (options.signingScheme) {
              if (_.isString(options.signingScheme)) {
                var signingScheme = options.signingScheme.toLowerCase().split("-");
                if (signingScheme.length == 1) {
                  if (SUPPORTED_HASH_ALGORITHMS.node.indexOf(signingScheme[0]) > -1) {
                    this.$options.signingSchemeOptions = {
                      hash: signingScheme[0]
                    };
                    this.$options.signingScheme = DEFAULT_SIGNING_SCHEME;
                  } else {
                    this.$options.signingScheme = signingScheme[0];
                    this.$options.signingSchemeOptions = {
                      hash: null
                    };
                  }
                } else {
                  this.$options.signingSchemeOptions = {
                    hash: signingScheme[1]
                  };
                  this.$options.signingScheme = signingScheme[0];
                }
              } else if (_.isObject(options.signingScheme)) {
                this.$options.signingScheme = options.signingScheme.scheme || DEFAULT_SIGNING_SCHEME;
                this.$options.signingSchemeOptions = _.omit(options.signingScheme, "scheme");
              }
              if (!schemes.isSignature(this.$options.signingScheme)) {
                throw Error("Unsupported signing scheme");
              }
              if (this.$options.signingSchemeOptions.hash && SUPPORTED_HASH_ALGORITHMS[this.$options.environment].indexOf(this.$options.signingSchemeOptions.hash) === -1) {
                throw Error("Unsupported hashing algorithm for " + this.$options.environment + " environment");
              }
            }
            if (options.encryptionScheme) {
              if (_.isString(options.encryptionScheme)) {
                this.$options.encryptionScheme = options.encryptionScheme.toLowerCase();
                this.$options.encryptionSchemeOptions = {};
              } else if (_.isObject(options.encryptionScheme)) {
                this.$options.encryptionScheme = options.encryptionScheme.scheme || DEFAULT_ENCRYPTION_SCHEME;
                this.$options.encryptionSchemeOptions = _.omit(options.encryptionScheme, "scheme");
              }
              if (!schemes.isEncryption(this.$options.encryptionScheme)) {
                throw Error("Unsupported encryption scheme");
              }
              if (this.$options.encryptionSchemeOptions.hash && SUPPORTED_HASH_ALGORITHMS[this.$options.environment].indexOf(this.$options.encryptionSchemeOptions.hash) === -1) {
                throw Error("Unsupported hashing algorithm for " + this.$options.environment + " environment");
              }
            }
            this.keyPair.setOptions(this.$options);
          };
          NodeRSA2.prototype.generateKeyPair = function(bits, exp) {
            bits = bits || 2048;
            exp = exp || 65537;
            if (bits % 8 !== 0) {
              throw Error("Key size must be a multiple of 8.");
            }
            this.keyPair.generate(bits, exp.toString(16));
            this.$cache = {};
            return this;
          };
          NodeRSA2.prototype.importKey = function(keyData, format) {
            if (!keyData) {
              throw Error("Empty key given");
            }
            if (format) {
              format = EXPORT_FORMAT_ALIASES[format] || format;
            }
            if (!formats.detectAndImport(this.keyPair, keyData, format) && format === void 0) {
              throw Error("Key format must be specified");
            }
            this.$cache = {};
            return this;
          };
          NodeRSA2.prototype.exportKey = function(format) {
            format = format || DEFAULT_EXPORT_FORMAT;
            format = EXPORT_FORMAT_ALIASES[format] || format;
            if (!this.$cache[format]) {
              this.$cache[format] = formats.detectAndExport(this.keyPair, format);
            }
            return this.$cache[format];
          };
          NodeRSA2.prototype.isPrivate = function() {
            return this.keyPair.isPrivate();
          };
          NodeRSA2.prototype.isPublic = function(strict) {
            return this.keyPair.isPublic(strict);
          };
          NodeRSA2.prototype.isEmpty = function(strict) {
            return !(this.keyPair.n || this.keyPair.e || this.keyPair.d);
          };
          NodeRSA2.prototype.encrypt = function(buffer, encoding, source_encoding) {
            return this.$$encryptKey(false, buffer, encoding, source_encoding);
          };
          NodeRSA2.prototype.decrypt = function(buffer, encoding) {
            return this.$$decryptKey(false, buffer, encoding);
          };
          NodeRSA2.prototype.encryptPrivate = function(buffer, encoding, source_encoding) {
            return this.$$encryptKey(true, buffer, encoding, source_encoding);
          };
          NodeRSA2.prototype.decryptPublic = function(buffer, encoding) {
            return this.$$decryptKey(true, buffer, encoding);
          };
          NodeRSA2.prototype.$$encryptKey = function(usePrivate, buffer, encoding, source_encoding) {
            try {
              var res = this.keyPair.encrypt(this.$getDataForEncrypt(buffer, source_encoding), usePrivate);
              if (encoding == "buffer" || !encoding) {
                return res;
              } else {
                return res.toString(encoding);
              }
            } catch (e) {
              throw Error("Error during encryption. Original error: " + e);
            }
          };
          NodeRSA2.prototype.$$decryptKey = function(usePublic, buffer, encoding) {
            try {
              buffer = _.isString(buffer) ? Buffer.from(buffer, "base64") : buffer;
              var res = this.keyPair.decrypt(buffer, usePublic);
              if (res === null) {
                throw Error("Key decrypt method returns null.");
              }
              return this.$getDecryptedData(res, encoding);
            } catch (e) {
              throw Error("Error during decryption (probably incorrect key). Original error: " + e);
            }
          };
          NodeRSA2.prototype.sign = function(buffer, encoding, source_encoding) {
            if (!this.isPrivate()) {
              throw Error("This is not private key");
            }
            var res = this.keyPair.sign(this.$getDataForEncrypt(buffer, source_encoding));
            if (encoding && encoding != "buffer") {
              res = res.toString(encoding);
            }
            return res;
          };
          NodeRSA2.prototype.verify = function(buffer, signature, source_encoding, signature_encoding) {
            if (!this.isPublic()) {
              throw Error("This is not public key");
            }
            signature_encoding = !signature_encoding || signature_encoding == "buffer" ? null : signature_encoding;
            return this.keyPair.verify(this.$getDataForEncrypt(buffer, source_encoding), signature, signature_encoding);
          };
          NodeRSA2.prototype.getKeySize = function() {
            return this.keyPair.keySize;
          };
          NodeRSA2.prototype.getMaxMessageSize = function() {
            return this.keyPair.maxMessageLength;
          };
          NodeRSA2.prototype.$getDataForEncrypt = function(buffer, encoding) {
            if (_.isString(buffer) || _.isNumber(buffer)) {
              return Buffer.from("" + buffer, encoding || "utf8");
            } else if (Buffer.isBuffer(buffer)) {
              return buffer;
            } else if (_.isObject(buffer)) {
              return Buffer.from(JSON.stringify(buffer));
            } else {
              throw Error("Unexpected data type");
            }
          };
          NodeRSA2.prototype.$getDecryptedData = function(buffer, encoding) {
            encoding = encoding || "buffer";
            if (encoding == "buffer") {
              return buffer;
            } else if (encoding == "json") {
              return JSON.parse(buffer.toString());
            } else {
              return buffer.toString(encoding);
            }
          };
          return NodeRSA2;
        }();
      }
    });
    var require_common = __commonJS2({
      "node_modules/debug/src/common.js"(exports2, module22) {
        function setup(env) {
          createDebug.debug = createDebug;
          createDebug.default = createDebug;
          createDebug.coerce = coerce;
          createDebug.disable = disable;
          createDebug.enable = enable;
          createDebug.enabled = enabled;
          createDebug.humanize = require_ms();
          createDebug.destroy = destroy;
          Object.keys(env).forEach((key) => {
            createDebug[key] = env[key];
          });
          createDebug.names = [];
          createDebug.skips = [];
          createDebug.formatters = {};
          function selectColor(namespace) {
            let hash = 0;
            for (let i = 0; i < namespace.length; i++) {
              hash = (hash << 5) - hash + namespace.charCodeAt(i);
              hash |= 0;
            }
            return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
          }
          createDebug.selectColor = selectColor;
          function createDebug(namespace) {
            let prevTime;
            let enableOverride = null;
            let namespacesCache;
            let enabledCache;
            function debug4(...args) {
              if (!debug4.enabled) {
                return;
              }
              const self = debug4;
              const curr = Number(new Date());
              const ms = curr - (prevTime || curr);
              self.diff = ms;
              self.prev = prevTime;
              self.curr = curr;
              prevTime = curr;
              args[0] = createDebug.coerce(args[0]);
              if (typeof args[0] !== "string") {
                args.unshift("%O");
              }
              let index = 0;
              args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
                if (match === "%%") {
                  return "%";
                }
                index++;
                const formatter = createDebug.formatters[format];
                if (typeof formatter === "function") {
                  const val = args[index];
                  match = formatter.call(self, val);
                  args.splice(index, 1);
                  index--;
                }
                return match;
              });
              createDebug.formatArgs.call(self, args);
              const logFn = self.log || createDebug.log;
              logFn.apply(self, args);
            }
            debug4.namespace = namespace;
            debug4.useColors = createDebug.useColors();
            debug4.color = createDebug.selectColor(namespace);
            debug4.extend = extend;
            debug4.destroy = createDebug.destroy;
            Object.defineProperty(debug4, "enabled", {
              enumerable: true,
              configurable: false,
              get: () => {
                if (enableOverride !== null) {
                  return enableOverride;
                }
                if (namespacesCache !== createDebug.namespaces) {
                  namespacesCache = createDebug.namespaces;
                  enabledCache = createDebug.enabled(namespace);
                }
                return enabledCache;
              },
              set: (v) => {
                enableOverride = v;
              }
            });
            if (typeof createDebug.init === "function") {
              createDebug.init(debug4);
            }
            return debug4;
          }
          function extend(namespace, delimiter) {
            const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
            newDebug.log = this.log;
            return newDebug;
          }
          function enable(namespaces) {
            createDebug.save(namespaces);
            createDebug.namespaces = namespaces;
            createDebug.names = [];
            createDebug.skips = [];
            let i;
            const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
            const len = split.length;
            for (i = 0; i < len; i++) {
              if (!split[i]) {
                continue;
              }
              namespaces = split[i].replace(/\*/g, ".*?");
              if (namespaces[0] === "-") {
                createDebug.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
              } else {
                createDebug.names.push(new RegExp("^" + namespaces + "$"));
              }
            }
          }
          function disable() {
            const namespaces = [
              ...createDebug.names.map(toNamespace),
              ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
            ].join(",");
            createDebug.enable("");
            return namespaces;
          }
          function enabled(name2) {
            if (name2[name2.length - 1] === "*") {
              return true;
            }
            let i;
            let len;
            for (i = 0, len = createDebug.skips.length; i < len; i++) {
              if (createDebug.skips[i].test(name2)) {
                return false;
              }
            }
            for (i = 0, len = createDebug.names.length; i < len; i++) {
              if (createDebug.names[i].test(name2)) {
                return true;
              }
            }
            return false;
          }
          function toNamespace(regexp) {
            return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
          }
          function coerce(val) {
            if (val instanceof Error) {
              return val.stack || val.message;
            }
            return val;
          }
          function destroy() {
            console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
          }
          createDebug.enable(createDebug.load());
          return createDebug;
        }
        module22.exports = setup;
      }
    });
    var require_browser = __commonJS2({
      "node_modules/debug/src/browser.js"(exports2, module22) {
        exports2.formatArgs = formatArgs;
        exports2.save = save;
        exports2.load = load;
        exports2.useColors = useColors;
        exports2.storage = localstorage();
        exports2.destroy = (() => {
          let warned = false;
          return () => {
            if (!warned) {
              warned = true;
              console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
            }
          };
        })();
        exports2.colors = [
          "#0000CC",
          "#0000FF",
          "#0033CC",
          "#0033FF",
          "#0066CC",
          "#0066FF",
          "#0099CC",
          "#0099FF",
          "#00CC00",
          "#00CC33",
          "#00CC66",
          "#00CC99",
          "#00CCCC",
          "#00CCFF",
          "#3300CC",
          "#3300FF",
          "#3333CC",
          "#3333FF",
          "#3366CC",
          "#3366FF",
          "#3399CC",
          "#3399FF",
          "#33CC00",
          "#33CC33",
          "#33CC66",
          "#33CC99",
          "#33CCCC",
          "#33CCFF",
          "#6600CC",
          "#6600FF",
          "#6633CC",
          "#6633FF",
          "#66CC00",
          "#66CC33",
          "#9900CC",
          "#9900FF",
          "#9933CC",
          "#9933FF",
          "#99CC00",
          "#99CC33",
          "#CC0000",
          "#CC0033",
          "#CC0066",
          "#CC0099",
          "#CC00CC",
          "#CC00FF",
          "#CC3300",
          "#CC3333",
          "#CC3366",
          "#CC3399",
          "#CC33CC",
          "#CC33FF",
          "#CC6600",
          "#CC6633",
          "#CC9900",
          "#CC9933",
          "#CCCC00",
          "#CCCC33",
          "#FF0000",
          "#FF0033",
          "#FF0066",
          "#FF0099",
          "#FF00CC",
          "#FF00FF",
          "#FF3300",
          "#FF3333",
          "#FF3366",
          "#FF3399",
          "#FF33CC",
          "#FF33FF",
          "#FF6600",
          "#FF6633",
          "#FF9900",
          "#FF9933",
          "#FFCC00",
          "#FFCC33"
        ];
        function useColors() {
          if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
            return true;
          }
          if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
            return false;
          }
          return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
        }
        function formatArgs(args) {
          args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module22.exports.humanize(this.diff);
          if (!this.useColors) {
            return;
          }
          const c = "color: " + this.color;
          args.splice(1, 0, c, "color: inherit");
          let index = 0;
          let lastC = 0;
          args[0].replace(/%[a-zA-Z%]/g, (match) => {
            if (match === "%%") {
              return;
            }
            index++;
            if (match === "%c") {
              lastC = index;
            }
          });
          args.splice(lastC, 0, c);
        }
        exports2.log = console.debug || console.log || (() => {
        });
        function save(namespaces) {
          try {
            if (namespaces) {
              exports2.storage.setItem("debug", namespaces);
            } else {
              exports2.storage.removeItem("debug");
            }
          } catch (error) {
          }
        }
        function load() {
          let r;
          try {
            r = exports2.storage.getItem("debug");
          } catch (error) {
          }
          if (!r && typeof process !== "undefined" && "env" in process) {
            r = process.env.DEBUG;
          }
          return r;
        }
        function localstorage() {
          try {
            return localStorage;
          } catch (error) {
          }
        }
        module22.exports = require_common()(exports2);
        var { formatters } = module22.exports;
        formatters.j = function(v) {
          try {
            return JSON.stringify(v);
          } catch (error) {
            return "[UnexpectedJSONParseError]: " + error.message;
          }
        };
      }
    });
    var require_has_flag3 = __commonJS2({
      "node_modules/has-flag/index.js"(exports2, module22) {
        "use strict";
        module22.exports = (flag, argv) => {
          argv = argv || process.argv;
          const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
          const pos = argv.indexOf(prefix + flag);
          const terminatorPos = argv.indexOf("--");
          return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
        };
      }
    });
    var require_supports_color3 = __commonJS2({
      "node_modules/supports-color/index.js"(exports2, module22) {
        "use strict";
        var os = require("os");
        var hasFlag = require_has_flag3();
        var env = process.env;
        var forceColor;
        if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false")) {
          forceColor = false;
        } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
          forceColor = true;
        }
        if ("FORCE_COLOR" in env) {
          forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
        }
        function translateLevel(level) {
          if (level === 0) {
            return false;
          }
          return {
            level,
            hasBasic: true,
            has256: level >= 2,
            has16m: level >= 3
          };
        }
        function supportsColor(stream) {
          if (forceColor === false) {
            return 0;
          }
          if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
            return 3;
          }
          if (hasFlag("color=256")) {
            return 2;
          }
          if (stream && !stream.isTTY && forceColor !== true) {
            return 0;
          }
          const min = forceColor ? 1 : 0;
          if (process.platform === "win32") {
            const osRelease = os.release().split(".");
            if (Number(process.versions.node.split(".")[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
              return Number(osRelease[2]) >= 14931 ? 3 : 2;
            }
            return 1;
          }
          if ("CI" in env) {
            if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
              return 1;
            }
            return min;
          }
          if ("TEAMCITY_VERSION" in env) {
            return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
          }
          if (env.COLORTERM === "truecolor") {
            return 3;
          }
          if ("TERM_PROGRAM" in env) {
            const version2 = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
            switch (env.TERM_PROGRAM) {
              case "iTerm.app":
                return version2 >= 3 ? 3 : 2;
              case "Apple_Terminal":
                return 2;
            }
          }
          if (/-256(color)?$/i.test(env.TERM)) {
            return 2;
          }
          if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
            return 1;
          }
          if ("COLORTERM" in env) {
            return 1;
          }
          if (env.TERM === "dumb") {
            return min;
          }
          return min;
        }
        function getSupportLevel(stream) {
          const level = supportsColor(stream);
          return translateLevel(level);
        }
        module22.exports = {
          supportsColor: getSupportLevel,
          stdout: getSupportLevel(process.stdout),
          stderr: getSupportLevel(process.stderr)
        };
      }
    });
    var require_node2 = __commonJS2({
      "node_modules/debug/src/node.js"(exports2, module22) {
        var tty = require("tty");
        var util = require("util");
        exports2.init = init;
        exports2.log = log;
        exports2.formatArgs = formatArgs;
        exports2.save = save;
        exports2.load = load;
        exports2.useColors = useColors;
        exports2.destroy = util.deprecate(() => {
        }, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        exports2.colors = [6, 2, 3, 4, 5, 1];
        try {
          const supportsColor = require_supports_color3();
          if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
            exports2.colors = [
              20,
              21,
              26,
              27,
              32,
              33,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              56,
              57,
              62,
              63,
              68,
              69,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              92,
              93,
              98,
              99,
              112,
              113,
              128,
              129,
              134,
              135,
              148,
              149,
              160,
              161,
              162,
              163,
              164,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              178,
              179,
              184,
              185,
              196,
              197,
              198,
              199,
              200,
              201,
              202,
              203,
              204,
              205,
              206,
              207,
              208,
              209,
              214,
              215,
              220,
              221
            ];
          }
        } catch (error) {
        }
        exports2.inspectOpts = Object.keys(process.env).filter((key) => {
          return /^debug_/i.test(key);
        }).reduce((obj, key) => {
          const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
            return k.toUpperCase();
          });
          let val = process.env[key];
          if (/^(yes|on|true|enabled)$/i.test(val)) {
            val = true;
          } else if (/^(no|off|false|disabled)$/i.test(val)) {
            val = false;
          } else if (val === "null") {
            val = null;
          } else {
            val = Number(val);
          }
          obj[prop] = val;
          return obj;
        }, {});
        function useColors() {
          return "colors" in exports2.inspectOpts ? Boolean(exports2.inspectOpts.colors) : tty.isatty(process.stderr.fd);
        }
        function formatArgs(args) {
          const { namespace: name2, useColors: useColors2 } = this;
          if (useColors2) {
            const c = this.color;
            const colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
            const prefix = `  ${colorCode};1m${name2} \x1B[0m`;
            args[0] = prefix + args[0].split("\n").join("\n" + prefix);
            args.push(colorCode + "m+" + module22.exports.humanize(this.diff) + "\x1B[0m");
          } else {
            args[0] = getDate() + name2 + " " + args[0];
          }
        }
        function getDate() {
          if (exports2.inspectOpts.hideDate) {
            return "";
          }
          return new Date().toISOString() + " ";
        }
        function log(...args) {
          return process.stderr.write(util.format(...args) + "\n");
        }
        function save(namespaces) {
          if (namespaces) {
            process.env.DEBUG = namespaces;
          } else {
            delete process.env.DEBUG;
          }
        }
        function load() {
          return process.env.DEBUG;
        }
        function init(debug4) {
          debug4.inspectOpts = {};
          const keys = Object.keys(exports2.inspectOpts);
          for (let i = 0; i < keys.length; i++) {
            debug4.inspectOpts[keys[i]] = exports2.inspectOpts[keys[i]];
          }
        }
        module22.exports = require_common()(exports2);
        var { formatters } = module22.exports;
        formatters.o = function(v) {
          this.inspectOpts.colors = this.useColors;
          return util.inspect(v, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
        };
        formatters.O = function(v) {
          this.inspectOpts.colors = this.useColors;
          return util.inspect(v, this.inspectOpts);
        };
      }
    });
    var require_src = __commonJS2({
      "node_modules/debug/src/index.js"(exports2, module22) {
        if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
          module22.exports = require_browser();
        } else {
          module22.exports = require_node2();
        }
      }
    });
    var github_app_installation_token_exports = {};
    __export2(github_app_installation_token_exports, {
      getToken: () => getToken2,
      getTokenCommand: () => command
    });
    var import_ora = __toESM2(require_ora());
    var import_rest = __toESM2(require_dist_node12());
    var import_auth_app = __toESM2(require_dist_node19());
    var import_node_rsa = __toESM2(require_NodeRSA());
    var SUCCESS_SYMBOL = "\u{1F4AB}";
    var import_debug = __toESM2(require_src());
    var name = "github-app-installation-token";
    function logger(nameSpace) {
      const log = (0, import_debug.default)(`${name}:${nameSpace}`);
      log.log = console.log.bind(console);
      return log;
    }
    var isObject = (value) => {
      return !!value && typeof value === "object";
    };
    var isAppsCreateInstallationAccessTokenResponse = (response) => {
      return isObject(response) && typeof (response == null ? void 0 : response.token) === "string";
    };
    var isError = (e) => e instanceof Error;
    var import_fs = __toESM2(require("fs"));
    var import_util = require("util");
    var debug2 = logger("READ_FILE");
    var readFile = (0, import_util.promisify)(import_fs.default.readFile);
    var readContent = async (filePath) => {
      debug2("reading...", filePath);
      const rawContent = await readFile(filePath);
      const content = rawContent.toString();
      return content;
    };
    var debug3 = logger("generate");
    async function getToken2({ appId, installationId, privateKey, baseUrl }, requestOptions) {
      const key = new import_node_rsa.default(privateKey);
      let request;
      if (requestOptions == null ? void 0 : requestOptions.rawResponse) {
        const _a = requestOptions, { rawResponse: _rawResponse } = _a, rest = __objRest(_a, ["rawResponse"]);
        request = rest;
      } else {
        request = requestOptions;
      }
      const octokit = new import_rest.Octokit({
        authStrategy: import_auth_app.createAppAuth,
        auth: {
          appId,
          id: appId,
          privateKey: key.exportKey("pkcs8-private-pem")
        },
        baseUrl,
        request
      });
      const response = await octokit.auth({
        type: "installation",
        installationId
      });
      if (!isAppsCreateInstallationAccessTokenResponse(response)) {
        debug3(`response is missing the token, we got ${response}`);
        throw new Error("Something went wrong on the token retrieval, enable debug to inspect further");
      }
      return (requestOptions == null ? void 0 : requestOptions.rawResponse) ? response : { token: response.token };
    }
    var isValidInput = (input) => {
      return !!(input.privateKey || input.privateKeyLocation);
    };
    var command = async (input) => {
      debug3("input:", input);
      const loader = (0, import_ora.default)("Retrieving token...").start();
      try {
        let privateKey;
        const { privateKeyLocation, installationId, appId, rawResponse } = input;
        if (!isValidInput(input)) {
          loader.fail("Input is not valid, either privateKey or privateKeyLocation should be provided");
          process.exit(1);
        }
        if (!input.privateKey && privateKeyLocation) {
          privateKey = await readContent(privateKeyLocation);
        } else {
          privateKey = input.privateKey;
        }
        const response = await getToken2({ privateKey, installationId, appId }, { rawResponse: true });
        loader.stopAndPersist({
          text: `The token is: ${response.token} and expires ${response.expiresAt}`,
          symbol: SUCCESS_SYMBOL
        });
        console.log(rawResponse ? response : response.token);
      } catch (e) {
        if (isError(e)) {
          loader.fail(`We encountered an error: ${e.message}`);
        }
        process.exit(1);
      }
    };
    module2.exports = __toCommonJS2(github_app_installation_token_exports);
  }
});

// src/main.ts
var import_core = __toESM(require_core());
var import_github_app_installation_token = __toESM(require_dist());
async function run() {
  try {
    const appId = parseInt((0, import_core.getInput)("appId"), 10);
    const installationId = parseInt((0, import_core.getInput)("installationId"), 10);
    const privateKey = (0, import_core.getInput)("privateKey");
    const baseUrl = (0, import_core.getInput)("baseUrl", { required: false }) || void 0;
    const { token } = await (0, import_github_app_installation_token.getToken)({ appId, installationId, privateKey, baseUrl });
    (0, import_core.setOutput)("token", token);
  } catch (error) {
    (0, import_core.setFailed)(error.message);
  }
}

// src/index.ts
run();
